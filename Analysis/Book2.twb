<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1211.0901                               -->
<workbook original-version='18.1' source-build='2024.3.2 (20243.24.1211.0901)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <CascadingFiltersHamburgerUI />
    <CustomReferenceLineTooltips />
    <_.fcp.IndividualControlFormatting.true...IndividualControlFormatting />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <ParameterDefaultValues />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
        <calculation class='tableau' formula='20.199999999999999' />
      </column>
      <column caption='Non_Photo_min_perDiff2023' datatype='real' datatype-customized='true' name='[Non_Photo_max_perDiff2018 (copy)_1510957715805691906]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[PerDff]' type='quantitative' value='-19.399999999999999'>
        <calculation class='tableau' formula='-19.399999999999999' />
      </column>
      <column caption='Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Non_Photo_max_perDiff2018 (copy)_1510957715806212099]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='2.6000000000000001'>
        <calculation class='tableau' formula='2.6000000000000001' />
      </column>
      <column caption='Photo_min_perDiff2023' datatype='real' datatype-customized='true' name='[Non_Photo_min_perDiff2023 (copy)_1510957715806420996]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[PerDff]' type='quantitative' value='-2.3999999999999999'>
        <calculation class='tableau' formula='-2.3999999999999999' />
      </column>
      <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
        <calculation class='tableau' formula='2020.' />
      </column>
    </datasource>
    <datasource caption='v_countrydate+ (ecocapture)' inline='true' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='mysql.040164612je0re1ch3d4c10oumvj'>
            <connection class='mysql' dbname='ecocapture' odbc-native-protocol='' one-time-sql='' port='3306' server='localhost' source-charset='' username='root' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatsdiff' table='[v_twocatsdiff]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatstats' table='[v_twocatstats]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
        </relation>
        <cols>
          <map key='[City]' value='[v_photovisit_rating].[City]' />
          <map key='[CountryCount]' value='[v_frqcountry].[CountryCount]' />
          <map key='[InputID (v_photovisit_rating)]' value='[v_photovisit_rating].[InputID]' />
          <map key='[InputID]' value='[v_photographyvsnonall].[InputID]' />
          <map key='[PerDff]' value='[v_twocatsdiff].[PerDff]' />
          <map key='[Percent2018]' value='[v_twocatsdiff].[Percent2018]' />
          <map key='[Percent2023]' value='[v_twocatsdiff].[Percent2023]' />
          <map key='[Photography (v_frqcountry)]' value='[v_frqcountry].[Photography]' />
          <map key='[Photography (v_twocatsdiff)]' value='[v_twocatsdiff].[Photography]' />
          <map key='[Photography (v_twocatstats)]' value='[v_twocatstats].[Photography]' />
          <map key='[Photography]' value='[v_photographyvsnonall].[Photography]' />
          <map key='[TravelMax]' value='[v_twocatstats].[TravelMax]' />
          <map key='[TravelMean]' value='[v_twocatstats].[TravelMean]' />
          <map key='[TravelMin]' value='[v_twocatstats].[TravelMin]' />
          <map key='[Travel_Date]' value='[v_countrydate].[Travel_Date]' />
          <map key='[Travel_Month]' value='[v_countrydate].[Travel_Month]' />
          <map key='[Travel_Year (v_frqcountry)]' value='[v_frqcountry].[Travel_Year]' />
          <map key='[Travel_Year (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Travel_Year]' />
          <map key='[Travel_Year (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_Year]' />
          <map key='[Travel_Year (v_twocatstats)]' value='[v_twocatstats].[Travel_Year]' />
          <map key='[Travel_Year]' value='[v_countrydate].[Travel_Year]' />
          <map key='[Travel_month (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_month]' />
          <map key='[Travel_month]' value='[v_photographyvsnonall].[Travel_month]' />
          <map key='[Traveller_Country (v_frqcountry)]' value='[v_frqcountry].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_Country]' />
          <map key='[Traveller_Country]' value='[v_countrydate].[Traveller_Country]' />
          <map key='[Traveller_ID (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_ID]' />
          <map key='[Traveller_ID (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_ID]' />
          <map key='[Traveller_ID]' value='[v_countrydate].[Traveller_ID]' />
          <map key='[_allcount]' value='[v_twocatsdiff].[_allcount]' />
          <map key='[activity]' value='[v_photovisit_rating].[activity]' />
          <map key='[inputID]' value='[v_countrydate].[inputID]' />
          <map key='[location_Type (v_photographyvsnonall)]' value='[v_photographyvsnonall].[location_Type]' />
          <map key='[location_Type]' value='[v_photovisit_rating].[location_Type]' />
          <map key='[month (v_photographyvsnonall)]' value='[v_photographyvsnonall].[month]' />
          <map key='[month (v_photovisit_rating)]' value='[v_photovisit_rating].[month]' />
          <map key='[month]' value='[v_countrydate].[month]' />
          <map key='[rating (v_photographyvsnonall)]' value='[v_photographyvsnonall].[rating]' />
          <map key='[rating]' value='[v_photovisit_rating].[rating]' />
          <map key='[sentiment_comments (v_frqcountry)]' value='[v_frqcountry].[sentiment_comments]' />
          <map key='[sentiment_comments (v_photographyvsnonall)]' value='[v_photographyvsnonall].[sentiment_comments]' />
          <map key='[sentiment_comments]' value='[v_photovisit_rating].[sentiment_comments]' />
          <map key='[tot2018]' value='[v_twocatsdiff].[tot2018]' />
          <map key='[tot2023]' value='[v_twocatsdiff].[tot2023]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>inputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[inputID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>inputID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Travel_Date]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Date</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Month</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CountryCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CountryCount]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>CountryCount</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_twocatsdiff)]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tot2018</remote-name>
            <remote-type>20</remote-type>
            <local-name>[tot2018]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>tot2018</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tot2023</remote-name>
            <remote-type>20</remote-type>
            <local-name>[tot2023]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>tot2023</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_allcount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[_allcount]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>_allcount</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Percent2018</remote-name>
            <remote-type>131</remote-type>
            <local-name>[Percent2018]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Percent2018</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>5</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Percent2023</remote-name>
            <remote-type>131</remote-type>
            <local-name>[Percent2023]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Percent2023</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>5</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PerDff</remote-name>
            <remote-type>131</remote-type>
            <local-name>[PerDff]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>PerDff</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>6</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_twocatstats)]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_twocatstats)]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMean</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMean]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMean</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMax</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMax]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMax</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMin</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMin]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMin</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>40</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>41</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>activity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[activity]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>activity</remote-alias>
            <ordinal>42</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>18</width>
            <contains-null>false</contains-null>
            <collation charset='296' flag='3' name='LROOT_S1' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>43</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>44</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>45</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>46</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>47</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>48</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>49</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='perDiff2018' datatype='real' name='[Calculation_1510957715795554304]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If [Per Dff] NOT NULL then #pDiff2018' />
      </column>
      <column caption='Pdiff2018' datatype='boolean' name='[Calculation_1510957715796783105]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Photography (v_twocatsdiff)]=&apos;No photography&apos;&#13;&#10;    then [Parameters].[Covid 19 Year (copy)]=[PerDff]&#13;&#10;END' />
      </column>
      <column caption='Z-scor' datatype='real' name='[Calculation_3191363324673548296]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(SUM([rating (v_photographyvsnonall)])-WINDOW_AVG(SUM([rating (v_photographyvsnonall)])))/WINDOW_STDEV(SUM([rating (v_photographyvsnonall)]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
      <column caption='InputID (v photovisit rating)' datatype='integer' name='[InputID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Input ID1' datatype='integer' name='[InputID]' role='dimension' type='ordinal' />
      <column caption='Per Dff' datatype='real' name='[PerDff]' role='measure' type='quantitative' />
      <column caption='Photography (v frqcountry)' datatype='string' name='[Photography (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Photography (v twocatsdiff)' datatype='string' name='[Photography (v_twocatsdiff)]' role='dimension' type='nominal' />
      <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
      <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
          <alias key='&quot;photography&quot;' value='Photography Holiday' />
          <alias key='&quot;Photography&quot;' value='Photography Holidays' />
        </aliases>
      </column>
      <column datatype='real' name='[TravelMax]' role='measure' type='quantitative' />
      <column datatype='real' name='[TravelMean]' role='measure' type='quantitative' />
      <column datatype='real' name='[TravelMin]' role='measure' type='quantitative' />
      <column caption='Travel Date' datatype='string' name='[Travel_Date]' role='dimension' type='nominal' />
      <column caption='Travel Month' datatype='integer' name='[Travel_Month]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photovisit rating)' datatype='integer' name='[Travel_Year (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
      <column caption='Travel Year' datatype='integer' name='[Travel_Year]' role='dimension' type='quantitative' />
      <column caption='Travel month (v photovisit rating)' datatype='integer' name='[Travel_month (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel month' datatype='integer' name='[Travel_month]' role='dimension' type='quantitative' />
      <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Traveller Country' datatype='string' name='[Traveller_Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
          <semantic-value key='&quot;Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Austria&quot;' value='&quot;Austria&quot;' />
          <semantic-value key='&quot;Bahrain&quot;' value='&quot;Bahrain&quot;' />
          <semantic-value key='&quot;Bangladesh&quot;' value='&quot;Bangladesh&quot;' />
          <semantic-value key='&quot;Belarus&quot;' value='&quot;Belarus&quot;' />
          <semantic-value key='&quot;Belgium&quot;' value='&quot;Belgium&quot;' />
          <semantic-value key='&quot;Brazil&quot;' value='&quot;Brazil&quot;' />
          <semantic-value key='&quot;Bulgaria&quot;' value='&quot;Bulgaria&quot;' />
          <semantic-value key='&quot;Cambodia&quot;' value='&quot;Cambodia&quot;' />
          <semantic-value key='&quot;Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Croatia&quot;' value='&quot;Croatia&quot;' />
          <semantic-value key='&quot;Cyprus&quot;' value='&quot;Cyprus&quot;' />
          <semantic-value key='&quot;Czech Republic&quot;' value='&quot;Czechia&quot;' />
          <semantic-value key='&quot;Denmark&quot;' value='&quot;Denmark&quot;' />
          <semantic-value key='&quot;Egypt&quot;' value='&quot;Egypt&quot;' />
          <semantic-value key='&quot;Ethiopia&quot;' value='&quot;Ethiopia&quot;' />
          <semantic-value key='&quot;Finland&quot;' value='&quot;Finland&quot;' />
          <semantic-value key='&quot;France&quot;' value='&quot;France&quot;' />
          <semantic-value key='&quot;Germany&quot;' value='&quot;Germany&quot;' />
          <semantic-value key='&quot;Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;Hong Kong&quot;' value='&quot;Hong Kong&quot;' />
          <semantic-value key='&quot;Hungary&quot;' value='&quot;Hungary&quot;' />
          <semantic-value key='&quot;India&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Ireland&quot;' value='&quot;Ireland&quot;' />
          <semantic-value key='&quot;Jordan&quot;' value='&quot;Jordan&quot;' />
          <semantic-value key='&quot;Kuwait&quot;' value='&quot;Kuwait&quot;' />
          <semantic-value key='&quot;Lebanon&quot;' value='&quot;Lebanon&quot;' />
          <semantic-value key='&quot;Malaysia&quot;' value='&quot;Malaysia&quot;' />
          <semantic-value key='&quot;Malta&quot;' value='&quot;Malta&quot;' />
          <semantic-value key='&quot;Qatar&quot;' value='&quot;Qatar&quot;' />
          <semantic-value key='&quot;Romania&quot;' value='&quot;Romania&quot;' />
          <semantic-value key='&quot;United States&quot;' value='&quot;USA&quot;' />
        </semantic-values>
      </column>
      <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID' datatype='integer' name='[Traveller_ID]' role='dimension' type='ordinal' />
      <column caption='v_countrydate' datatype='table' name='[__tableau_internal_object_id__].[v_countrydate_98771871190540D39E6CEF22D122B18C]' role='measure' type='quantitative' />
      <column caption='v_frqcountry' datatype='table' name='[__tableau_internal_object_id__].[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]' role='measure' type='quantitative' />
      <column caption='v_photographyvsnonall' datatype='table' name='[__tableau_internal_object_id__].[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]' role='measure' type='quantitative' />
      <column caption='v_photovisit_rating' datatype='table' name='[__tableau_internal_object_id__].[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]' role='measure' type='quantitative' />
      <column caption='v_twocatsdiff' datatype='table' name='[__tableau_internal_object_id__].[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]' role='measure' type='quantitative' />
      <column caption='v_twocatstats' datatype='table' name='[__tableau_internal_object_id__].[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]' role='measure' type='quantitative' />
      <column caption='_Allcount' datatype='integer' name='[_allcount]' role='measure' type='quantitative' />
      <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
          <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
          <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
          <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
          <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
          <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
        </aliases>
      </column>
      <column caption='Input ID' datatype='integer' name='[inputID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
      <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='Month (V Photovisit Rating)' datatype='string' name='[month (v_photovisit_rating)]' role='dimension' type='nominal' />
      <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
      <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
      <column datatype='string' name='[sentiment_comments (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
      <column caption='Tot2018' datatype='integer' name='[tot2018]' role='measure' type='quantitative' />
      <column caption='Tot2023' datatype='integer' name='[tot2023]' role='measure' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Avg' name='[avg:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Avg' name='[avg:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='Avg' name='[avg:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryCount]' derivation='Count' name='[cnt:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Photography]' derivation='Count' name='[cnt:Photography:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Count' name='[cnt:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Count' name='[cnt:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
      <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
      <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='Count' name='[cnt:location_Type (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryCount]' derivation='CountD' name='[ctd:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Sum' name='[cum:sum:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[CountryCount]' derivation='None' name='[none:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
      <column-instance column='[TravelMax]' derivation='None' name='[none:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='None' name='[none:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='None' name='[none:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country]' derivation='None' name='[none:Traveller_Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
      <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Avg' name='[pcdf:avg:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:4]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:6]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:8]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Photography]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:9]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Photography]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;No photography&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Photography]' derivation='Count' name='[pcto:cnt:Photography:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Sum' name='[sum:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Sum' name='[sum:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='Sum' name='[sum:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rating]' derivation='Sum' name='[sum:rating:ok]' pivot='key' type='ordinal' />
      <column-instance column='[TravelMean]' derivation='Sum' name='[win:sum:TravelMean:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Avg' from='-2' ordering-type='Rows' to='0' type='WindowTotal' window-options='IncludeCurrent' />
      </column-instance>
      <layout common-percentage='0.907133' dim-ordering='alphabetic' measure-ordering='alphabetic' parameter-percentage='0.0928668' show-structure='true' user-set-layout-v2='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:location_Type (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[ctd:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:sum:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:avg:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:2]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:4]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:6]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:8]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:9]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[win:sum:TravelMean:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pays-Bas&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niederlande&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Reunion Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Beruwala&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Polonnaruwa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Katukitula&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nuwara Eliya&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nilaveli&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sigiriya&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Colombo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Galle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tissamaharama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ampara&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Deniyaya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kalutara&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ahangama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Koslanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ella&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Weligatta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arugam Bay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peradeniya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kalametiya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trincomalee&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Haputale&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Unawatuna&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kalkudah&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Habarana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saliyapura&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Anuradhapura&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bentota&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pinnawala&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kandy&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mirissa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hikkaduwa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jaffna&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Embilipitiya&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Pussellawa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ambalangoda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Negombo&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[sum:rating:ok]' type='palette'>
            <map to='#499894'>
              <bucket>12</bucket>
            </map>
            <map to='#499894'>
              <bucket>51</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>2</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>30</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>207</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>6249</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>8</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>41</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>1977</bucket>
            </map>
            <map to='#79706e'>
              <bucket>16</bucket>
            </map>
            <map to='#79706e'>
              <bucket>72</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>13</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>52</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>9</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>44</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>24</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>164</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>3</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>34</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>477</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>21</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>114</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>10</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>45</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>18</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>77</bucket>
            </map>
            <map to='#d37295'>
              <bucket>19</bucket>
            </map>
            <map to='#d37295'>
              <bucket>79</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>22</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>126</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>27</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>194</bucket>
            </map>
            <map to='#e15759'>
              <bucket>14</bucket>
            </map>
            <map to='#e15759'>
              <bucket>60</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>11</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>48</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>4</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>35</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>683</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>20</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>93</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>15</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>61</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>38</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>691</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>4</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:activity:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Beach_Water_Sports&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Relaxing&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Historical_Sites&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;wildlife_nature&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Romantic_holiday&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hiking_climbing&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Religious&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Biking_cycling&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Sightseeing&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:sentiment_comments:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Neutral&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Positive&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Negative&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Photography:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;No photography&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Photography&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;photography&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location_Type (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Religious Sites&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Beaches&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Historic Sites&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waterfalls&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Museums&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bodies of Water&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;National Parks&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zoological Gardens&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nature &amp; Wildlife Areas&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Farms&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gardens&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_frqcountry):nk]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;France&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='Photography (v_twocatsdiff)' />
        <field-sort-custom-order field='Travel_Year (v_twocatsdiff)' />
        <field-sort-custom-order field='tot2018' />
        <field-sort-custom-order field='tot2023' />
        <field-sort-custom-order field='_allcount' />
        <field-sort-custom-order field='Percent2018' />
        <field-sort-custom-order field='Percent2023' />
        <field-sort-custom-order field='PerDff' />
      </field-sort-info>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
          <calculation class='tableau' formula='20.199999999999999' />
        </column>
      </datasource-dependencies>
      <object-graph>
        <objects>
          <object caption='v_countrydate' id='v_countrydate_98771871190540D39E6CEF22D122B18C'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
            </properties>
          </object>
          <object caption='v_frqcountry' id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
            </properties>
          </object>
          <object caption='v_photographyvsnonall' id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
            </properties>
          </object>
          <object caption='v_photovisit_rating' id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
            </properties>
          </object>
          <object caption='v_twocatsdiff' id='v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatsdiff' table='[v_twocatsdiff]' type='table' />
            </properties>
          </object>
          <object caption='v_twocatstats' id='v_twocatstats_75CA33B722EC46A3B140AAD50ED57027'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatstats' table='[v_twocatstats]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_frqcountry)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID (v_photovisit_rating)]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_twocatsdiff)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_twocatstats)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_twocatstats_75CA33B722EC46A3B140AAD50ED57027' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_2075C5A994FF4C969707987DA2B9EC36]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Frq city' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Frq city' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action2_B85DF04D49BF485CA7C60155D3FFA2F9]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 3' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Dashboard 3' />
      </command>
    </action>
    <action caption='Highlight 3 (generated)' name='[Action3_0BBC4CBEFC7F4DCD93F57ACCFEB6DF54]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Photo Activity' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Activity' />
        <param name='target' value='Photo Activity' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='5* Cities'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' scope='rows' value='Number of Rating' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{8AE6B6A8-396E-4D3F-B028-7BC3FEFD306B}' />
    </worksheet>
    <worksheet name='Frq city'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([CountryCount])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_frqcountry):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='font-size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='8' />
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='left' />
                <format attr='vertical-align' value='bottom' />
                <format attr='wrap' value='auto' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-range-min' value='false' />
                <format attr='mark-labels-range-max' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</cols>
      </table>
      <simple-id uuid='{93E7BE5A-2D49-47E4-89D8-19A9C636E294}' />
    </worksheet>
    <worksheet name='Frq city (3)'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([CountryCount])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_frqcountry):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' shelf='rows'>
              <sort-filter-info>
                <sort-filter level-name='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):ok]' member-value='2023' />
              </sort-filter-info>
            </shelf-sort-v2>
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='font-size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='8' />
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):ok]</cols>
      </table>
      <simple-id uuid='{E86721F7-2EE1-466B-966C-FC16EA0E8D75}' />
    </worksheet>
    <worksheet name='Line Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays vs Non-Photography Holidays by Year </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
              <calculation class='tableau' formula='20.199999999999999' />
            </column>
            <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
              <calculation class='tableau' formula='2020.' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='real' name='[Percent2018]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_photographyvsnonall)]' derivation='None' name='[none:Travel_Year (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Holidaymakers ' />
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' scope='cols' value='Year' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' field-type='quantitative' max='2024' min='2010' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[Parameters].[Covid 19 Year (copy)]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dotted' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' value='Holiday Makers Type'>
              <formatted-text>
                <run bold='true' fontalignment='1'>Holiday Makers Type</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label='Covid 19' label-type='custom' probability='95' scope='per-table' tooltip='Covid 19' tooltip-type='custom' value-column='[Parameters].[Parameter 1]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</cols>
      </table>
      <simple-id uuid='{A58EDB08-AD47-409E-AD1E-DC0A82A0F9E9}' />
    </worksheet>
    <worksheet name='Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#000000'>Top Ten International Tourist  Arrivals by Countries - Year 2010 to 2023</run>
            <run fontalignment='1'>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([activity])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' using='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]' />
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]' field-type='quantitative' max='30844281.911059216' min='-1909607.794413897' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]' field-type='quantitative' max='13253385.098458683' min='-10239273.619251298' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' field-type='quantitative' max='419' max-size='1' min='0' min-size='0' type='quantsize' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{DB828CB9-B2E3-4F74-A932-614B90B54ACE}' />
    </worksheet>
    <worksheet name='Map Cross Tab'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#000000'>Top Ten International Tourist  Arrivals by Countries -2010 to 2023</run>
            <run fontalignment='1'>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([activity])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' using='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]' />
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='113' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' field-type='quantitative' max='419' max-size='1' min='0' min-size='0' type='quantsize' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{1FC0B189-DC7D-4F5F-AB97-00FE6023ED82}' />
    </worksheet>
    <worksheet name='Non vs Poto'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Overall Photography Holidays vs Non-Photography Holidays - Year 2010  to 2023</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Holiday Makers' />
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' value='93' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' value='148' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='17' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</cols>
      </table>
      <simple-id uuid='{6A50E07A-6C64-4E2D-A8D6-C7B847FDFC3F}' />
    </worksheet>
    <worksheet name='Ph_ by Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Seasonality of Traffic by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column caption='Month (V Photovisit Rating)' datatype='string' name='[month (v_photovisit_rating)]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[month (v_photovisit_rating)]' derivation='None' name='[none:month (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' scope='rows' value='Number of Photography Holiday Makers' />
            <format attr='auto-subtitle' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#f1ce63' />
                <format attr='mark-transparency' value='239' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</cols>
        <annotations>
          <annotation class='point' id='0' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.633333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='197.52454417952313'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='140' y='-56' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{CA2E3D86-7E9B-4B80-80DC-286F1F4CC814}' />
    </worksheet>
    <worksheet name='Photo Activity'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Distribution of Photography Holiday Activities  (Percentage) </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' scope='rows' value='Number of Holiday Makers ' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='65' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='-90' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <_.fcp.IndividualControlFormatting.true...style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' id='legend-color' value='center' />
          </_.fcp.IndividualControlFormatting.true...style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='Photography Holiday Makers&apos; Activity'>
              <formatted-text>
                <run fontcolor='#000000' fontname='Segoe UI' fontsize='15'>Photography Holiday Makers&apos; Activity</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</cols>
      </table>
      <simple-id uuid='{8ACD1209-7334-4E56-857C-B5BB9F8D0C52}' />
    </worksheet>
    <worksheet name='Rating pie'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Distribution of 5 star Rating Given for Photography Holidays (percentage)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rating]' derivation='Count' name='[pcto:cnt:rating:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:rating:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7AB4EE68-1BAC-4E59-B2E4-2B1F6D160702}' />
    </worksheet>
    <worksheet name='SIA'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidaymakers&apos; Sentiment Comments (Percentage)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{2E56FC8B-EDFB-414D-AB93-5A9226D14142}' />
    </worksheet>
    <worksheet name='SIA Positve Cities'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays Sentiment Positive Comments Received by Cities</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]'>
            <groupfilter function='level-members' level='[none:City:nk]' />
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Negative&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Neutral&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='field-labels-decoration'>
            <format attr='vertical-align' value='center' />
            <format attr='wrap' value='off' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='565' />
                <format attr='maxheight' value='565' />
                <format attr='minwidth' value='720' />
                <format attr='maxwidth' value='720' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{AA5E5BF6-9CC4-48A1-A971-6D7CB28B6C6D}' />
    </worksheet>
    <worksheet name='SIA Type of visit_'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays Sentiment Comments by Location Types</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Beach_Water_Sports&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Biking_cycling&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Hiking_climbing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Historical_Sites&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Relaxing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Religious&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Romantic_holiday&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Sightseeing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;wildlife_nature&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Negative&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Neutral&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' scope='rows' value='Number of Sentiment Comments' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{E93BA932-D0FA-49D4-9649-22E03DD52C36}' />
    </worksheet>
    <worksheet name='SIA countries'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Top Ten Photography Holiday Makers From by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([Traveller_ID (v_photovisit_rating)])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_photovisit_rating):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' scope='rows' value='Number of Photography Holiday Makers' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-color' value='#f1ce63' />
                <format attr='mark-transparency' value='239' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</cols>
      </table>
      <simple-id uuid='{4DE53B2F-6305-4D8B-BC96-67ABFB2EFBDE}' />
    </worksheet>
    <worksheet name='SIA countries (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Sentiment Positive Comments Received by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk:4]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Field' type='PctTotal'>
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]' />
              </table-calc>
            </column-instance>
            <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk:4]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='35' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([rating (v_photographyvsnonall)])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='%null%' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;England&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' scope='rows' value='Number of Sentiment Comments' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]' value='100' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</rows>
        <cols>([federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk] / ([federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk] / [federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]))</cols>
      </table>
      <simple-id uuid='{06C83C76-08ED-4260-AF18-C77EA28F7C3C}' />
    </worksheet>
    <worksheet name='SIA type'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' user:ui-domain='cascading' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{38D1FCF9-5FD7-4A6E-83D8-A3BD7B8DFDAA}' />
    </worksheet>
    <worksheet name='Seasonality of Traffic by Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Seasonality of Traffic by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[month (v_photographyvsnonall)]' derivation='None' name='[none:month (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Photography Holiday Markers' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-color' scope='cols' value='#f9a655' />
            <format attr='line-pattern-only' scope='cols' value='solid' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='left' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</cols>
        <annotations>
          <annotation class='point' id='3' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.683333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1388.6975476839239'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='135' y='13' />
          </annotation>
          <annotation class='point' id='4' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.433333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;January&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1420.8433242506812'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='208' y='-33' />
          </annotation>
          <annotation class='point' id='5' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.7'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;March&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1037.2370572207085'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='77' y='-97' />
          </annotation>
          <annotation class='point' id='6' mark-position='1' pullback='0' text-width='171'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.3'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;December&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1167.9632152588554'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-46' y='-139' />
          </annotation>
          <annotation class='point' id='7' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.493827'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;January&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='164.02179836512261'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='287' y='-100' />
          </annotation>
          <annotation class='point' id='8' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.333333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='164.02179836512261'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='219' y='-47' />
          </annotation>
          <annotation class='point' id='9' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.469136'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;December&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='142.55585831062669'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-152' y='-167' />
          </annotation>
          <annotation class='point' id='10' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.580247'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;March&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='134.57493188010901'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='115' y='-107' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{926ADA61-A842-4E77-9E74-95CFABBF94A5}' />
    </worksheet>
    <worksheet name='Sheet 15'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='180' />
                <format attr='maxwidth' value='180' />
                <format attr='minheight' value='622' />
                <format attr='maxheight' value='622' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</cols>
      </table>
      <simple-id uuid='{AEF26B1E-1002-4FD2-BDF8-B3507923DA6F}' />
    </worksheet>
    <worksheet name='Sheet 16'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
            <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
            <column-instance column='[Photography (v_twocatstats)]' derivation='None' name='[none:Photography (v_twocatstats):nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_twocatstats)]' derivation='None' name='[none:Travel_Year (v_twocatstats):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='302' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</cols>
      </table>
      <simple-id uuid='{226A9F59-9FAB-49BA-82E6-2AE8BAD8A0C1}' />
    </worksheet>
    <worksheet name='Sheet 20'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{7740638F-84ED-4B3F-A1E7-F71BDE528CFB}' />
    </worksheet>
    <worksheet name='Stat'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
            <column datatype='real' name='[TravelMean]' role='measure' type='quantitative' />
            <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
            <column-instance column='[TravelMean]' derivation='Count' name='[cnt:TravelMean:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography (v_twocatstats)]' derivation='None' name='[none:Photography (v_twocatstats):nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_twocatstats)]' derivation='None' name='[none:Travel_Year (v_twocatstats):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMean:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</cols>
      </table>
      <simple-id uuid='{B4F9E845-590C-4317-AE30-26D0E4BFAC9D}' />
    </worksheet>
    <worksheet name='X-SIA Type of visit'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Beaches&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Bodies of Water&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Farms&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Gardens&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Historic Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Museums&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;National Parks&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Nature &amp; Wildlife Areas&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Religious Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Waterfalls&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Zoological Gardens&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' scope='rows' value='Number of Sentiment Comments' />
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' value='60' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='vertical-align' value='center' />
            <format attr='wrap' value='off' />
            <format attr='text-align' value='center' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='615' />
                <format attr='maxheight' value='615' />
                <format attr='minwidth' value='660' />
                <format attr='maxwidth' value='660' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{EF528593-29D6-41CC-B9C9-46FD7FABCCC7}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='86414' x='584' y='967'>
              <zone h='49031' id='48' name='Map' w='45800' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49035' id='56' name='Photo Activity' w='45800' x='584' y='49998'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='79' name='Rating pie' w='40614' x='46384' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='91' name='Line Chart' w='40614' x='46384' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='170' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='12418' x='86998' y='967'>
              <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='15235' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='22489'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='26118' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='49816'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='75934'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7980' id='92' name='Line Chart' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='12418' x='86998' y='81496'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1600' minheight='1600' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='126' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='84000' id='125' param='vert' type-v2='layout-flow' w='84000' x='8000' y='8000'>
                <zone fixed-size='280' h='49031' id='48' is-fixed='true' name='Map' w='45800' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='15235' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='22489'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='91' is-fixed='true' name='Line Chart' w='40614' x='46384' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7980' id='92' name='Line Chart' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='12418' x='86998' y='81496'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49035' id='56' is-fixed='true' name='Photo Activity' w='45800' x='584' y='49998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='26118' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='49816'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='79' is-fixed='true' name='Rating pie' w='40614' x='46384' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='75934'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{8CCA8090-640E-4B2E-82F7-02AE726BECC5}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='87948' x='584' y='967'>
              <zone h='59315' id='55' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='38751' id='56' name='SIA' w='34697' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='59315' id='59' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='38751' id='100' name='SIA Type of visit_' w='53251' x='35281' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='149' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='10884' x='88532' y='967'>
              <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='11366'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1300' minheight='1300' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='122' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='84000' id='121' param='vert' type-v2='layout-flow' w='84000' x='8000' y='8000'>
                <zone fixed-size='280' h='38751' id='56' is-fixed='true' name='SIA' w='34697' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='11366'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='38751' id='100' is-fixed='true' name='SIA Type of visit_' w='53251' x='35281' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='55' is-fixed='true' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='59' is-fixed='true' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{148B74DC-060A-48C0-8A9E-8CA4F401E31E}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 3'>
      <style />
      <size maxheight='800' maxwidth='1400' minheight='800' minwidth='1400' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='9' param='horz' type-v2='layout-flow' w='98858' x='571' y='1000'>
            <zone h='98000' id='7' type-v2='layout-basic' w='87429' x='571' y='1000'>
              <zone h='50659' id='5' name='Non vs Poto' w='43715' x='571' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='47341' id='32' name='SIA countries' w='87429' x='571' y='51659'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='50659' id='74' name='Ph_ by Month' w='43714' x='44286' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='8' is-fixed='true' param='vert' type-v2='layout-flow' w='11429' x='88000' y='1000'>
              <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='2750' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='11429' x='88000' y='7500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='82' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='81' param='vert' type-v2='layout-flow' w='98858' x='571' y='1000'>
                <zone fixed-size='280' h='50659' id='5' is-fixed='true' name='Non vs Poto' w='43715' x='571' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='50659' id='74' is-fixed='true' name='Ph_ by Month' w='43714' x='44286' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47341' id='32' is-fixed='true' name='SIA countries' w='87429' x='571' y='51659'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2750' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='11429' x='88000' y='7500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{1A80F195-FFE0-4D70-9B23-D0F132D84CF2}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Line Chart'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>2379</value>
                  <value>&quot;No photography&quot;</value>
                  <value>2018</value>
                  <value>0.2101961477292808</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Photo Activity'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Rating pie'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{46844394-C8DC-47C5-8AB6-F61F276BEB8A}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='SIA'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Positve Cities'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Type of visit_'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{79E10B69-7BD1-4F8B-8BCB-3874D47C0A61}' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Non vs Poto'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Ph_ by Month'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA countries'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='32' />
      <simple-id uuid='{91E32204-93F8-4CFF-AAD0-18D32233E187}' />
    </window>
    <window class='worksheet' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{352790A8-0E1E-4075-9D85-3F7C13DD202D}' />
    </window>
    <window class='worksheet' name='Map Cross Tab'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0E82B045-3354-4369-864E-2D81875A5B32}' />
    </window>
    <window class='worksheet' name='Line Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='243'>
            <card mode='compact' param='[Parameters].[Covid 19 Year (copy)]' type='parameter' />
            <card pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E9C45F67-31E5-48DA-9189-8EFE85F6B4FF}' />
    </window>
    <window class='worksheet' name='Photo Activity'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='256'>
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{614D0002-C6CC-45DD-B3C3-55C172326677}' />
    </window>
    <window class='worksheet' name='Rating pie'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:InputID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F11A9256-BDCD-4620-9D17-A973F9712E45}' />
    </window>
    <window class='worksheet' name='SIA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='222'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CDDD4D80-DDFD-40AB-ABC9-B13F899C78B8}' />
    </window>
    <window class='worksheet' name='SIA Type of visit_'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F7D445F7-A2F7-4F8B-B70F-673383488A10}' />
    </window>
    <window class='worksheet' name='SIA Positve Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <simple-id uuid='{B208DBA9-1D01-42F0-91B9-4290B0E2FB9D}' />
    </window>
    <window class='worksheet' name='Non vs Poto'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='208'>
            <card AVG='true' KURTOSIS='false' MAX='true' MEDIAN='true' MIN='true' QUART1='false' QUART3='false' SKEWNESS='false' STDEV='false' SUM='true' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5B892FE8-53E8-4FB3-909E-CFD8384703C4}' />
    </window>
    <window class='worksheet' name='SIA countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6C880C5F-A5AF-4AAF-85F2-6516170E3278}' />
    </window>
    <window class='worksheet' name='Ph_ by Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{68F71B14-8D42-45C1-9DE1-1661A8511167}' />
    </window>
    <window class='worksheet' name='SIA countries (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{944969AD-46F7-441E-91D3-073854003760}' />
    </window>
    <window class='worksheet' name='Seasonality of Traffic by Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='231'>
            <card param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='filter' />
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_month:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photography_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5ED166A1-4843-4683-888B-4722DFCC388E}' />
    </window>
    <window class='worksheet' maximized='true' name='Frq city'>
      <cards>
        <edge name='left'>
          <strip size='194'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='150'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C85E0752-E638-4646-8B76-A812B7EC5E38}' />
    </window>
    <window class='worksheet' name='Frq city (3)'>
      <cards>
        <edge name='left'>
          <strip size='194'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{F0BA4005-2418-41F2-8F93-A1EB2E5A40D4}' />
    </window>
    <window class='worksheet' name='SIA type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C46270CD-548A-4EC4-8D4F-A646CCA311AA}' />
    </window>
    <window class='worksheet' name='X-SIA Type of visit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{396FB502-1C76-4CC7-B7CB-7EF9A5E14013}' />
    </window>
    <window class='worksheet' name='5* Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{90413D93-B792-4F33-BBC1-794A4C561A46}' />
    </window>
    <window class='worksheet' name='Stat'>
      <cards>
        <edge name='left'>
          <strip size='108'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Calculation_3191363324667273216:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[usr:Calculation_3191363324668567554:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{95C1AC77-0FF8-46EF-A265-09594A86B84D}' />
    </window>
    <window class='worksheet' name='Sheet 15'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1BB2767F-55E3-4617-AF12-45C1E0C45ED8}' />
    </window>
    <window class='worksheet' name='Sheet 16'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_frqcountry):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3B9E3B7E-AC37-4F11-99FC-F4783A09C476}' />
    </window>
    <window class='worksheet' name='Sheet 20'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E6376252-0223-4DEF-9317-BA83DB2D4779}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='5* Cities' width='192'>
      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
      1wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      wndhQPeIKwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
      l5/+9Ke4zFBfWcpvnnwSW0Xtor+dXa/w/AsHyQCfnTzGyIQHWVH46t4GegJq7EYDpSU2xsfG
      APjqN/+CO/a03cBjuI4oNxHdp48r//ff/kV5/rXDeT9/+tln8x4/9s4ryhvvn1oVG04efV15
      7fCJValrNXn39ZeUf/rHf1BOdo/l/bzQvfntv/53pWciuCo2HPj3f1LOXfKuSl03CypFEa4Q
      gq2LmAYVbGkWDYJ//+qrtOxo581Dr9O6fTuqa5z88dFDvPHWYSKyicjERV46eAijq5aYZ4Df
      vvI2d92+l/Mn31s4XllqB+anSbFVY9Iurs831s/TL7zMuf5RdtQ4ePyJpxjzx3AbsgvHywxZ
      Xnz195wfmGDvrvZVvh2CmxVZllGprvVEXj+L3gD726t59qnfoi9tov/MMX71q19xqnuEj975
      Pf/8z/+HMV+Ul575NQff+mC+/D0P8e1HvsHYpUFOdg3x93//c06+/zYV9dux63MAi45f4dDL
      z/D4488wMd7Pv/zLv/LSoXcBcFQ28Hd/81eEZ2f48O23+bMf/5zE5BCGLxyv276T23fvIp2I
      rfrNENy8FKunvkgAte13Egz4eejunRw71cndd9/J1HAfssbA7iY3Fwcn8IbS/Pm3HgCgr/ME
      750e5q9+8BeXDZw30mazfcnwxcbv3NnB9x77EaePHuPRn/2coGcEACke4P898RyP/fgnoCgo
      l8/78nGVWk0mFifP+ppAcF0s6gIBzM3N0dbWhpEMJ05foK55B9ND55mNpNnWvBOHUUVzczMA
      bx96jWQySSAu0V5t5cWDb3HPNx6h/7P36OodYi6lYledc+H4lS6QQavmlVfe4o++dS8vP3+A
      stpWdm5vouvTDxieCTN8aYxvPvwgLz39DM667ahC4wvHtVKEU2e7MZW42b+r/ZrdNMHmQFEU
      1OrVH7KKWSDBhkCSJDQazbLLT01NEYlEcDqdjIyMcNttt/HRRx+hVquJRCJUVlai1+vRXrsq
      gaA4RENBommJqgr3st7kp0+fpqWlhaGhIdxuN/X19bz66qu0trYSDAaRJImSkhI6Ojqoqakh
      FApx5MgR9Ho9d999N263m1wux65du+jq6sLv9wsBCNYH3/Q43lACq15F91yEW3Y0X/Ocuro6
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Frq city' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2915cc2X3n+YnISO+zfJZHoQq2YLuBbrYjm02nJUdcURJH4u6ZkbRarfbs
      2X3Q/gF79mEf5mnWHGmp1XBIzUjk0M1oOGSLFNneAmg0GqaAqgLK+6qs9JmR4e4+JIBGoWwW
      MssA8TmnD7oiI375i4z7vXHN73evJIQQ2Ng8oci77YCNzW7yyAIQQmBZVjV8uY9hGHvaXi1s
      VtueZVlP3HMxTbPie7bfADZPNLYAbJ5obAHYPNHYArB5orEFYPNEYwvA5onGFoDNE40tAJtd
      QVMLXHr1RxRzmV31wxaAza5QKhYYuvAWV9/4BaLKE3aVYAvAZldIL8xy5NmXcSgKl375k10T
      gS0Am11hYuBjOo6d5uyXvoGiOPngZ9/HNKsfsrIZtgBsdhzTMEjOTRFpakWSJE698tt4/EHe
      ++nf7rgIbAHY7DiJmQmiLe04FCdAWQSf/xqRpjjv/8d/h2noO+aLLQCbHWfy5hU6j51ZcUyS
      JI6/8CXq27p4+0ffwdC0HfGlIgHkU0tcH7jJ5MQEV6/dxLBTaWwqRAiLuZFBGjt6Vn0mSRKH
      n/kcLQcO8/rf/xW6Vqq5P0pFJzudCK3ITMLkUEuIvC4IOKyqx55bllXVWPFq26uFzWrbu5fo
      t9eeS2ZpDm8oguRQ1rXXc/Y5JIeD1/79X/LSH/wZitO1JdvbueeKBOBQnLi8Qbqa65leTHOo
      WQIhI0kSsly91pRhGChKRa7tqL1a2Ky2vXuFYK89l9nbN+k8egpFUTa01/fU87i9Pt76/rf5
      3Lf+HKfbs6lt0zQrLosV/TqK28ehQ70Ew1EOH+xCquRiGxtgavAarYf6t3Rux9HTHPnM5/nV
      v/3XqPlcTfyxO8E2O0Y+nUQIgdvr39L5kiTRdqifUy9/lV9/7/9EzWer7pMtAJsdY27kFu1H
      TiBJW287SJJEvPcYT//W7/Pa3/0lhWy6qj7ZArDZMSYGrtBx5FTF10mSRGPnQZ7+yu/z2r/7
      f8glE1XzyRaAzY6gl1TymST+SGxb10uSREN7N+e/9oe8/nd/SSaxUBW/bAHY7AhzI4O0HDiM
      LDseyU5DezfPfeNf8PYP/w2ZpflH9ssWgM2OMHnrE7qOn62KrVhLB8//7h/x9o++w/Ls5CPZ
      sgVgU3Ms0yQxPU6kubVqNsMNzbzwe3/Muz/9HouTI9u2YwvApuYsTo4Qi3ficFR3MjJU38Rn
      /+DP+PC//GDbIrAFYFNzpoeu03nsdE1sB2MNfO4P/5xLr/6Y+dGhiq+3BWBTU4QQzI7covnA
      4Zp9hz8c5bN/8Ge8+9Pv8slrP6voWlsANjUlvTiHNxDGUeVYrIfxBsMce/6LWKZZ0XW2AGxq
      yvTQdTqPn6lo9ne7tB8+WfH8gC0Am5oyNXiNtr6tBb89Kt5QhGI2XdFboCIBCCHQNA0hLHR9
      5xOYbfYX5TV/BC6vb0e+T5IknB4vpcLWI0crapjlk3MM3JnFH/Bh6Tp9x4/jksrCqPZOS3vd
      Xi1s1sLebvo4eesqbXdDn9e7rtr+heubSM5N4wmEtnR+RQKwBLicDjTdpCHkwzBBkau/E4ll
      WVVtM1bbXi1s1sJetanUx8mbV3j6v/rmur7U4p5j8Q4Wp0ZpOnBoS9dUJIBApIG6vEFzcyOJ
      VBa/U0LUICNMCIHD8WgxI7W0Vwub1bZ3r2Dt1nMxDZ1SIUcwWr9uIa/Fc6mLdzJ185Mt261I
      ALJDob2jHYDmRnfl3tk8MSxOjNDU1bcjoz8PEozVk0svY1nmlgLv7FEgm5qQTyfprFLwWyXI
      DgW3149WLGzt/Br7Y/MEIoRgeW6SunjHrnx/uKGZ9OLcls61BWBTdUxDJ704t+PNn3vUt3WT
      mB7f0rm2AGyqzuztm0QaWnbt+2PNbSRmJ7Z0ri0Am6ozdTf8YbcIxOrJJRNbmmOwBWBTVSzT
      ZGlyhPq27l3zQXG6UJxOSoX8pufaArCpKkvTY0Sa23at/X+PUF0TmcTmOcO2AGyqyvTQdbp2
      sflzj/r2bpamxjY9zxaATdUQlsXsnVu09BzZbVeItbRvKWHeFoBN1cguL+LyeLe8mnMtCUTr
      ySWXNu0I2wKwqRpTg9d2ZfZ3LZwuN7LDgaZuPCNsC8CmKgghmB6+cT/8eS8QqmvadPEsWwA2
      VaGUz2EaOt4txuHvBNHmtk07whUJwDINCoUChmlS2qE9nGz2B1ND12jtPbbbbqygvq1r05CI
      isKhDa3EyNAgkicAukbP0WO45d3PPNoNe7WwWU1792ztlI/Twzc4+bmvVvx9tXwugWgdmeXF
      Db+jIgE4PT5CsQZkLIQhYwqqvj8Y7P1sq1rYrLa9Wu0RtpaPekkll0wQrGus6Ptq9Rves6m4
      PEiShFrI4/J417ymssVahEVTczOKbLGUzONX7IywvWqvFnuErefjzMQdmjoPVux/LZ7Lw2Ux
      GGsgn0rgbe1c8/yKfh1JduB2OXEobpoatrfOu83jx9Tg1VX7/u4VGtq6SG4wIWaPAtk8Eqah
      k5yboq6ta7ddWZO61i6WNugI2wKweSSWZyYIN7RUtalVTYJ1DWQ3WC1ub3pts2+YuPkJHUdr
      s/JzNXB5fFiWte6u87YAbLaNZVksTozQ3N23266siyRJBKJ15JYX1/zcFoDNtskmFvAGQ1va
      xX03qYt3rNsPsAVgs23Gb1wmfvDobruxKRvNCNsCsNkWQgjmx4Zp3UPBb+sRql8/O8wWgM22
      KObSSJKELxjebVc2xeXxYZkmxhrxa7YAbLbF9OB1mrr2buf3Qcod4XqyydUdYVsANttiavAa
      7UdP7rYbWybW0s7yzOoZYVsANhWjqUU0tUC4vnm3XdkyseY2lqbHVh23BWBTMfNjQ9S1du76
      0ieVEGmKk5ybWnXcFoBNxYzf+HhPz/6uhcvrx9A1TENfcbyyPcIsk/GxMQr5HONTs1Q/lcFm
      r2MaOtnlReria4cX71VkWSYYayD70IxwRfkAmaVpFtNFDGuRgBNyusB3d4ukaideGEb1NuGr
      tr1a2Ky2vVolxCzPjBOqa0LAI/u70/ccaWolMTNJINZ4/1hFAnB5/DitZfIFi6xhcrRVQpaq
      nxBjGAZKFTdWrra9Wtistr1aJMQYhsHkwBXaj5yoiq/VvmfTNDcsi43tB5i5PUDPqfP3j1X0
      7d5QHSdP1604VoOUTpu9ihAsz05w8uWv7rYn2yLa3Mr1d3614pjdCbbZMpnEAh5/cN382r2O
      y+tDVwuIB5pItgBstszkrU/2RezPesiyA384Rja59OmxXfTHZh+hl1Qmblym5cDh3XblkYg2
      t62YD7AFYLMlbl9+j/TSHA5HdQcTdpr6tpXLptsCsNmU+bFhxq9/xO/8xf+B2x/YbXceiWhz
      K6n56ft/2wKw2ZD00hwXf/FDXvzmf4fL49tX4Q9r4fb6KRXz9+cM1hCAwS9+8hP+6Ve/Zjm/
      diKxzZNBMZvm7R99h+e+8S/xhaK77U5VkB0OfKEIuWSi/PfqUxwcONCB4vbice3v9p7N9tG1
      Em/+h/+Ps1/8HaJNrbvtTlWJNrWRnCuHRq8hAAkkgaI4d9gtm72CZZq886Pv0Pf0CzQfOLTb
      7lSd8v5h5RzhNfsAjS2tWKU8ulHdRW9t9j5CCC7+4ofUt3XRfeLcvm/zr0W0qZXEzAYCAIEl
      4PG7dZvNuHE3VOD4C196LAs/gMcfoFQod4TXFMDi3BwlTUO37ECfJ4mRTy6wODHCU1/5PaQ9
      utRhNZAdCh5/gHw6uVoAZqmAP9aA4nLhcVZ36WqbvcvcyCBDF9/i+d/9IxxVjpzdi8Ra2knO
      Ta0WQC4xx3SySNjjQNXM3fDNZodJL85y8dUf8eI3/3TPr/JWLepau1iaHF0tgHC8m+6GAO19
      x4kFVu73auoaw0NDZLMZxidn7Iywx4BCJsU7P/4uL/zen+yLNX6qRX1bF8n56bXyASQcCAau
      X0X0n6KlPnL/E7WQIq9aLCWW8TmEnRG2h33cSkaYqWu8+YO/5tQXvk4g1rDp9z8O93wPp8dH
      IZtaOyFG0zQa2zqxSkXgUwE4XV4UShRVSKu6nRG2h33cLCPMNHTe/el3OfzM52g9eGRXfNzp
      jLAVKAoeX2BtAZQKOeYW8nQ9e27FcZc3yPETKxdDsjPC9h+GpvHmD75N71Mv0HH01G67s2s0
      tB9YOxbo48s3KOYyqLo9Efa4YZkm7/z4O3T1P/1EF34ozwiv8QZQ6D95lPmMhsdlD4M+Tggh
      uPjqj4jFO+g5/cxuu7Pr1MU71pkJlsozwTaPD0IIBt79NZZh0P/SV3bbnT2By+tfWwCx+kb0
      QoaSbs8DPC6MXf+I+bEhzn31nz+2IQ6VIsvy+rFAyApOx+M7Hf4kMTc6xOCHb/D87/7xEzHL
      WwlrlvDZyUlKapGi/QbY96QXZ7n06o958ff/ZN8uZ1JLVglAL2SIxjtweT347YSYfU0hneTd
      n37vscroqjarSriaTTE4OovDMikZJj57JGhfsjQ1yqVXf8zpV75OtCm+2+7sWVYJINjUzjOB
      GEJW8Hpda11jsw+4+vrPCdU10tKzv9fxqTVrpkR6/QF8Xo+dELNPyS4vomslnvntb+22K3se
      e5jnMUMIwZXf/Iz+l34LeZ8vYrUT2AJ4zFiaHkPX1Cey6XNtIs+duWJF19hVxGOEEIKrr/+c
      U5//Z0/UZJcQgtH5IqmcvvnJD2G/AR4jZm4P4PYFiLW077YrO4YlBAOTOTJFg2cPhckVDawK
      4ngqFIBgdOgWS4lFbty6bccL7SEs0+TqG7/g1Oe/9sTU/qYl+Hgkg+KQONkVRHFI+D0OMsWt
      J9lU1ATKp5ZYSiTJO7y0RVxkdUHAYWeE7QV7Y1cvUhfvxBMIYxhGzfYI2yv3rBkWV0bztESd
      tNd7ME0TIQTNYSdTS0UC7q1VAhUJQHH7iMUiuDwK08k8R5okJOyMsN22Z2glhi69xcvf+h/v
      26jVHmF74Z4LJZNLd3IcbvPTGHbfP26aJg0RDyMLaWTZgSxvLoKKvt3t9dNz6G763N3lIu2M
      sN1n8MJbdBw5hccf3G1XaooQgnTB4MpoltPdQcL+1ct3yhL43A6yRWPNz1edXwtHbXaOUjHP
      2LVLHDr/2d12paYIIVhIa1wdy3K+N7xh4Y7H3Mwsb21lc1sA+5wbb/+Kw898DqfLvfnJ+xQh
      BOMLRUbmCjx7KILXvXF8WizgZCmrYW2heWILYB+TTy0zPzZM94mnd9uVmiGE4NZ0nuWczvm+
      CE5l8yLrVGQ8Tge54ubh/LYA9ilCCK689jP6X/oKsuPxjNi9N8yJgNMHQlvq1N4jHnMzvaxu
      ep4tgH1KamGGQiZFa++x3XalJmiGxYWhFLGgiyPtgYrnNhrCLhIZ7f5w8HrYAtinfPTLn3Lm
      C19/LFdxLpZMPhxKcaDZR1fj9rLYXIqMyymT3aQZ9Pj9ek8A82PDKE43sXjHbrtSddJ5nQ+H
      UvR3BmmKPFrHPh71MJfaeDTIFsA+QwiLy//0nzjzxa8/diEP86kSV8eynOuLENnCGP5mNEY2
      bwbZ0aD7jPEbHxNraScYa9htV6qGEIKJRZXpZZXzfRFczurUyy5FRnHIFEoWfs/aAwX2G2Af
      YZkmN97+FSde+spjU/tbQjA4nSeR1apa+O/RHHVt2AyyBbCPGLr0Nu1HTuAJhHbblaqgm4Kr
      Y1ksAacOhHBUMMy5VZrCbhZsAex/9JLK0IW3OPKZVx6L2r+ombx2LYnP7eBImx+5RvfkcsrI
      skShtPZokC2AfYAQghvvPF4hD9MJlZaoiwNNvpoLujnqZi659lvAFsA+QM1lmLl9k4NnPrPb
      rlSFbNFgPqVxvCOA4qj926wx5FpXABWNAulqjpu3hvEEghTzKkdPHLeHkWrMvZCHY89/8bEI
      ebAswbXxLMc7AtSgyb8mHpcMUrnZ5X1oobeKyq9DceF2O1E1k9b6AEVd4LczwmpqL5NYIL04
      z1O/9c2Kvm+vZoTdnisSCyj43dKO7hHWGHYykyjS2bByF8zK3gC6hqx46GqqZymZo9slgbAz
      wmplr7zKw88484Wv43RWNjG0FzPCMgWDRNbgmUMRHLK0o3uExWNeroxm6GkJrDheYUZYgN7e
      gwCEQuXN8+yEsNqxNDWKZZo0dvbstiuPzINNn1oMd26G1yUjBKiauWLnI7sTvEexLJMrv/kZ
      p1/5+m67UhXuzBVoCLm2lKZYCyRJojniZjGjrThuC2CPMjV4DX8k9lis7JwpGCykNQ62+Gr6
      PaawNswCa4m5mX1oNMgWwB7ENA2uv/VLTr38td125ZGxhODqeJb+zmBFCS2VUjIMvvPRRX4x
      dHPdc7wuGcMUaMannWRbAHuQkSsf0tzdhy8U2fzkPc7wTIHGsIuQrzYD5kIIbi7M893LF+it
      q2cqnaKor71EoiRJNIZdLKQ+bQbZAthj3At5OP7il3fblUcmUzBYTJc42Fybpk+qWOT7Vy9z
      Y36Wb508y2e7e3i2vYvX7gyvGwLdEvWsaAbZ81h7jFsfvkH3iaf3/X5eQgg+GctwqruyXN6t
      YAnBO2MjDCzM8eW+I3RFY0B5GPRES5wbC3NMZdK0h1e/QX1uGc2w0E0Lp2PdXSJtdoNiLsPk
      zU/oO/fibrvyyMylNFqiboLe6tWxQggmUkm+/eG7APzp08/eL/z3kIAv9x3ml0M3MczVAXCS
      JFEfct5vBtkC2ENce/NVjjz7Mopzf29NZZgWk4tFeqrY9MlrGv9p4Bpvjt7hD089xQtdB3Cs
      M8lX7w/QV9/I+5Nja37eEvXcXzjLFsAeIbu8yPLMBJ3Hz+y2K4+EEIKByTwtMXdVojwtIbg0
      PcnfXr7IofpG/ptTZwl7PJvafraji5sLCyzl86s+C3gdFDUTwxS2APYC6cVZfv3df03vU88j
      y9UJeLs5lefaeK4qtiphKauj6iZtdZ7NT96E2WyG712+wFI+xx8/dZ6jTc1bFpXT4eDLfYd5
      dWhgVYdYliTqQy4W0iW7E7xbCCGYHxtm8MKb6GqR7hPnaOk5UhXbmYLBUkbD43JwZSTD0Y4A
      ri2sqPao6IbFzckc53rDj1T7lwyD39wZYjGf48t9R2gJbi8Drj0cIeb188nsDKfirSs+a61z
      MzxTsAWw05iGzti1jxi69DaBaB3HX/gSsZZ2TNOsSmBYoWTeHX0JEvAozKU0PhhMcbQ9QH2o
      dn0LIQQ3p3IcaPatiLWp1MbAwjxvj93hXFsHX+47jCxtX7iSJPH5nl6+e/kCB+vrCTyQTBT0
      KuRVE0lstnTWFpwWQuypqMNa29uOzUI2zfClt5keukH84FF6n3oeXyhyv6asho+aYXHpdpq+
      uJ9YoGxLlmWKmskno1lCPoVDrf5tB6Nt5ONCusTEosrZntCWa/8H7S0XC7w6eBO/y8UrB/tW
      FNatkk2ncChOfH7/iuM3F+YZWJjjG8dPrjg+MJGzBVBLm0II0guz3Hj3n8gmFug5/SxdJ55e
      M63xUX00LcHlO2niMQ+tdZ5V4dDW3Y3k5pIlTnYFCWxjeHI9HzXD4oPBFOf6wnicW6/9DcPA
      kiTenxhleGmRVw4eojMSraj5JISgkMsxOzXBzMQY0foG+s+eW3XOD69d4Uy8jd76T5eTSeX1
      SjPC8gwO3cHp8VAsljh2ot9uQ62BaRjM3B5g8MM3cDhdHD7/WZq6emuW0SWE4MZElljQRTy2
      ds0pSxI9zT7qg06ujGZprXPT1eh95JEacXeTup5mX0WFXzdN3h4b4U4yweGGJv7l2XMoWxwA
      EEJQLBRYnJ0hsTiPy+WmMd5Ka2cXN698TDadJhgO3z9fkiS+3HeEH3xymY5IFPddEYd9SmVv
      AENTmV1YxjJ1fA6Bp6kTn1zOBqtmYrNlWVV9o1Tb3no2NbXA+PWPuPPxBzS0d9P71AuE6ptq
      7uPwbAHDgiOtn46733usaz0X0xLcmVPJFHX6OwK4t7gWz1o+LqQ1ZpY1TnUH1rlqNdlSiV/e
      vsVkOs03+08R32InVyuVWJqfY2F2GkVRaGxpJdbQiHI3Weje22B44Bonnjq/qsK5PDvNciHP
      Kz19949VJAA1l2J0ap7mpkZS2QJdHa3whDeBhBBklxcZvvg2c2NDdPU/Rc+pZyrermi7Pk4s
      FlnMaJx+KORgs4wwIQSLaY2b03kOxf00RVybVmIP+3i/6dMb3lLH17QsPpqe5MrsNC909XAw
      Vodzg3sWQqDrGomFBRZmpxGWRV1jEw3NcdxrzAXcywibHL2DaZoc6Fu5WbglLL53+SJf7D1M
      a6j8hrD7ANtACIGulUjNTTF44S0KmSSHn3mZtkPHcSjbS/jYjo+LaY2hmTzn+yKrVlfYakqk
      ZlhcG8+iyBJH2wMbbkDxoI/lWJ8sjWEX8djGY/5CCGazGV4duklXJMZzXd14FOe692waBsnE
      Eguz0xRyOeoam2iMt+IPbFyp3BMAwCcX3qfnyDFCD8UDzeey/OzmDf7o7DkcsmwLoFJMXWfg
      /d8w8N5vaDlwiKOfeYW6eMcjL1NeqY+Zgs6V0Szn+yJrNmEqyQkWQjCVUBlbKHK8I0jEr6z5
      NnjQx7lkielllTMHNh71Keo6r48M3x/Tb3qgED9ozzJNUssJ5memyWUzxOobaGyJEwhtfU7h
      wZzgXDbD0LVPOHn+Mzgeagr9+vYQPqeTz3R22wLYKmo+x9DFt5gaukZDWzfhxjh9Tz1fJQ8r
      87GomVwYSnP2YIiAZ+1rCpoGCHwVDCcWSyZXRjNEA0764v5VUZz3fNR0iw+GNm76WEIwsDDH
      22MjPNPeycmW1hWrvwkhKORzmIbJ/MwUmVQSfzBIU7yNcDS2rfL0cFL8xMhtDF3nwKGVE4y6
      afJvLn3AN0+ctgWwEUIIMkvzDLz3G9ILM3SfPM+BU+dxuty75qNultvdxzqCxAKrm1tCCJLF
      Ij+4ehnVMHj5QC+HGxvxbLFpZlmCkfkCi2mN/q7gCoEZhoHD4eDKaLnp07pOuENR1/jNnWFM
      IXilpw+/a/UEXDKxxEfvvkVjSyutXd1EYnWraupKeVgAlmWVm0KHjxKKRFecO5Zc5r2JUVsA
      a2FZJvOjQ9x499dIkkzf0y/Q2nd8xT3uho+WJbgwnKaz0UtLdHXNnlFV3hi9zWw2w7PtnYQ9
      Xm4vL3EnsUTM5+dEcwvd0TqcWyho6bzOJ2NZOhq8dDaUO5yGYbCUNZlZVjm9RtPnwVr/uc5u
      TjSvzmcWQrAwO8PU6Aht3QdoaG6pWtlZa1mUfDbLrasfc+qZ51YITAjBP9y8bgvgQfSSyti1
      Swxdepv6ti4OPf0SkXWS0nfaRyEEV0azhH0K3U0rx+9VXee9iVHuJBJ8prObI41N93cwl2W5
      HHeUy/LxzDR3lpdoDYU5E2+jPRLdcFFa0yqP8Zd0i/7OIKZp8NGdHOce6ncIIVgq5Pnl0C2C
      bjdf6D2Eb42QbsuyGLk1gKoWOdx/CiRpR9YFmhi5ja5p9Bw+uuJ4UddsAQghKGbTDF58i4mB
      jzlw4hwHzz6Hd5MlyHfax6GZArppcbzj005kyTD4YHKcG/OzPNvRxYnm+P0Y+fU6wZawGE8m
      +WRuhrlshq5ojJMtrTQHgut2NudTJW5N5ZEkQW+Ln5YHRn100+SdsRFuLy/x5d7DtD/U1LiH
      ppW4cfkS0foGOnt6779RdkIAGzWFnlgBCCFYmhrj1gevkUkscPyFL9F++OSWZ2t3SgBCCCaX
      VBbS2v04G0sILkyOc2l6klMtrZxv71zVrNnKKJAlBMNLi1yemSJRyNPf3MKJ5jgRz+oZ4nRB
      v7tLe3kTCyEEd5YT/Gr4FmfibTzV1oGyznelk8sMXr/KwcNHiTU0bnrP22WjleEK+Rw3r1xe
      1RR64gRgWSaTNz9h8MJbON1ujr/wJerbuiueyd4pASykSwzPFHjmUARJghvzs7w7PsqxpmbO
      t3fhWkewlS6NqJkmtxbmuTo/g6rrHGlspr+phZDn09r+no/Zkso/Dt3CEoKv9B1Zcc7DzEyM
      MTMxzvGzT+PxrswQ20kBAEyNjVBS1RVNoSdDALqOZRoMfvgm4zc+oqmrl2MvfAlvYOuRizX3
      cQ17qbx+d9O4MCPJRd4YuU13tI7PHjiIR1l7rP4e210bVAhBQde5Pj/LtblZnA6Z/uY4Rxua
      EMLi6vwcl6Yn+WLvIQ7G6tf1wTRNhgeuISxB37F+HGv8VjstgPtNoUNHCUXLTaHHXgDCsnj1
      r/8VpWKew8++zMHTz+J0P3q2Uq0FUCiZXBxO01Bv8v7UHRr9AV7qPrhhbQvl55HPZhi+eQOE
      4MjJM3i821thQghBtlTi2vwsn8xOM51J81J3Dy/39G4YuGaaJkPXrxKMRGjt6FpXJDstAIBi
      Ic+Ny5c4/cxzOJQKg+HWYi8LwLIsLv/yp+RSCc584etbDkzbCrUUgGZYvDmwxGBmhJaIl5d7
      eol6N04wLxYKzE1NsDQ/h8fno66hCdM0WJiZxuvzE+/sIhKr27Z/qmFwfW6G0/G2dZPRAdRC
      gRtXPqKlvYN4e+f6BoXATKZwRCJUa6MAK5dHcjiQvBtXElNjo6jFAgePHHt8BWBZFhd/8UMk
      JE5/8b/GucZkzKNQKwEs5HLcHFdJW0me7myiObj+6IxaLLI4N8vS/CwORaGxOU5dUxOK4lwR
      DZpNpxi/M4xpGMTbO6nf5tj7ZiNVyaVF7twa4FD/yVWjLSswTRgagQ8vQ30dVKvspDNQF4VX
      XtjQphCCqxc/pPNg7+MpANM0uPSLH+H2+Tn5ua9iWtauZ4RthCUEV2ammEinWF528LnernVj
      9XVdIzE/z9z0FJZl0tgSp7GlFadrZTTnw30AIQQlVWVy5DbpVJL6pmZaO7sr2ndgw5GqkTss
      Ly1w5NQZ3Os1MU0Txibh1m1obcFsj+OIhKBKofRWvoA0OIKkqvDMGdjg+aiFAiJq0mcAABMK
      SURBVNcvX6xMAEJYFApFvB4XqWyBWCS85wRgGjof/MPfEaxrpP/ufrp7ISVyPTTT4J2xUd4Z
      H+FgoJNTLa0caQusKMyGYbC8OM/8zDS6ppWjI1vieLzrbzC3USfYMAxmJydYmJkmEArRfqAH
      r89fcTh0+ZjO4LVPcLk99Bw6svYwshAwPQfXB6E+Ckf7wOetXR/g9hhMTMPz58CzfizU9MRY
      5QkxY5NzeF0SJVWlubsPt2QhhNgTCTGWafDeT79HuDFO/0tfeWR7G35XFWyOppZ57c4wfXWN
      uIwITlnh9IEgEnfjkFJJ5qenyGXShGN1NLW2Edhi8shGCTEPnrO8uMD0xBiyJNPRc3DDpsvD
      91ws5Ll19Qot7R00t7avOl8CpMUEXLuFFfDD8UPg865rr2KECXoB9CKUMhijbyFFu3AceBmm
      55BvDCKeexrhX7//VJEATF3j1uAQPp8XraTR0XcYtySqXsBM06w4MMo0dN796fdo7Ojh8DOf
      pfzzb99eLXy8R6ak8qvhQQBONnazsFyuRPo7gqBlmJ8uR0dG6+ppjLcRCFU+XLsVATxILpth
      enyUXCZDa0cXDS3xVff34D0vzs0yMXKbw/0n8a8lynQWLl5Bcrvg5DFEaHXG2Jq/oVFCaDmE
      lkeoKUQhgcgtIkpZRH4BUUwh9CIYKggTSfEiuQNInjCimCxfKwRK53M4Y2eRBmYR506X+wZr
      UJEALEMnlcniDwTQdYOA37cnmkCaWuTdn3yXtkP9HDz73KqHvleaQKZlcXFqgqtzM5xs7ATN
      B6ZOk09jYXwYWZbxBQI0xduI1NU/kmi3Ow9QUovMTk6yODdDfVMz8Y5O3HcX6jUMA1mWGb89
      RDaT5siJ06sHF0olGBiGRBLO9EM0vGYb30pPUfwvf4FcfxD0AsJQyzW57EJyecEdRPJEkX0x
      JH89kieM5G9A8kaRnF5QPOBY2e+51wSSShmMkTfQb/8aMhmcZg+Ol7+F3HFwlR/7vhOsFQu8
      8YNvc+DkeXpOP7tpIsdu+CiEYCab4ec3r1PnDtPobiKzuETQXCTodRCOxjAMg/buA3h9/s0N
      boFH3STPMAwW52aYmRjH5/fT1nUAWXZwZ3CAYChM58G+lbZLGgzehqlZONwLXW1rjsQIy8C4
      /Wv0K99HaurHdeSrSP66+4Vakrf/nPSShiTLKM5Ps9ZEbh7jzusYQ68jeQMoh76E0vEskqf8
      1trXAigVC7z5g2/Te/Y5uk+cW/e83RCAZVlopRKJVJKPlpcYnp6l3R2ntTFOR0QiGlDw+vz3
      a/lq+1itXSKFEKSTy4wND5JYWODY6bM0tbZ9WtEYBgyPwsgEHOiA3u51R1/MxG20D/4Kyd+I
      +5n/AVPxb+mehRAI08I0TEzNQCuUKOVVSnkVLV+ilCtSyqksTyzQ2Bvn+G89vdqGYWC9848Y
      I69h+hPIdQdQ+r64fwWg5rO89cO/4ehnXqHtUP8j26uUh/NjTcMgn82STi2TSSUpFAqM5nOM
      SgrtoU46AnUc7ghTH3TuyFuq2tukmoZBYnGB+qbmsk3ThPFpGB6Bthbo6wHnOnMEehHt8t9i
      znyM+9n/CbnpGAjB8nSCYCyIqZuouSJaXkXNFtHypfLfhRKmpqOXdBAgKw4UtxOXx4Ur4MHt
      9+AOeHAHvLgDHrRCCZfPTbAhvKYfWBZcuYEoFLB6ghgjv96fAihkUrz+93/Fqc//M1p7jz2y
      vUqxLJNCvkA+kyaVXCafzSCEwB8MEonWoToV3pqaJpOV6Y200t8Rpjnq3jD2fq8LAO76KMvl
      IcaBYWiqL4/suNceahRCYE68h/bhX6Mc+SqOQ18jn1RZGpljaWSO+aEpYp2N5YLs9+AOevEE
      vLjuFmyn14XT48LpdiIrW1h1YguhEAgBg3fKTbUXzu8/ARQyKV77u7/kzBe+Tvzg0TXPqcTe
      ZgghMHSdXDZDajlBLpOmVCzidLuJxOoIRaIEQ2EUpxPNNHhvbIwb0xm6gy0cb4vQWufZ0lKE
      1RaAlrkGZhFn6DhICkgK0nbX2RQCiirW8Cjy/CJEwnCsDzYYXrSKKUpv/CsK6QK5tj8guWSR
      W8rg8btp6Gok1hIm/8GH1H/hJWS/H0lRwOF4pOH0LQngHpMzcP3W/hJAPp3kje//vzz9ld+v
      aPPorRaue/dSLOTJJJOkU8vkMhlkWSYQChGO1hGKRPB4fSsWsy3Hxi/z/p05AlKI0x31tDds
      reBX6uNWKUz8DXr2KrISQQgDhA6SE1kJISkhJGcY2RlBVsJISgjZGUVyRpEkJxRLsJxFSqYh
      lYFiESyBKBSQvvAihD8d9hRCgGkiTBOhqpiZDFLxDuob/xfTA1FypRYUoROKePC5ZSSHjOR0
      IjkUtMkJlKYQlp4CU0KSA8iBEI5gGDkUwREKIQeDOCJhHKEwcjhUFovDURbLQ2WuIgEALCb2
      jwAyiQXe/P63ee53/gWxeMcj24NPa/dMKkkmlSS1vIxpGni8XsLRGOFoDH8guG4or8PhIKdp
      fDgyRyYrc6w1yoFmH05HdeNstoNllbcHenC/AWFpCCODZWQQWgorv4CYH8NKTCGsDJZHR4R9
      oJdALSFZTqRwM3K4FSsVQX1vHld7G2YqjZUvYGazmLk8aq5IKV8CK0d90xD+Z85j+j6LHGzA
      EY4gBwPIfj9yILCi0Bq6juJ0IoSJpc5iFqcxkqMYqSmMpRH05XlESUGoITDqEGoAs2iiqnkk
      IfC4/TjDEZyhMI5wGDOXQ3TECb7wIk7H2n2th9kXAkgtzPLmD77NC7/3J8RaVs84bsWew+FA
      WBbFQoHU8hLpZJJCLovscBCKRAlHY4Qikftj3hshhEDTDUYSOYam8/Q1Rehp8T3SGvxVF4Bp
      IRDlyE3DhNTd2jyZLgeN6Tq4XOXaPBYpj9eHAnB3tTsrnaTw8fuo1y6hz8zhih/Fsiz8zz5L
      SXaRmEmTXCpQMiDYECBSeIeQ/hH+z/8FUutZdFOjqBVRjSIlQ6NkFFF1Fc0sUTJKqIZKUStQ
      MktoRvnYvc80Q6NklhBmEYw0kuxGll3IDi9Cm8NpJHFKJiGHjzr3YRqcB6iTI0TvLDLmLfCP
      0Tn8Lj9Hm/s53nKS1nAbjnXCt/e0AIQQpBdneefH/5bnf/ePiDRWvmv6vci/UkkFIBAMlgt8
      rI5AILjmglb3fhIB6EZ5Y+WiZqEZFiXdIlMwmE2qxGMeDrf6t70e/oM8sgCEKP+XL0AiyY0L
      I6SWcwRlCzK58qiNokAkWC707pUTWA5Tx68m8WcX0UbHWJ7PkPfXYR05QL43xKJziY+Tl4kU
      QmSSKUyHiRJ2c9Br8MXMNDdkhct1vQiHgkOScTpceJ0+PE4PLocbj9ODR/HgUty47/7tlF34
      3H7cDlf5uOLG5XDjUtx4lPW3QbKMDGZxArMwjlkcxSxOlH8Cs4Ar+hm8rX9IspBkYP4aA3PX
      mElPE/PVcay5n/74Ker9Dfdt72kBJKbH+eBnf8+L3/xTgtH6bdubHB8nGAoRiUYxLUFJ/7Qw
      l3QLVbdQ7xZwVbewLFEOpJDA6ZBxO2U8Lhmno/yvLJUXkeppqc6kFUC6kCLsq2Bj7KIKyylI
      psq1ejZXdtjvhViEBdVEk2WC8eY1Lxeahnb7DurAANrQEK6Im6W2IEsdEUaMHBPpSQzFpLkp
      TmukndZwG+lCitPtT+Nz+XDqKtLFv0HKL+F+8X9FjmzvzVy1xCdhoSU/QFaCOEP9D30mmM/O
      cmPuGtdnr5IsJGiPdnKsuX/vCiAxNcqFn/8HPvetPycQ2X4ihxCCN28soxsCt1PGIUs4Falc
      qJ2Ou/+WC7nLKeNWZB5swu9ENlO2lOV/+cl/T3u0g+ZgC2FvlJAnTMQbIeQJE3L4CWQ0Ioki
      SiqHMAxwWAiPiXBbCK+F5dAQhcVyrEwhgTl/HSwLR8vJchhBoBxGYGZ0CpdvsTx0hyvBEiOt
      fortDbh8AZpDcbqi3bRFOmiPduJRPCt+g3tNSePWz9Gv/Qjnmf8WpefzeyatdCudYCEElrCY
      Sk1yY+7q3hOAaegMf/Qudz5+n5f++Z8RiMQ2v2gTktkSXreC2ylXLWq1ummbJrc+/vfEm05T
      TEyzPHGVzOJtkvoCOZEiYOmELJOI4qHRV49qqsyraZaFRVaSMT0hgpFOIvV9xGJdhKLdBJYz
      ONJ5jMUkxQtvMadOMtvuwNvewKFgM2EhMIvLWGoaWXYiO5ygeJD99Ui+GJLvbvxNoLH8ryuA
      Pj+AOfAfket6cJ/7MyT31pdEr/VvCNsYBWKbTSA1l2JiPk1vT2fVl0dfnpviP//f/zu//T//
      b0TXWZSqUnY7FmgzRDFF7jtfxtHcjxxuKwd/eWNI3sj9/5f99eD0gSRjITAti5yWJatmSBVT
      5EoZ0mqKVDFJVs1y4rVR2rMKxotPU+ppJRzvoi7QgCKvTKYXQoCwyqHFRgkrv4QoLCMK9/5N
      INQ0VmYGc+oCvm/8DXLziapUJPtWAJOTkwQcAkdDB0GlugIQQqDmc3j8gT1ZW9fCphACs5jG
      4Q1tf7LqIcxSeSNoxzqztJXyqY+PtgPkg+wFAWzr1/a5ZCYTOXw12B9JkiScayzM9DgjSRK4
      AlUr/EB5sqmCdMdN7d338fF6Lo/UBxCinAxT7U5wtRNY9lpCzE7Yq0Us0H64Z0mSKhLpI9fh
      98dTq1gzVHoTO22vFjarbe9ewd/LPtbKXiU2qzIKdO/Lq0W1c4yrba8WNmthD56s57Kde37k
      96MkSQjTIJXOYmgq+YKKVipiWIJiscjW9CXIZdJoukEmnS4HpKkqhl4inc1vyy+1mCdfLJHP
      ZTFMi2KxiGXoLCfTbEfxQlikUilMQyeTzWMZOppuICwTtaRtxyLZdArdMMikMwhhoaolNLVA
      MpXZhj3u/l45SmoBVdPRSiqWKP+2umFuy8dMOoVumCt8zGXSJJLpbdszTJP0PXulEppaJFco
      bsNeeaGGTC6PWsxT0g1KqoplWaTTaawtlL2qdGOLxQJTk9P4fG40w6LZZ1AIHyY3M07PwUNs
      2syzLLLZNOnJCVC8eLN5DMOgMRpkcnqe8NHDmxhYTSGfY3FpGWQFp9OJput0t8eZHh3C4TtL
      2F2Z9o2SSmJhnqlZgVuCSF2EknChlJIkNRdHeiqcCbVMstk0E5OTKE4PvkIIXSshSnk8oXo2
      WFZqXYqFAjPT8yguGXDgk3U8dXHG74xx+NhRnFuIqV+BaZDNpJiYmMTlcuMrRtC1Eo3REHNz
      c9RF10k82cBeJpNkfHwSt9tFTq1DLxUxilnyusTJ40c2t/EQhUKB6dlFFAUk2YkiNPzhKFMT
      U9S3H6S9cWMfq9JDKuazBMJRJOnuKI7TSbFYQHHIFO8Ox22EwCKVzlFfH0WWZRwOpazsdIpw
      dHuzwOlUirr6u4u3ShIyFmpJQ1EcmNuoDQ1dRZecBLwuJLl8j4V8jsVEkmy68hpbCJNUpkBD
      XQRZlnA4FPSSij8QYGZmpmJ7APlshmA0howEEiiKTKGogjCYW1jepo8q9bEwsiThUJxoahFJ
      mDSssfvL1uyVqI+FkCUZh6JQKqlYVnleYzvkMmlCsbpyspEEikNGcvrxuR1bWm/rkfsAUBZA
      Jl8iGvZTMsAsFbBkBUtTcfmChAIbr2spLItEYhG3L4Spl/B63KTSWTxuF6pu0tRQuQjSyQSm
      5MQlC1xeL6nlJB6fD03TqYvFKl6MzNBUEsk04UiEUknHgUFRt2iIRdENE+c66YDrISyTpaUl
      vIEQhlbC63aRyuYI+n0YlkQoWHmcUT6XoaDqBHwehKyg5jI43D4kU8MbDFccpi0sg8WlBP5A
      GF0r4XErpLMFIuEwTper4iU9hXnXXiiMXirhcSmkcwWCfi+GkAgFKr/nXCZNUTcJeFyguChk
      UihuL6ZhEI1GN33OVRGAjc1+pbrLpdnY7DNsAdjcp1goUFTX77OZpoFlmpiWhbFOPyqTSmPd
      bVOYho5hbq9tn04lMXegcVKDYAab/crVt34JXadokAWKWyApHgKBALqqkkhlWV6e48zRXt56
      /zLxrsM4rBJN9SFSRQsPOqHGODdv3aK3rw9JErz+i3/gwOkXaIkFWFqco6mlnUQ6i9MsEow2
      4XYpqGqexUSWqYlBDh87jWnqRMJRiukFJhay9PdVlv5aKbYAbO7T0tKGHA8z8N4gPleW+XQJ
      h5pC9vkxlAChgAdvuAmHQyZozPHu4BJNYT/zi0s0ROv4QnsblqRw8/olnP44LZ2HyS+MkjPC
      pHMqH157h69/5TxXr86SuHCJeNdBUtkkoWAA3RnFys5S9LZz6/V/5Mi5l8gsLQC1FYDdCba5
      TymfBbcHraCRzyaQ3EEclkYoHGJkfJrmpkYi4RCZbIaAz8vw8AjRaAjVkIgG/QRDAT66eImD
      B7tx+qOYagEkQcDv5cZH7+NqOoQidFxCI1TfyMLcPHV1sfLQtK5R0Exi0SiXL1+mOx5D9zTS
      0VRBltw2sAVg80Tz/wMYBCUHEed07AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Frq city (3)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Line Chart' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29eXRcV37f+Xmv9hVVhcK+gyS4LxJF7d2SWuqWutXttJeO21Yn7RN7nGTO
      nNg+juPxxOPJOTMnmemck+RkMv5jJuNx4iTOeHLcTi+S3N1uixIpUpTEnSCJhdhBLAWg9ldv
      vfNHAZAoAmAVUAUUyPc5RwdULb/3u6/e79377v3e308SQghsbB5R5J12wMZmJ6lYAJimuWUb
      QoiK2DEM46GxYZomleika6U9tWLDSqWwCgW7B7B5RJEkDNO0A8DmESUQIKuqdgDYPKJks4S9
      Xpw77YfNw4kQgvPnz2NZFul0mi9/+csMDg5y+fJljhw5wq1bt5BlmVgsxhNPPIHP59teB2UZ
      2eGwewCb6hEIBDhy5AgdHR0AZLNZDh06hK7rnDhxgu7ububn5zl//vz2O+fzgdNZWg9g6irD
      gwMEG9qZGh6krbOZufkM4ZAbRZc4vH9vtd212WUIIUilUty9e5fZ2Vn8fj9dXV0MDAwQjUaZ
      np7m6NGjdHR0sLi4uP0O5nLg8SCVshBmmTpT07NIhsLNoUlauzuodztJIePFoqOjE9M0kSRp
      y35ZloUsb61jsm3Upi9CwGI6T32df0f9ABC5HLjdJfYAhk4um6G5o5tn4y3IDovZhSwtARdZ
      Q0aWZYQQOByOrTklBJIkbdmOYRg4nVt7vKkVG6ZpIsvylm8utdCe8dkUv/2HP+J//tWXONAZ
      3zE/ACy/HySptB6gFEzTrEgAWJZlB8CneJgCoH90nj8/3U+2oPPffv0UnU11O+IHFBfC8Hjs
      h2Cb7eP96xP87OcO8JvfeJr/47sfcns8sXPOOJ3FmaCd88DmUUIzTEZnkvR1xGiOBfndN57j
      3//lVS4O3K2I1KNsXC47AGy2j2t35tjXHlsdysVCPn7vW8/z/bMDvH99YvuDQFHAMOwAsKk+
      QgjOXB3n2SMd97we9Ln577/1HO9eGeftC8PbGwR2D2CzXRQ0g+lEhj2tsfve87ic/MNvPsPw
      1CL/31/3Y21XEDgcIEl2ANhUn2t35ji2pwlZXnsmy+V08Pe//gRZReOP37qMaVrVd6pQAFsN
      alNthBCcvzHJCye6NvycQ5b5O68/Rsjv4X//8wsY1Q4CtxtsLZBNtVFUg8WMQntDuKTPf+PF
      QxzuaeSf/YczFNStb3xZl+WHcTsAbKrKpcEZjvU2lfWdV0728MoTPfyz/3iGdE6tjmOqWvoQ
      yDQ0hgZuk1hY4PbAAMmlRQbvjLM0P8P49Gx1HLTZ9QgheP/6OE8fbi/re5Ik8czhDn7u8wf4
      zp+eJZHKV945jwccjtK0QLLDRbQuhOR0E/J7mFtME3PLzCk6PoryBcuyKjKNVQk7lmVted9o
      Ldmo1Hnd7vakciqpnEpjxLf6vXJsHO6O4/3SUb7zn87y3/3cKVrrgwBomsZbb73F3r17uXjx
      Iq+99hpXrlwhn8+zf/9+rl+/zuzsLE899RRHjhxZU0Yiln0oKQB0Jc3I5CwN0RyLOYOGiJ/p
      VI66oJu8bovhqmljN2uBLg2O8+TBtnu+U66N/Z0N/MYvPMUf/sVH/MqXj7OvvR6Anp4eZFnG
      5/NhWRZ79+7lr/7qr1AUBU3TOHToEGNjYxiGwalTp+6za5kmOJ22GK7WbezWABBC8E//5D1+
      9auP0xwLbtmP2aUs/+bPP+RvvnSIvS1h3n//fXp7e5mZmWHfvn0oioJhGHR3d7O0tITD4SCb
      zeLxeIjH71eeWqpa+hDIxqZcljIFJFmiKRqoiL2maJDf+eaz/Ms/O8fjfc28/Pzn8Xtc9PT0
      3PfZWKy44FZXt4Ha1DDshTCb6vHhrWmePNBWkU1SK4QDHn7rbz7Dfzl9iw9vTm/NmGGAZdkB
      YFN5hBB8PDDNyf0tFbcdDnh47ck9BP3urRny+8HptAPApvLMJ/M4ZZloqDqZHrqbI0zMprZm
      RFXtHsCmOpy5Os4TB1qrZr+tIcTYVgPANO0AsKk8liW4PDTDyb7KD39WiIW8LGWUrRkJBMDl
      sgPAprJML2QI+t3UBb1VO4bH5UQ3zK0J5uwNMTbV4PyNSZ493PHgD24BSYJ4XYC5pdzmjVgW
      CGEHgE3lsCzBjdH5qsz+fJbWeIi7C5nNGwgGSx8CCSHQNQ3LEui6jhAWum5gmSZGBfL52zwc
      TMyniYa8+Dyuqh+rszHM+Fx68wZyOTCM0laCLVNjfGQIRZewMHG7vGgFFW/AhW5IHNq/D2DL
      oq2V71dCnWHbqI6djWycvzHBs0c6HnicSvjR3RLhwq2pzdtaHgKVJoWwBA5vmIaAQJdhYbFA
      NORDkWR8sljV8GwVIUTFlI9bXYGsNRu15MtamKbF5aEZvvrMvg2vhUr5URdwM5/Mb/q6E4EA
      ghLVoEjFBLneWDNWLseR/Y3ML+VoDLjIVTg1YiXEcJXypRZsABURw1W7PYNTS7TFwwR8nm3x
      w+dyFG+YSDgd5T/KWtkseDylBYDD5WXP3mIG6LpQUdnX3Fic5qreZJfNbuL9axP3pT2pJpIk
      0RQNMp/M0VIf2rQdexbIZssYpsXg1CKHuxu29bgt9UEm5zf5IBwK2QthNpVhcHKBfW0xPO7t
      Vdd3NkcYndmkJCKTAV23A8Bm65y9NsHzxzq3/bidjWGmNtsDSBJIkr0hxmZraIbJ2GyKnpbI
      th+7Puzf/Ib5QHGjjt0D2GyJGyPz7GuL4XJufbarXFxOGSHYnCYom7WHQDZb58zVMZ45Ul7a
      k0ohSRKNEf/mNEGybG+JtNkaBc1geiFLT0t0x3zoaKzb3EzQcpVIOwBsNs2VoRkOdzdsaiGq
      UnQ0hhnfzOaYXM4eAtlsjXMlJL2tNu2N4c31AA4HyHKJYjhDZ2R8ipZ4mJGpOeLRCAupHPUh
      N1ldYk/XzowBbXYORdVZyhRoi5eW9LZaNEQCzCc3MRPk8ZQ+DSo7Xfh8HrSCQkFVWMh4aQq4
      SBjgly07NWKVbdRiasSLt6c51tuAZZmUo0erxnmVJFA1Hcc69QfWJJNBlKoFMnWV+dkZotEY
      XreXOp+LmaxCLOQiZ6dGrKqNWs0Md65/im996VjZNqtxXhsjARLpAm3x0jVBlscDLlepYjgP
      x088ds9rbSUfyuZhI51XSWYLNEYqk/Vtq3Q0hZmYS5UVAHaNMJtNc6F/ilMHWtctebTddDTW
      MVnu7jB7U7zNZjnfP8kzVd74Xg4dDWHGZpPlfcnuAWw2QypXQDcsGiL+nXZllXjEz0KqzDxB
      dpVIm80wMZfm+WOdFU16u1XkZV8sq4zZMrtKpM1mGJhY4KmDtTUFIkkSTbFAeWlS7CqRNpvh
      7kKW0FYzM1eBruYIE+WsCNtVIm3K5c70EmYFsjpUg/aGcHkZo8upEmljI4Tg7PVJntvGje/l
      0NVUx/hcGQGwXCXSDgCbkhibTfFfz96mKRp88Id3gHhdcSaoZNnI8ufsALB5IJYl+LO/vsGv
      f/VxWhs2n4Kk2gjAKjUANA1Ms3Q16M3BYbqaoozOpYn43cwvZgiFXBQ0mSMH923BbZtaRgjB
      d9+7SWdjHZ870sLtW7fo6elhZGSEgwcPMjk5icvlYmhoiKamYkX4SCSyZmXGaiJJEq31IaYT
      GToaNyiOt4LXW0ahbKeLaKSOfDZLQcmyYPhojgRJIxH02YWyq21jJ9WgN0bmuTmW4B/90jOY
      hoGqqly/fn21Hm9/fz+GYaAoCqZpsrCwgN/v58UXX1xT1FjN89reEGJsJklLrASNkqYhnM7S
      1aCZVJJ4Uytx00FjYz2JZI62gItshVMj2mrQe9lJNeh8Msd//ut+fveXn8PtcpFIpRgcHKSl
      pYW5uTkSiQSapuFwOPD5fLS1tRGPx+nv78eyLDye+9MkVvO8djVHGJxcLMm+ZVkgSXah7Fq3
      sVMBoOkm3/nTs/z8C4c42BXflI1K+FGOjflkjn/39hX+4TeffaANS9NsLZDN2ggh+E8/ucbj
      fS2rF/9uIF5XzBNU0j1d1+0ieTZr8/71SZLZAq89uXenXSkLSZJwyDK6UcIWNbtQts1aTMyl
      ePvCEL/+tZM1o/cvh+ZYgLlkCXmC7ELZNp8lp2j8X9+/yK+9/hh+b/XLHFWDzqY6xkpJmGur
      QW0+jWlZ/NGbl/nSk3voat7+PJ+VorOpjvFSNsdsVCXS0HWSySRmOfpqm12LEIIffThMyO+u
      Wa1PqbQ3hJkuRRa9UaHs25c/4i/+/C+YzxQq7Z9NDTIwscCHN6f55S8erUmlZzms5Al64OaY
      fH79PcHhWIxXXv8q8ZBdAOlhZymj8O/+8gp//+tP4N6BDM/VwO1yoBsPKN8rxPpDILcTrly8
      gqLZNYAfZgzT4v/8/sf84heO0FAjKU4qQWMkwOyDMkZvVCJpcWGGsYERFK2ot7AMnZGxcRCC
      0TsjZFIL3B4aZWF2mtHJuxVvgE31EaKo8NzXXs/xPU077U5F6WqOMDrzgAfh5RJJa65Jxxo6
      2HPAwO8tvi07XXjcLvKZJZKpHLidxL0yCdXEL9liuGrbqIYY7tLgLFPzaX7j558s2cdaOicb
      2WiPB7kxOo9hbLB32TQRa8mh1VySkclpZOmTRQJTV5mdnkKPN6CreTCDTGdVIkEXeTs1YlVt
      VEMLNLuY5bvv3eL3vvU8bnfp8/21ck4eZKOtoY6ffDyy4WesSHGq975PeAIR6jyCjy/c5vjT
      T+F3O3G4PDx28gkAurp2Nh22zSeMjIzg9/uZm5ujt7cXr9fL6dOnOXHiBMPDw0SjUZxOJ4FA
      gGi0WMSioBn84V98yN95/TFC/o2LWu9WGiJ+FtIKliXWX83OZMDjWfsZoKWrj719nfg9dg29
      WqaxsZFsNks8Hiefz2MYBgsLCyQSCYaGhshkMly5coUbN24Uq6oLwR+/dZkXH+thT+vOVXWp
      NpIk4XU7UfUNhlobVYmcHB5Ax4nAXgirZUZGRhgfHycQCOD1eunp6SEWi3H37l00TaOzsxOX
      y8XAwABCCE5fHkMAL5zo2vXz/Q+iIRJgbim3/qr2cpXINfcDXDl3mqTp5dSTJ/GXWPzY3g9Q
      HRuVegYYnEjwJz+6xv/wtz6Hd5MFrWvlnJRi44fnBgj5PXz++NpDdiuVWn8I1NTWhjA1NG1r
      T+s2tcGVoRn+6X84w9/9mZObvvh3G+0Pyhi9UZVIWXbg9QeYvTtdLf9stpGhqUWeOtROSzn5
      83c5rfVBJhMbBMBGVSJTi7Nc//ga9S21lQPSpnwM0+LCzWne+OKR1SSyjwLxOj+prIq5Xv2m
      9apEGqpCwXITiQVw7WD5S5vK8OGtaU7sbcL3iAx9VpAkCY/LgaqvI+dZLz26JMsk5+cJBv2r
      Ugib3YkQgjfPD/LqLtvaWCkaowFmF7Nrv7leakSHy0l3by+y20+kBrMA25RO/+g8rfVBoo+o
      qrezqY6J9R6E15NDF7JJLl+9zsJ8AtVc7j6EQNU0hLDIZnNYlkleKWDoGgVVr2YbbDaJEIIf
      nh/kq8/2PfRz/uvR0bBBFXmnc+1C2d5gPaceP8qNO1M4pWJ8WKbBnZFRejtamJoYw5Q8YBg4
      vU5MEw707V2dw98qlbDzsNlY+a8cphMZNM2kLR5aFdTVSnu2y0ZzfZC3Lgyt+VnhdK6/Eqzr
      GlgCY3lXjSQ78LpdqIUCLn8Un9AwdNBlBy7pkx+mEqrFzfzY69l5GGys/Njl3sV/cG6Qr39u
      /z3Hr4X2bKeNaNBLKlvAtKz7ZsBEPg9rFcrWlAwTY9O4g/V4nPLywUzcTie6kHHJgnhDM3lF
      I+h1UDCLq5SVUHGuNKoSdh4WG0DZK8FjM0kyeZUjvZ/o/GulPdttw+dxoagm4cC9wj9Lltce
      AlmmQVZRsKw05koOdYeLto7iZun6+mXDXh8AD6eecPcihOD77w/w+jN9O+1KTdDeEGYqkSYc
      aLj3jWCxzsF9AWDqFvuOPEZbezOuCty9bLaXpWyBRCrPoe6GB3/4EaCruTgTdLDrM+cjl1tb
      C+QN+Bi8cZmf/vRd8ustItjUJEIIfnhukC+d2rPTrtQMbfHw2lOh622Kd7j9tDbVI5ka2YK9
      ELabyKs6N0bmeOqQLWFZoTkWZGatxbBQCNzutWeBevv6UOQp4kF7hL+bOH15jBdOdOGQbQnL
      CiG/G0XV0Q0T16fTvmy0Iyy1lKZvfx+7MDfqI4tmmLx3ZZwXjnfvtCs1hSRJ+L0u8oW1F2zX
      DIB8epb/8p+/y2Jeq6pzNpXj4u27HOlt3LVJbatJe0P4/iLaweD6eYFklwtMEwm7C9gNWJbg
      7QtDfPmpR1P09iA6GsNMfjYAstm15dAAgWCUnr5u/G57GnQ30D82T2M0QCzs22lXapKOhjrG
      P5syfb0dYWouyQcXLlPIZcisM26yqR2EEPzlhSFef8YuVbsejdE1imYs7whbMy/Q/r2dTC6q
      q2lRVuoEdzREGJ6aJRwKkUnnCYXcFHSJwwfsk79TTMylUXWTzlJq4z6iFGeCjHtngpYXwtac
      BjV0HY/PuzoLtFInWC3otLU1Mn03Q1M0SFpIBBx2asRq29jofLx1foDXn96LaW68aFlL7dkJ
      GwGvi2RGWd0bIQCEWDsAAsEAN2+MoR8/hs+1XCc4uUR9UzPZdJYDe1qYXczSGnCRs+sEV9XG
      RmlRljIKM0t5ju5pfuB+31ppz07ZaGsIM5fM0xAtaoAsv399OXQ42kDYO4GimYS9LhwuD/sP
      HgIgHosB0OUvZhh4dPIM1B5vfzDES491P1Kb3TdLV1MdozMpDvc0Fl9YlkPf/xCcT3H9Rj9p
      xcRnzwLVLPmCzo3ReZ4+1L7TruwKOpvqmJz/1EzQ8o6w+7VADheSLBGN1+N22kvqtcp7V8d4
      8mAbbpd9kyqFeMRPIqV88oLLtXYAaIUcQnbj97ixKvBQa1N5dMPk3StjvPRY9067smsI+z3k
      C/onpZMUpbit97Mf9Nc18LnP2VryWubiwAwHuxoe2vTm1SIS8pLKqcTr/Ov3ADa1jWUVS5q+
      8kTvTruy62iOBphOLJdQdTjsANiNDEwuEA15aY4Fd9qVXUdXc+STNCmFwvplUm1qEyEEb50f
      4itP2yvvm6Gjse4TVajbvXZmOJvaZXohg6LpdLesU/TBZkPqwz4SyXzxf5bXTuwA2EW8dX6I
      rz7TZy98bZJwwIOqFzVBqCqYZnkBoObS3Lo9wNLiAreHx1iYu8vY1Ey1/LX5FMlsgdGZpJ3t
      YYvUBb2ksupqctyyBBWFXIackmNmwU2jVyZRMOw6wdtgQwjBjy4M8dKJLhAWhlF+asFaas9O
      2miK+JmcT1HXUhTxlBUAQpJxO114HIKpVJ5IyE1ek2wxXBVtmKaJblhcvTPHH3z7BZzOzZ2b
      WmnPTtvoaY0xOZ/hWKN/7f0AGxFpaCHS0LKpA9tsnveujnOyr8WWPVSAjoYwN0bmwNtlrwPs
      BkxL8M7lUV4+aS98VYJ4xM98Mg+muXZiLJva4k9+dBWv23lfclebzRHwutANE10pgGXZAVDL
      pPMqAxML/OznD+60Kw8NkiQVZ4JMufxnAJvtQwjBv3/7Cl9/fj9Gapr5eYlgMMj58+fZu3cv
      Y2NjRKNR4vE4fr+fUMjemlQqLfVBpu4uEI/47R6gVrlwcwqAY71xrl69iqZpLC0tkcvlmJ4u
      1m+enZ3l3LlzDA0N7aSru46upjrGpxbsIVCtksoV+K9nb/Pt147jdrloaGhgfHx8dX3E6XSy
      sLDA8ePHaWlpWQ0Im9JobwgzmTPsIVAtIoTgj9+8zC+8cIiQ34Npmrz22murm+Lb2oqZn0+e
      PAlA/UrFEpuSqa/zszifsnuAWuT96xO4XA4e29e80648tAS8LrBMDKNMLZBNdUllC3zv7ADf
      fvX4I1vatBKcO3eOubk5AIaHh5mfn+fSpUvcunWLxcVFFEXBXx8hWTDtIVCtIITgj968xDdf
      PkLAZxco3yyWZTE8PMzhw4dJp9NcuHCBrq4uZmdncTgc3L59m76+PlyaxnsX75QXAPn0AiPT
      i8TCPuYWMkUtkC5xcJ+9SrkVhBCcvTaBz+PixN6mB3/BZl0sy6K1tZUbN24QCoXI5/MsLS1h
      GAbPP/88t27d4s6dOxzv6eSDkQSSKEN6OTs2zExGweHw0BT0sCgkfAja29sxTbMi3bZlWchb
      rHCy22wkswW+86fn+P2//Tx+z735/SvhR6XsPFQ2TIt//v+eK68HqG9pJaVO0tgQI5HM0xh0
      kbVTI27JhiUEf/z2VX75i0cJB+5Pb75RasRK+/Io2bDyaX7mqT3lBYDT7aOvr7gfNRItTr9F
      t+TGo01x6DNOXcDDib32rM+2IgSHOuP2LNBOspQt8MNzg3zrS8d22pVHj1AIyeO2A2CnsCzB
      v/3BRf72q8fxeey6XttOJgOaZgfATnH68ijxOj8Hu+I77cojjR0AO8B8MsePP7rDL79y1F7w
      2ilCofWrRNpUD9Oy+L9/eIlf+fIJvG57HXLHyGTWrxJpUz3+6uMR2hvC9HXYIrYdRZLWrhJp
      Uz3uLmR45/Iov/DioZ12xSYQAKfTDoDtwjAt/ujNy/zKa/bQpybYqFC2TeX5yUd36GmO2EOf
      WmG9QtkPYmb6Lkouzcj4FOnFeaZnE9Vw76FiOpHh/RsT/PwL9ub2msHrLT81oppLMTk1i2LG
      8AuLuxkTLwLLitmpEdexoaoa/8+bl/ilLxzGIVO2zUqe11o5J7VgQ2Qy6xfKXo98XkFX85h6
      iJlsgVDQTU63xXAb2Xj7wh16W6Mc7G7clA1bDFcdG5bbDS5XeQEQbWjmmQZbtFUql4Zm+ej2
      NL/3xvM77cqOkUql8Hg8eDwelpaWkCQJRVEIBoN4vV4kScLl2lgKks/nMQyDcDhMJlMscaSq
      KqFQCF3X8Xg8D7RxH243yLK9I6zSCCFYyhR4+8IQb38wxC9+4TCeR3TWRwjBxMQEmUyGAwcO
      cPr0aU6dOsXHH3+Mx1Pc8H/48GG6uro27OFmZ2cZGhripZde4sc//jEHDx7k8uXLSFIxV1Jn
      ZydHj5a5qq4o5Q+BbNbHsgQjd5d484MhkpkCL5/s4V//g1fX1Pg/SiwsLHD06FEKhQKapjEz
      M0NnZyddXV18/PHHvPfee3R2dm548S4uLrJ//340TcMwDK5du4bb7aa7u5tCocAHH3xAd3c3
      4XC4dMeWq0SWtSNsI0zTrMgzgGVZu+oZQDNMrgzN8Nb5IeqCXl59cg/7O+qRJIlUKsWZM2c4
      efIksiwzMTGBqqrouk4ymaSrq4sjR45seJzd/AwghOD27duEQiEikQhzc3M0NTUhyzIulwvD
      MEgkErS2tm7YvrGxMXRdp7m5mUwmg9frJZFI0NXVhWmaLCws0NbWVtY5slQVHA47ADZjQwhB
      rqBz5uo4P700wrHeJl4+2UNL/b3pCTVN4/Tp0xw+fJjW1lauX7+OJElcvnyZrq4uEokEHR0d
      qzl+1mI3B8BnEZZOYeEMnroTIN0/Ay+EDhtdjkIHBFr6Op7I48juzVfLsVIpewhULkII5lN5
      fvzhHa4MzfDCiW7+4NsvEFwni0M2m129YMbGxpiamqKzs5MnnniCeDxOLpdD1/XtbMKOICwD
      PX0Zde4H6OmrGOFjIN1/k5MkF7BBoMvFB10jcw0zc5VAz28hyZu8hJerRNo9QAk2LCG4M7XE
      D84NkMoV+PJT+zi5vwXHAzZmV6pCzG7sAYQQCCOFmvgJ2tJZXMEjeBpfQzjiOF1bS/VuGDr6
      3HcxlVECPb+BJJdvzyoU7AB4kA0kmY9uTfPWB0PU1/n42rP76SmjROlOBcDK7EtnZyczMzPc
      vHmT+vp6MpkMDQ0NtLW14XQ68XjKu3BKaY8QFkbmBur8W1h6Ck/8ZdzRZ5Ec3pJtlOKHw+FA
      W/gp2sI7BPf+HpLDX5YNewi0AbOLWf7tDy6ymC1wsq+F3/zGU0RDu2c2RwjB+Pg4nZ2dNDc3
      Mzs7S19fH/39/Vy9epXbt29z5MgRenp6KnZMy8iiLZ5GW3gXh7cdb8sv4PRXL1+UJEl44i8j
      u2Kkb/8+ob2/j+yOlW5gM1UiH2bSOZWz18c5f2MSWZKI1/n5e19/gvpweXeWWkAIwejoKG1t
      bTQ2NmJZFplMhkgkwssvv8zHH3/MzZs3KxIARu4O6twPMQsTuOtfJLjvf0RyBLZtp5szfIKA
      M0Rm4J8Q3PM7OHwdpX1xeeCz64ZAt27dorm5mUgkwujoKE6nk0QiQX19PYqiEI1GiUajJXWz
      OUXjw1vTnO+fRNUMnjzUzjOH26kLeMjn84yNjXHw4EEymQyyLDM3N0c8HieRSNDU1EQgENjQ
      /k4OgQzDQJbl1QRSn/VlM0PNFRvC0tAWz6DO/yWyO46n8Ss4gweR1pjZWc/GVljLhlm4S3b4
      f8Pf+Wu4QkceaGNTQyA1l+b20BAeX5h8TiEYclPQJY4e7CuvBVugoaGBbDZLMBhkcHCQnp4e
      HA4H6XSa4eFhvF4vL7744rrfzxU0Lg7c5ey1CRTV4MmDbfzaVx+nPuy75yJTFIWlpSVUVSWV
      SpHP57l27Rq6rpPL5ejr6+PJJ5/E6/VuQ6vL47PyArMwjb50AaluOf2K5EBCxkQCyfnJayvt
      lxysbheXXUiAAIz0NXR1HD15AVfkSYJ7fhfJFa2Jfc0Obwuhvv+J7PB3EI1fwx17duMveL2b
      kEJIErHGdixNIeR2kEEm5LS2tVD2wMAAiqIghEBVVSYmJpienuYLX/gCADdv3kRV1XtS52mG
      ybU7c7x7ZYyljMrxvc288cUjNEeDrPx2pmnec5zx8XFyuRzZbJZsNsvY2Bjd3d3kcjlisRij
      o6P09/dz7Nj6OX0qWSh7Mwg9iZr4CUbqAyR0hDoFSCAMBAIQIJb9EyaIYgFuISxguRi3pS+/
      ZmJkruHv/HX8e/8XkBzFT3zmvJXSnqqpQaUQ/t5/jDL2r9ALCTyNX1nfiK4jnFYN4HwAAA4v
      SURBVM7yhkD59BLjdxO0tTaRyihEAy5yhkxjfaTmZoEsIdE/Ns/ZaxPMLmY52BXnuaOdtDWE
      Hjh9CUUBlq7r+P1+dF1fHYqs3PFXuuGNfN2JIZAQAlMZWx6XTy3PwjyPKSSczs1nnRZCYGhJ
      nO7Ilu742zEdKyyd/NgfIrli+NreWHNotjIE2nXPAA/6/oe3pvmzv76B0yFzqKuBz5/ooqMh
      jMNR3t6fWlg5hdIDQFgaevoK6twPkWQPnqavLY/LHZvyRQjBRx99xIEDB3A4HJw5c4aOjg6y
      2SyZTIaWlhZ6enrKHgJu13kVwkSZ+o8IPYm/6+8hyfcGv6VpD48WyLQsbo0lePvCMJpu0tEY
      5hsvHtqSCnO3BIBlZNAWTqMtvIMzdBhPw6vInpb7Pr8ZX6anp/F6vcRiMa5cuYIkSYyOjhKJ
      RFhcXHygjGMttvO8CiFQ576PkbmOv/s3kJ2fTFpYuVz5+wFqDcO0uDhwlx+eG6SlPsg3XjxE
      R2MY0zS3fJJrGSEEVmESdf5HGLkBPPEvEOz7J8jOYEWPMTw8TDAYRJZlIpEI0WiUQCCwGgDZ
      bLZix6sGkiThbfoZVGeE3PB3CPT8JrJ7OZ2zYezelWBF1Xnv6jhnro2zty3Gq6f20BT75Mev
      lbt3pXsAIUyM9BXU+R8hhIan8XVcoWNI8oM3g9RKe3bKhp6+gjL9pwS6/wEObyuWroMkbV8P
      IITgnXfeobe3l1gsxvnz52lububOnTvE43Hi8TgNDQ3U1dWtayOVLfDO5VE+uDnFyb5Wfueb
      zxLyb01XUvMIHcvQMJLnUBfexeFrx9f2S8jejTX0NvfiCh9HcobIjfwr/B2/hkwruN3bFwCF
      QoGWlhYWFhbo6OjAsiyamprQNA0oTl/Ozs7y3HPP3ffdhVSe770/wPDUIi8/3sMffPuFiubW
      MU2TN998k97eXjo7O3n33XeJx+MMDw8Ti8Woq6tj//79xGJlLLVvEmHpCCONqYxhKuNoi2ew
      9EW8TV8juOcfIbvWv0HYbIzT30ug97fJ3fkXePxfwtX41PYFgMfjWZUDT01NIcsyhUKB1tZW
      IpEIoVDonoLPQghGZ5L84NwgmZzKS493860vHsXl3Noway00TaOnpwdFUXC5XLS2trJ//35c
      Lhc+n4/BwUGWlpb4ylc2mFcuEyEshJnH0uYw8yOY+VFMdRphZJFdERy+Dhy+bjytbyA7A7iC
      27fY+DDj8DQR3PePSV//bdT8T2rrGcCyikv4Q9NJ3vpgEFUz+dnPH2B/Zxy5jO5+s1N+nZ2d
      FAoFBgcHOXToEMFgEJfLRSaT4e7duxw/frys9hi6isPpBrF8V8+PYeSHMQsTWFoCkHB4W3H4
      e3D4unB425GcdfcMbUzT5Pr16/T29qLrOpcuXWLPnj2k02n8fj+xWAy3200wuPED8G4ev1fD
      hj53FUvK7WwAWJZA1Q1SWZWJ+TTn+ye5PZ7gUHcDX3umj46mzXX3W965JASmnsXhClJcLV1e
      GRUWAhMsDWHmEWYBYSkII4ewCghTQZh5sIp/9fTVogxYciE7Q8WLfPlil90NJT285nI5BgcH
      0XWdU6dO0d/fz9zcHJOTk/j9fhwOB729vRw9erSq52Q32RBCcOXKFfr6+vB4PFy8eJHOzk6G
      h4epr6+nqakJl6Lgi0arPwQqzuwIFM1gZjHL+GyK6USG2cUsC2kFl1MmFvYXMya3xzja08CL
      j1VOpnu/P9bysr+JMHNY+hKWnkQYSSx9CaEX/+rJCzh8Xcu6GKm4hU9yIOEA2Y3k8CM5vEiy
      D8kZQJI9SA4/srNp+T0/krcbV7APp79r0/46nU5GRkbo6uoinU6jaRoHDx4knU7zwgsvcO3a
      NYaGhh4YAI8SiqIgSRL9/f34fD7m5uZQVRWv18vQ0BC3bt1i3969HGhs3FoPkJiZIqtLdHe0
      YpomimaiqDrTiQyT8xkm59PMLGbRDROv20lLfZDWeJi2eIjm+iD1Yd89sgRTTWDpaZz+9uVX
      ll0TorhfFIp342X9ihDGqn6F5feFmUdL38Dpa0MY6U9d4BmEkUJYavGilhzIjgCSK4LsiiI5
      i39lVwTJGURXpvGEj65u5CiF8fFx3G43jY2NfPTRR/T29jIyMrL60B8MBsvLXMDu3RG2kzZ0
      Xed73/sePT09BAIBrl+/TmtrK5OTk7z00kv09/eTmpri9Z/7ua0FwMTkBAhBW1s7umHwW//m
      x3Q11dFQ56G1PkhHU4TGiJ+A17WaPW4l+xt8kglOkiQsy8Kc+xOMpdM4fN3LR5A++busWhRI
      SJJzOTTk4p1ZgMAJkoRkFbDUcUTwWRyuMMJRvLCdnghCCiA5isOGFfHbp/369L9XMt1ZlnWP
      j8A93//0vy9evIhhGDzxxBN89NFHZDIZkskkPp8PIQSRSITnnnsOWZZXbX3635/1a0VkuDK0
      3OjcbWTL4XCg6/qqPHqt9n7a1nrt/fQw97NteNBvu/I5TdNWNVRrncNS/LMsC6fT+cDfY0Mf
      02msrU6DOiyD7HJqRKfDwf/6d18hHNj8vLzo/FXM1jdwuktf0VzrxH+6kPLK6+XeQTdzp8rn
      87jdbnK5HIZhkMvlcDqdHD9+nGw2y6VLl4qrk2XoZyrVAzgcjpq4ezudzprww/J4QIjKPgRf
      u3aNYDDInj17+OlPf8q+ffsYGBigqakJn89HOBymsfGTHJl37tzh5s2bvPrqq1y6dAlVVWlu
      bmZ6epqlpSWOHTtGd3f3A7OGvffeezzzzDPMzc0xOjpKOBwmHo9z9epVenp6ePrpp8s+YbXS
      3dtDoOrYWFGDVqw+wMqdOJVKsbi4yN69e0kkEsTjcTKZDP39/Vy7dm21S4Ji3sgDBw6spg/x
      eDy88847zMzMIMsy/f393LlzZ8PjFgoF9u/fj6IomKZJR0cH8/Pz3L59m8OHDzM/P8/Zs2cr
      1Uybh4yKzQJJkkQ6nSYUCmGaJleuXCEajZJKpXj++eeZnp5meHh49Y4G0N7ezo0bN4hGo/h8
      PlRV5Y033iCRSOByuZifn8fv33hPbkdHB9euXaOxsZHGxkampqZ45ZVXWFxcXJXsFgqFSjXT
      5mEhFKr8EGin9wOsUCvdrD0Eql0bFR8C2djsKparRD68onkbm41YzuhR0QD49APuZlh5kK6E
      nYfNxlaHQLXWnh23kU4jvN7KBkCl9OlbtbOyaPIw2aglXx4GG9TVVfYh+NOLUVuxAVsPgEr5
      Uis2wD4n1bABVO4hWJIktIJCNqdQyGdRNYPCcv6edCq1bm4b09BJpjPoaoF8QUNXC5iWQFGU
      ko8thEUymcQ0DNKZHJapo+kGSj5LvqCVaoVMKolumKRTaYSwKBRUVCVHJpsv2Rcll0UpaGQz
      6XvaUU57dK1AOpunkM+h6iZqoYBlWSwuJNCM0vLwCMtgKZnG0FWyeQVDUzFMgZLLUlBLTcku
      yGXSqJpR/A0BRSmQTi6STGVKtpHNpFD1FRsCRSlg6CrpTI5S776qkiOnFMhnMximVcwNZZkk
      U+kSLYCpq6QyWbRCnoKqo+QylR0C5fM57s4v4ZIscLrA0IjFYiwtLZIznbTE7k8lqCh57o5P
      4fC7ESbUe3Ss+gMsTIxx8MCBko5raAUW5ueYnJ7BI0MkHkM1ZXySwUJGoW9PCepSyyCdSTE+
      MYHL5cGXr8PQNKJBD3cm53j8+IPT7QHkchkWFxexZA9u1yKGadLb0cxHl/v53DOnSrKRz+eZ
      vjuP0wmS7MJhaTQ2NXJncpaj4WhJNpR8npmJCeaDXoRu0RgEJdDO7MAteg4cwuspoaicEOSy
      aVJTYxhyAO9iEgNBc6yOuzMzROpCJdiwyGbSpCbHEQ4/3lQGwzRxWSqJjFo8ryXczXO5HPOJ
      BZCduFwuNE0j5ndzN5HA6DtBPPDgSzmvKExP3MXpdSKERCTgq+w0aDq5RCzeUBSlAU6HhFLQ
      7snS9lkKuQz+SBSnWE7p53SSVxSccvG7pWDqKrpwEvK7kSQJp8tJPl9MbRiPl1ZFRAiLZDpP
      PFaHJMs4HE40VcEwrZJ+oBWSS0vEG+JIkowkO8AymJqaRlcLKFppGdGyqSR19fFiNy+B0yGT
      0yUCssbcUmmZGFQljzsUxoWEJIHL5SKfz4MkcXdmpiQbAlhKpmiI1yPJMpLDiWUYWLpKS3tp
      Em8hBMlkhoZ4DEmWkR1OTL2AYQlMq/SscivXlrQ8fSlLAn8kimSZJW+WymfSBKMxZIoyy6Vk
      qnLPAEUnF9EtGZ/HgezykE0u4QmEMHWNurq6NcdtSi5DJqcSDvsxLBldyYLTjakqeAJhQiUU
      mTO0AgtLKeoiEVRVx4FJXjOXeyIP0RLuVMIySSQS+INhdE3F53GRzOTwe71YkoO60MaJcFdY
      WphHcnlxCBOPz0dyKUkoEsMpU3Ipz2w6iaILgl4nOD3kUkncPj+GplEXjeKQH/yDq0qOZDpH
      JBJGMywsTcHAidcJDk+gpD3VQggWE/O4fEEsQyXg97GYyhKL1OF0ukq6LwhhsZBI4PEFMQ0N
      v8/DUrKoGFB1k0g4VJKd1NICpuTC7RC4vD5Si0v4AgEMwyIaKU1ins+mySo64aAXCwdKLlPZ
      ALCx2W3YK8E2jzR2ANisz3KdgQdlc56YnqGgqtvkVGWxpRA2G/L+mfeQ3F66m+sJRBuZn5sl
      FgkgeyLUR4KMjE3ygx+/i9Pp4L/51s/vupSUdg9gsz6SxGN7GpHr2nj3zBn6L53jw5EFLl65
      TiRcnBQYGplgLrHIr/zi39h1Fz9UsESSzcOJpSvkDCfZxCQOb4hktkBzfXh1c//s/AKyLNNQ
      X9r6RK1hB4DNI83/DxkxHkhLMmvuAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Map Cross Tab' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Non vs Poto' width='192'>
      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
      /wdOg0JmVCUM1wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Ph_ by Month' width='192'>
      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
      gMLCAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Photo Activity' width='192'>
      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
      z/8HgowGtZ8C0rEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Rating pie' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAQaUlEQVR4nO3daXAb533H8d8eAMELPMSb4mHSlGhKlqVQkuVY1tHUylRVaseuOxkfjWXX
      rWfcZKad9EXf9U07nY4zadM4aRu1M66nURxpHKux5EYjy5Kty9TBUxRJUSQlUgTAAyAAAiSA
      3X36Qpbj2FLEBbB4Fnz+nze2x8DiL5HfxV5YSIwxBkIEJfMegBCeKAAiNAqACI0CIEKjAIjQ
      KAAiNAqACI0CIEKjAIjQKAAiNAqACI0CIEKjAIjQKAAiNAqACI0CIEKjAIjQKAAiNAqACI0C
      IEKjAIjQKAAiNAqACI0CIEKjAIjQKAAiNAqACI0CIEKjAIjQKAAiNAqACI0CIEKjAIjQKAAi
      NAqACI0CIEKjAIjQKAAiNAqACI0CIEKjAIjQKABiytzcHDo6OjA0NHTH/z8zM4NgMAjDMDI8
      WXJU3gOQ7BKPxzE3N4dAIIADBw5g/fr1mJ+fR0lJCXp6elBdXY36+nrk5eVBVVUcOXIEu3bt
      Qnt7O+/R70hijDHeQ5DsEQ6HEYvFMDg4iMXFRbjdbhw/fhw7duz4LIScnByUlZUhEolgbGwM
      ra2tqKmp4T36HVEAJCWapiEUCqGkpASSJPEexzTaBCJJGxgYwP33349oNIrJyUm4XC7E43FE
      IhE0NTWhpKQEsmzv3Ux7T0dsKxgMoqenB5qmYXx8HJ2dnSgqKkI4HMbw8DA6Ojrg9Xp5j3lP
      FABJSjAYxMLCAsbHx1FTU4Py8nKcO3cOTqcTW7duRV5eHjweD+8x74n2AQTGGENcjyOux6Eb
      GhJ6AguJKPKkOIqdTshqPiA5AEmBJLsgyQ7eI6cd7QMIQjd0zEZmMDQ9AF/YC09wAp7QJAIL
      fkTjUST0OBhurQu/vkLDN8r1W0+UVEByQFbzITvLoeTWQ86pgZJbBzW/BZKjBJKkcPyTpYYC
      WKYMZsAfmUW/rw9XvH0YnOqHL+z97Jd8yZgGMA1GfAFGfAba/JXf/D9JheKqg1q4Bqp7HdTC
      h6A43On9g1iMNoGWEcYY5mNhXBj/BKdGTmBoehC6oZlezm+9A5hw9uYDuLz4NHasb8S65kq4
      nPZfv9p/QnJPBjNwdXoQR/oPoWeyCzFtMeMzMAZculmBC5PjON07jhW1E9jaXoA9a55EeUGl
      bc8RUABZzGAG+jzdeO/yu+jzdHOdJZpwoH+6+vZkiDp7cGwohBPDx7Cpfgv2rHkKjaX32S4E
      CiALMcbQ7+3D/ktvYmR2mPc4AIAr09WIJnIAAHLuLOScEABAMzScHTuFc2On8VDtV/Dcxr2o
      cdfaJgQKIIswxjATmcbbnW/hzOjHvMf5DGPA+cmG2/8FtWjky48BQ9fNi+jzdOMP2v4I33zw
      GbgcuZkd9A4ogCyhGzqO9B/Cu70HsZCI8h7ntyxoDlye/vRiNzkO1T1+18dqhoZf9b2D0yMf
      4YVNL2Fz/SNc3w0ogCwwMz+FN079AINTV+79YA6uzlYgEncBAFT3DUjyvY88+aMz+JeT/4TH
      mnfixU2vINeZZ/WYd0QB2BhjDJcmzmPf2R8juDjHe5y76vau/PTfDKhFo6ae+/G1DzE6ew1/
      +dhfo76kMe2z3QtdC2RTmp7A/ktv4gcn/tHWv/xxXUGP71YAsisA2eU3vYyJuRv4u/f/FieH
      P0j3ePdE7wA2FNNi+OmZH+HMmH12dO9mJFCG2YV8AIBaNIJkN+cXtQX8x9k3MBuZwZPrnoEs
      ZWbdTAHYzHwsjB9+9Dr34/pLdclTD0C6tfNbePed36VgzMDB7v0Ix0J4buNeqLL1v54UgI0E
      on68/uHfY3T2Gu9RliShy+jy3Nr8UQsnIKnxtCz31wOHEYnP488eeQ1OxZmWZd4N7QPYxHws
      jO9/+A9Z88sPANeDpZiOFuJux/5TcWrkJP7r3L9BS+JaJjMoABuIaYv40cfft81Z3aW6tfMr
      QcqZg5w7m/blf3TtOA50/gwGs+4WKxQAZ5qewL6zP0HPZBfvUUwxmIQuTx0AQC0agyRZc1Hx
      e5d/icOXD1mybIAC4IoxhgPd+3F69CTvUUzzhN24GS4GpARU93XLXoeB4e3Ot3D+xjlLlk8B
      cNR58yKOWLh2s9IlTz0MJkMpmISsWnv5tcEM/OfZH8MXTv+H7CkATvzRWew7+wZ0Zv6DJ7wZ
      7PbhTwa12NyZ32SFYiH85NQ/I6Gn50jTbRQAB5qh4d9P/yvmFgK8R0nKVKQQ48ESSM4wlNyp
      jL3u0PQADnb/PK3LpAA4OD50FL2e7Nrp/bwe30roTIHqHoMkZ/YmuIcvv4ur04NpWx4FkGGB
      qB/vpHktlkmMfXrxm6RZuvN7NwYz8GbHT6Eb6dl0pAAyiDGGg137EYqFeI+StLnFXAz7K6Dk
      +SA7I1xmGJkdxonhY2lZFgWQQVenB3DyWuaveEynXl8t4roCtZjvGetfdP4Pwoupr0gogAxh
      jOEXXdae1bQaY8CFyQZIjgiUfL73/QzHQjjcfwip3tWHAsiQq9MDuOLt4z1GSkIxFwZnK6G6
      r2d85/dOjg2+j4XEQkrLoAAy5H/73jF/VzabGZipurX54x7jPQoAIJqI4ujA4ZSWQQFkwHX/
      KDonLvAeI2WdnjrIeT5IzjDvUT7z/pVfYTGR/JloCiAD/u/Ke1m/9l9IONA3VQNH8WjSn/qy
      QjgWwrmxU0k/nwKwWFyP4+JEB+8xUjYwU4mowaAUTPIe5UtOj55MemeYArBY58QFzMfss8mQ
      rAuTDVDc15d0y5NMu+ztxUwkuUsyKACLnbp2gvcIKYvrCnqnajJ24Vsyzo2dTup5FICFIvEI
      uic7eY+Rsquz5YjI85CdQd6j3NUn188kdY6FArBQv7cXmpHgPUbKurx1UIvstfP7RaOz15I6
      M0wBWCjbT3wBgGZI6JquhFo4wXuU34mBYcB32fTzKACLMMZwJYkfiN2MBcoQVPyQFPu/k/X7
      zK9wKACLROLzuBEY4z1Gyi566qCYvN8nLwO+ftP7ARSARUZmhrP+5JfBJHQFCpO63ycPE8Fx
      ROPmLtGmACziCdvvhJFZN4IlCDimbL3z+3mMGZia95l6DgVgEU8o+wPona6AUmDvnd8vmgze
      NPV4CsACjDH4Qh7eY6SEMaA7LKftfp+Z4jW54qEALMDA4AtndwBTkUJ4pOy7a4XZd14KwAKM
      MYTS8HE9nrr9RYAr+wKYN/l5awrAAowxLGqpfVKJt855w7L7fVopEjf3BYIUgAU0I5HVn/31
      L+ZinGXnFawJPW7q0mgKwAKLmrX3yrTaQJSBydm183tbTFuEYeJ2kxSABWJajPcIKQkzLWuO
      /X+RZmgw6B2Arxwlh/cIwlJl1dQXb1MAFshz5vMeQVg5qguKpCz58RSABWRZhkNx8B5DSLmO
      XHoH4E2ChBzVxXsMIZn9e6cALCBJEopcxbzHEFJJXqmpx1MAFpAlGVXuat5jCKnGXWvq8RSA
      RaoKKQAeqtw1ph5PAVik2uSaiKRHZWGVqcdTABZZWVzPewThOGQHBWAXDaX3IUelE2KZVF/a
      CKfJv3MKwCJOxYnmslW8xxBKa8UayJK5X2kKwCKSJOGByjW8xxBKW9Va08+hACzUVmn+B0KS
      o8oqWspXm34eBWChlopW5NN1QRnRUt6KfGeB6edRABZSZRUPNzzKewwhbGveaeoaoNsoAIs9
      3PBV3iMse07Fifa6zUk9lwKwWFvVgyjLL+c9xrK2tvqhpDZ/AArAcoqs4NH7tvEeY1nb2fJ4
      Ups/AAWQEbta/xAOxcl7jGWptqgOG1ZuTPr5FEAGlOSVYmvTdt5jLEu7254wffLr8yiADNnT
      9iRUWeU9xrJSll+Ox1JcsVAAGVJdVIstjXRINJ12tz0BNcWPnlIAGfTUum/RBXJpUltUh6+t
      2pXyciiADKpyV+Mba57iPUbWkyQJz298KS0HFiiADNvd9gR9WCZFm+sfwbqa9WlZFgWQYS6H
      C8+2fxtSCkcuRJbryMOz7S8mfdz/i+inwMFXVm7C77Wkvv0qGgkSXtj0MsoLKtK2TAqAA0mS
      8Gz7n6KxtIn3KFlla9N2bGvemdZlUgCc5Dry8Oqj34XLkct7lKxQW1SHb29+JaWTXndCAXBU
      X9KIvZv/Iu0/1OUm15GL17b+lSX3XKW/ec62Nm3HUw99CxKy9H7kFnMqOfjOY99D4wprNhcp
      AM4kScKTD/4xHm/dzXsU21EkBS8+/OdYv7LdstegAGxAlmQ8v3EvXTb9ORIk/MmG57Dj/q9Z
      +jp0dZZNqLKKVx55DYCE06MneY/DlSzJeGb9s9iz5puWv5bEzHyjGLGcbuj4+aW3cLj/Xd6j
      cKHKDry85VVst3jNfxsFYEOMMRzqPYgD3fvBsvjbJs3KUXPw3W1/k9IHXMyiAGzs7Ngp7Dv7
      BhYS2f2dw0tRUVCJ72z7HprLWjL6uhSAjTHG4A1N4ocfv47r/lHe41hmS+NWvLzl1aQ/2J4K
      CiALJPQ4fnbxTRwdOAKG5fPjylFdeH7jXuxseZzbyUAKIEswxtDv68N/d+zD+Nx13uOkbH1t
      O17Y9BKqCmvSdmVnMiiALJPQ4zg6+D5+2f02ooko73FMqyiownMbX0R73WZbXAJCAWSp2cgM
      3ul+G2fGPsqKb6Z3u9x4fPVu7G57Ark2ugCQAshygagfRwcO49jQrxGJz/Me50sqC6vw9dY9
      2Na805ZfIE4BLBPBhTmcGD6Gc2OncSMwxnVnWZUdaClfjZ0tv4/NDV+F08Y3BaMAlhnD0DER
      HMepkZP45PoZTM/7MvK6qqxiZXE9tjZtx8a6LSgvqOC6c7tUFMAyltDj8IQ8GPD1od/bh6sz
      gwhE/WlZtiqrqCisQmtFGx6oWotV5auxIq8cssx/x9YMCkAgCT2OmcgMpsJe3AyOwxvywBf2
      Irg4h4VEFAk9Ac3QYBgGFFmBKqvIcbiQo+RgRX4ZKgurUFO08tY/3bUoyi2BIiu8/1gpoQCW
      gd7eXjidTqxe/ZuvCIrFYp+tjRVFWdKaWTd0JPQEdKZDlRU4FKctDlVaiS6HXgYWFhYwPT0N
      j8eD4uJi+Hw+1NTUoL+/H83NzSgoKEBeXh4GBwfR2NiIlpY7X2+jyErWr9HNWt55CyIej2Pt
      2rWYm5tDIBDA0NAQwuEwamtrEYvFYBgGJiYmMDg4iEgkwntcW6FNICI0egdYBnRdx+LiIhhj
      SCQSAG7tA+i6Dk3ToGka4vE4dF3nPKn90D7AMtDR0QGv14sNGzbgwoULePrpp/HBBx+gtLQU
      Pp8PDocDiUQCq1atQmtra1Ycn88UegdYBlatWoVgMIju7m6EQiFomoaSkhL4/X5MTU3B7Xaj
      qKgI58+fx9TUFO9xbYX2AZYBv9+Pubk5NDU1IRwOwzAMBAIBlJWVwel0gjEGTdPg8/nQ0NAA
      RRHrSM/vQgEQodEmEBEaBUCERgEQoVEARGgUABEaBUCERgEQoVEARGgUABEaBUCERgEQoVEA
      RGgUABEaBUCERgEQoVEARGgUABEaBUCERgEQoVEARGgUABEaBUCERgEQoVEARGgUABEaBUCE
      RgEQoVEARGgUABEaBUCERgEQoVEARGgUABEaBUCERgEQoVEARGgUABEaBUCE9v+vcLwux3p6
      twAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA Positve Cities' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA Type of visit_' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA countries' width='192'>
      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
      mFs7o9reuXAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='SIA countries (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA type' width='192'>
      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
      m/7eTtUA91u8i9yyqdpABmAPUvTojvQFCsUid/r6Nr0ngKuoVP1r7AZfR4qifFIbJFvWrQ1k
      APYgRVHwtbwMSn12dweoVKt83NeLvYXVKCxfEKdOI0Abde8u8rHOIwT8q9cGMgB7lGImMBrO
      1uXYtm3T3ddLpVJZ/8MrqPpD23uYuEYURSEUDNJ19Elak4kVawP5RNgWvPHGG+zfv59EIoGq
      qvT393Py5EmCwSCO41CpVCgUCuzbt4/XX3+d06dPUyqVqFQqmKZJpVJB0zQ6Ozu5cuUKkUiE
      hoYG3nrrLb70pS/R3NyMZVm8++67vPzyyxQKBebn54nFYlQqFWzbpqmpCX/rV7Byl8Gt3bap
      ruvSOzjAQqGw5WOUazQFolYWR4paiUdjDI+mlj2zoL322muv7V7R9qZqtcrNmzexLIvf//73
      JJNJ0uk0U1NTjI6OMjY2xq1bt+js7KS7u5tYLEZbWxt9fX2Mjo7S3NyMbdtMTk6i6zqKopDP
      52lpaeHdd9/F5/MxNTVFf38/5XKZUqnE+fPnmZ+f5/Lly8zPz+P3+2lq2QcKOPMf1+TfJYRg
      cGSEmW3uRJNNPlGzeUC1oigKpmnQ1NgAQlAoLv5oyBpgCw4ePEg8HsdxHJqbmwmFQgghyOVy
      nDhxAlVVuX37Nn6/nyNHjtDS0kIikeDUqVMIIYhGoziOs/TLfm9fYF3XCYfDtLS0YJomTz/9
      NHNzczQ1NVGpVEgkEhw4cAAhBE1NTQCYiVewMh/ilre3f5gQgrHJSSZntr9f726MAG2Uqqp0
      tLcRi0UZHk2hiM128aVHjp2/RbH/j2AbWw7NpGfpHRjY9qZFjqrT++wXcHe5E7wRjuPIGqDe
      ZmZmmJ6eRtd1ZmZmeOGFF7hw4QKBQIB0Oo3P58M0TVpbW9m3b9+WzqFFTmAk/gBr5u0tfX9u
      Pk/f0FBNduyyfAHcGmxcsRN0TZcBqLdEIsH09DSJRAL77iZ3ra2tKIqCYRhUq1VSqRSpVIrG
      xkaCW3goXFEU/O1/E2ehD7c0vKnvFksl7vT149Zo7dFqIPJIjABtxKnGM3IYtN4mJibo7e3l
      +vXrFItFcrkcN27cIJ/P093dTTKZ5FOf+tSWLvz7KapJ4NDfB3XjsyOr1uJYv2Vb6394g8p1
      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
    </thumbnail>
    <thumbnail height='192' name='Seasonality of Traffic by Month' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 15' width='192'>
      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
    </thumbnail>
    <thumbnail height='79' name='Sheet 16' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 20' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Stat' width='192'>
      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
      YnG206ogzTxU8kirvPi/WUCaRTALSLMAZglZyYFdQVolRDmPVsmBw4nePoDeuQM9vB09tAXN
      H6l5xrRZ2uz11luXdwApJZYtKFUs5pJ5ovEsMwtZ5hJ5FjJFhJR4XAZd7V42dQYZ7G3n8O5N
      DPSE7lttv7jowlr8IltlZCmDLMSRxRSylEIUEjd/ppRGlHNoUoCug6aD5lhsjjicYLjRnL7F
      TEanF1w+NKd/8Wd/N7rLC4Z3sUPqcKM53diaC8MfbsrJp2ZiVXeA2MwURWEw2Ne7JncAiU6h
      VGE2kWNmIcd0PEs8XSCWzKNp4HM7iYT89EeCdHf46QkH6Gr3LTlyY5kVHBrALcW9WfTbc0+k
      Vf7tMcu8bleK6HYJmY8ji0lkKYUsJJCVHLKYArMAugG6YzGxy9OG5guje8NonnY0XyeaN4Tm
      bgNPO8LwYbhWd1e6rbxNUsM2u96qDDA5NQVS0NfXj2VZWJaFruuI61sSOBwObNu+4+dbj7mx
      raKU8uY4u5SSU9di/Pz4CD63g642Dz1hPz0hHz3hAJFQgBupNne7xg1dXdexLv8c/do/Abfc
      AW4Z6ZG6C41Fe0jdiaZpi7W4w3Xz51tfF5qB7g4gPB3gbscR6ETzhJCuALq3A83lv1kmTdNu
      K+9S78+tLPf+LPdeLXWNSqWCYRir+gxu1RVCYBjGPctR7TWEEDf1f/f3pa5xg+X0b31/livD
      UvqrMsDU+AglYbBz25am6QMoPaVXC6uKoH9w+2pOVygajto6TNHSKAMoWhplAEVLowygaGmU
      ARQtTV1ngn93zHY1SCmVntJbc726GqCeC0ZuTFooPaW3lnp1S4a7dQZO6Sm99aJXtz6ApmmU
      iwXyhRLFfJaKaZPNpLGFTSqdqeoRqqVCnkKxTD6XwRKSYrGIFDbpTHZFMRULOQqlCrlsZjFD
      tFhECkGxVL73yUtQyGcplk2ymTRCLuoJ27xevlrVJPlchlLFIpNOI4FisYRZLpHK5Ki9VpLk
      s2nK5g09SbFYgutx1o4kl0lTMS0y1z+/YqlMpVwkkUqvSC+bTmFa9nU9QalUxrYqpLO52tWE
      TTKVxjIrZPMFLLOMaVkkFuJk89WXt65NoEIhz1w8iUOTaJqFZbspZC9jGDo9Ow7S03b3BSeF
      fI75hQXQnTidCUzTIhxwk87nkc4HCHlrS7XI57IkEgmE7sblTGDZNoObe5iZT7B9cEvN5cvn
      sqSSY1i6D7czhSUE/T2dzEan8Pr34jZqqIHkol4mNUZFD+BJpLClZHNnG8MjEwwNDWHUkrkq
      JblshvTUBLbDhzedxRI2fZ1tnLkyyaOHDtZWWCHIZtOkJifQDS/eXB7LMqFSwBUIE651/15h
      kcmmmZicxOl04yuEMM0ydiGDuy1Ce7C2J1mWS0Vi0ShzLgPNlkTaXRRdETx2hVi8QtBf3W4U
      dR0FSqeSdHZFFtN4AU3X6ejqRpd2VUsMb5yvafriP2zKFWvFKczpVJKuSNeilu4AYWGjY5ZL
      2CvoMKWSSSKRxfh03YG0K+QyaVz+EM4a06AkkmQyRSTShabr6A4DYZWpWItJW7XeAqSUJFNZ
      urrC6Nqinl0pMRWdpZzPYtV4i5JSkErniHR2oOkausPALJfw+QNEo9HagruhlynQFW5H03Uc
      hkGlVERImJudpdZPwywX0D0+3A4HuqZhGE6KxRKWJejv661ap259AIB0cgEbA7dTw3D7KeUz
      +AMBMtkCHaH2e27VmErEkboLpy5xebykkkn8be2YlQqh9uW20Vue5MI8muHBgY3b6yWVTOHx
      eikWS4S7unDWuHtbIh7D4fKhSQuP10symcLj8VAqV+jq6sJRg1GllCQW5nG6/Ui7gs/nJZFM
      4/P5MG1JR3tbNVtb3qInWIjHcXsD2FYFn9dNMpWhozOCJm2cztoWwEhhE4/H8frbsMwyXo+L
      VDpHMODHFNAerG0x/A09X6ANs1LG43aSzhYItQcplS3a22q7A1RKBZLpHKFQG2Vzcc1FRei0
      B/01lbWuBlAo1htqIkzR0igDKOqLFOTzecqV5bc+t2wb27IQQmDbS7X+JekVjTQtTyqVRCzR
      2FmXa4IVTYyw+MXPfspDjzyG7nBjFRbwtUXw+92UigXyFYhOj7EtEuTM8Cz7DxygVKrgd1TQ
      ve2Usnn6B7u5fPUaD+zcCZrkg/fPMPTIg0izgtfjYjY6Tf/WbUxMzuDWTZw6nB5N8+DWEIVM
      mqQM0uuX2FaJmayTgbATj8dgNlVmz9bbO8jKAIr64nCxZcsAXjtB1Opm/tJ5TPwk82WCXkEw
      MoDHgL4d+/h4dI6x8yfJ60E8ZFlIZujevIe+HjdOdwfv/eonPPD4l/GFehm/dpGpqRl6gjp2
      ex/v/K8f8bmvfonz7/8SKZ2ENu1mamwYwx0g3NPL5fPHKesedj7wIOOjFxh4YC/p3AJwuwFU
      J1hRd3LZDC5Dx3Z4mY+O0dbRQ7mcJ+BxMpssEAm30RZsI5PN4HbAeDRBwK1heHz4fAH8Xicn
      T59jS38fkZ5uZibG8bcHsW0w3H7iMxP0bRlgcnIWl0MS7AiTTaWxzSKdvf2kkkmkWaatM7I4
      +VYuYplF2nofYFP49tErZQBFS/P/AfmUM1DF/a+ZAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='X-SIA Type of visit' width='192'>
      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
      /H/jk4Ze1/zQpwAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
