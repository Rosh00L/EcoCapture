<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1211.0901                               -->
<workbook original-version='18.1' source-build='2024.3.2 (20243.24.1211.0901)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <CascadingFiltersHamburgerUI />
    <_.fcp.IndividualControlFormatting.true...IndividualControlFormatting />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
        <calculation class='tableau' formula='2020.' />
      </column>
    </datasource>
    <datasource caption='v_countrydate+ (ecocapture)' inline='true' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='mysql.040164612je0re1ch3d4c10oumvj'>
            <connection class='mysql' dbname='ecocapture' odbc-native-protocol='' one-time-sql='' port='3306' server='localhost' source-charset='' username='root' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
        </relation>
        <cols>
          <map key='[City]' value='[v_photovisit_rating].[City]' />
          <map key='[CountryCount]' value='[v_frqcountry].[CountryCount]' />
          <map key='[InputID (v_photovisit_rating)]' value='[v_photovisit_rating].[InputID]' />
          <map key='[InputID]' value='[v_photographyvsnonall].[InputID]' />
          <map key='[Photography (v_frqcountry)]' value='[v_frqcountry].[Photography]' />
          <map key='[Photography]' value='[v_photographyvsnonall].[Photography]' />
          <map key='[Travel_Date]' value='[v_countrydate].[Travel_Date]' />
          <map key='[Travel_Month]' value='[v_countrydate].[Travel_Month]' />
          <map key='[Travel_Year (v_frqcountry)]' value='[v_frqcountry].[Travel_Year]' />
          <map key='[Travel_Year (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Travel_Year]' />
          <map key='[Travel_Year (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_Year]' />
          <map key='[Travel_Year]' value='[v_countrydate].[Travel_Year]' />
          <map key='[Travel_month (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_month]' />
          <map key='[Travel_month]' value='[v_photographyvsnonall].[Travel_month]' />
          <map key='[Traveller_Country (v_frqcountry)]' value='[v_frqcountry].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_Country]' />
          <map key='[Traveller_Country]' value='[v_countrydate].[Traveller_Country]' />
          <map key='[Traveller_ID (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_ID]' />
          <map key='[Traveller_ID (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_ID]' />
          <map key='[Traveller_ID]' value='[v_countrydate].[Traveller_ID]' />
          <map key='[activity]' value='[v_photovisit_rating].[activity]' />
          <map key='[inputID]' value='[v_countrydate].[inputID]' />
          <map key='[location_Type (v_photographyvsnonall)]' value='[v_photographyvsnonall].[location_Type]' />
          <map key='[location_Type]' value='[v_photovisit_rating].[location_Type]' />
          <map key='[month (v_photographyvsnonall)]' value='[v_photographyvsnonall].[month]' />
          <map key='[month (v_photovisit_rating)]' value='[v_photovisit_rating].[month]' />
          <map key='[month]' value='[v_countrydate].[month]' />
          <map key='[rating (v_photographyvsnonall)]' value='[v_photographyvsnonall].[rating]' />
          <map key='[rating]' value='[v_photovisit_rating].[rating]' />
          <map key='[sentiment_comments (v_frqcountry)]' value='[v_frqcountry].[sentiment_comments]' />
          <map key='[sentiment_comments (v_photographyvsnonall)]' value='[v_photographyvsnonall].[sentiment_comments]' />
          <map key='[sentiment_comments]' value='[v_photovisit_rating].[sentiment_comments]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>inputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[inputID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>inputID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Travel_Date]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Date</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Month</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CountryCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CountryCount]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>CountryCount</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>activity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[activity]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>activity</remote-alias>
            <ordinal>28</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>18</width>
            <contains-null>false</contains-null>
            <collation charset='296' flag='3' name='LROOT_S1' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>29</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>30</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>31</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>33</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>36</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Z-scor' datatype='real' name='[Calculation_3191363324673548296]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(SUM([rating (v_photographyvsnonall)])-WINDOW_AVG(SUM([rating (v_photographyvsnonall)])))/WINDOW_STDEV(SUM([rating (v_photographyvsnonall)]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='City1' datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
      <column caption='InputID (v photovisit rating)' datatype='integer' name='[InputID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Input ID1' datatype='integer' name='[InputID]' role='dimension' type='ordinal' />
      <column caption='Photography (v frqcountry)' datatype='string' name='[Photography (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
          <alias key='&quot;photography&quot;' value='Photography Holiday' />
        </aliases>
      </column>
      <column caption='Travel Date' datatype='string' name='[Travel_Date]' role='dimension' type='nominal' />
      <column caption='Travel Month' datatype='integer' name='[Travel_Month]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photovisit rating)' datatype='integer' name='[Travel_Year (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel Year' datatype='integer' name='[Travel_Year]' role='dimension' type='quantitative' />
      <column caption='Travel month (v photovisit rating)' datatype='integer' name='[Travel_month (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel month' datatype='integer' name='[Travel_month]' role='dimension' type='quantitative' />
      <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Traveller Country' datatype='string' name='[Traveller_Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
          <semantic-value key='&quot;Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Austria&quot;' value='&quot;Austria&quot;' />
          <semantic-value key='&quot;Bahrain&quot;' value='&quot;Bahrain&quot;' />
          <semantic-value key='&quot;Bangladesh&quot;' value='&quot;Bangladesh&quot;' />
          <semantic-value key='&quot;Belarus&quot;' value='&quot;Belarus&quot;' />
          <semantic-value key='&quot;Belgium&quot;' value='&quot;Belgium&quot;' />
          <semantic-value key='&quot;Brazil&quot;' value='&quot;Brazil&quot;' />
          <semantic-value key='&quot;Bulgaria&quot;' value='&quot;Bulgaria&quot;' />
          <semantic-value key='&quot;Cambodia&quot;' value='&quot;Cambodia&quot;' />
          <semantic-value key='&quot;Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Croatia&quot;' value='&quot;Croatia&quot;' />
          <semantic-value key='&quot;Cyprus&quot;' value='&quot;Cyprus&quot;' />
          <semantic-value key='&quot;Czech Republic&quot;' value='&quot;Czechia&quot;' />
          <semantic-value key='&quot;Denmark&quot;' value='&quot;Denmark&quot;' />
          <semantic-value key='&quot;Egypt&quot;' value='&quot;Egypt&quot;' />
          <semantic-value key='&quot;Ethiopia&quot;' value='&quot;Ethiopia&quot;' />
          <semantic-value key='&quot;Finland&quot;' value='&quot;Finland&quot;' />
          <semantic-value key='&quot;France&quot;' value='&quot;France&quot;' />
          <semantic-value key='&quot;Germany&quot;' value='&quot;Germany&quot;' />
          <semantic-value key='&quot;Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;Hong Kong&quot;' value='&quot;Hong Kong&quot;' />
          <semantic-value key='&quot;Hungary&quot;' value='&quot;Hungary&quot;' />
          <semantic-value key='&quot;India&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Ireland&quot;' value='&quot;Ireland&quot;' />
          <semantic-value key='&quot;Jordan&quot;' value='&quot;Jordan&quot;' />
          <semantic-value key='&quot;Kuwait&quot;' value='&quot;Kuwait&quot;' />
          <semantic-value key='&quot;Lebanon&quot;' value='&quot;Lebanon&quot;' />
          <semantic-value key='&quot;Malaysia&quot;' value='&quot;Malaysia&quot;' />
          <semantic-value key='&quot;Malta&quot;' value='&quot;Malta&quot;' />
          <semantic-value key='&quot;Qatar&quot;' value='&quot;Qatar&quot;' />
          <semantic-value key='&quot;Romania&quot;' value='&quot;Romania&quot;' />
          <semantic-value key='&quot;United States&quot;' value='&quot;USA&quot;' />
        </semantic-values>
      </column>
      <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID' datatype='integer' name='[Traveller_ID]' role='dimension' type='ordinal' />
      <column caption='v_countrydate' datatype='table' name='[__tableau_internal_object_id__].[v_countrydate_98771871190540D39E6CEF22D122B18C]' role='measure' type='quantitative' />
      <column caption='v_frqcountry' datatype='table' name='[__tableau_internal_object_id__].[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]' role='measure' type='quantitative' />
      <column caption='v_photographyvsnonall' datatype='table' name='[__tableau_internal_object_id__].[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]' role='measure' type='quantitative' />
      <column caption='v_photovisit_rating' datatype='table' name='[__tableau_internal_object_id__].[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]' role='measure' type='quantitative' />
      <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal' />
      <column caption='Input ID' datatype='integer' name='[inputID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
      <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='Month (V Photovisit Rating)' datatype='string' name='[month (v_photovisit_rating)]' role='dimension' type='nominal' />
      <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
      <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
      <column datatype='string' name='[sentiment_comments (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
      <column-instance column='[CountryCount]' derivation='Count' name='[cnt:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Photography]' derivation='Count' name='[cnt:Photography:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
      <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryCount]' derivation='CountD' name='[ctd:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Sum' name='[cum:sum:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[CountryCount]' derivation='None' name='[none:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country]' derivation='None' name='[none:Traveller_Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
      <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Photography]' derivation='Count' name='[pcto:cnt:Photography:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rating]' derivation='Sum' name='[sum:rating:ok]' pivot='key' type='ordinal' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[ctd:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:sum:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pays-Bas&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niederlande&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Reunion Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Beruwala&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Polonnaruwa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Katukitula&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nuwara Eliya&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nilaveli&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sigiriya&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Colombo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Galle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tissamaharama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ampara&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Deniyaya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kalutara&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ahangama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Koslanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ella&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Weligatta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arugam Bay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peradeniya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kalametiya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trincomalee&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Haputale&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Unawatuna&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kalkudah&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Habarana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saliyapura&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Anuradhapura&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bentota&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pinnawala&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kandy&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mirissa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hikkaduwa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jaffna&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Embilipitiya&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Pussellawa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ambalangoda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Negombo&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[sum:rating:ok]' type='palette'>
            <map to='#499894'>
              <bucket>12</bucket>
            </map>
            <map to='#499894'>
              <bucket>51</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>2</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>30</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>207</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>6249</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>8</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>41</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>1977</bucket>
            </map>
            <map to='#79706e'>
              <bucket>16</bucket>
            </map>
            <map to='#79706e'>
              <bucket>72</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>13</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>52</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>9</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>44</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>24</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>164</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>3</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>34</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>477</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>21</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>114</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>10</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>45</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>18</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>77</bucket>
            </map>
            <map to='#d37295'>
              <bucket>19</bucket>
            </map>
            <map to='#d37295'>
              <bucket>79</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>22</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>126</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>27</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>194</bucket>
            </map>
            <map to='#e15759'>
              <bucket>14</bucket>
            </map>
            <map to='#e15759'>
              <bucket>60</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>11</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>48</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>4</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>35</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>683</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>20</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>93</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>15</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>61</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>38</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>691</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location_Type (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Religious Sites&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Beaches&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Historic Sites&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waterfalls&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Museums&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bodies of Water&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;National Parks&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zoological Gardens&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nature &amp; Wildlife Areas&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Farms&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gardens&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:activity:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Beach_Water_Sports&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Relaxing&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Historical_Sites&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;wildlife_nature&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Romantic_holiday&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hiking_climbing&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Religious&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Biking_cycling&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Sightseeing&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:sentiment_comments:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Negative&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Positive&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Neutral&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Photography:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;No photography&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;photography&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_frqcountry):nk]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;France&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>4</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <object-graph>
        <objects>
          <object caption='v_countrydate' id='v_countrydate_98771871190540D39E6CEF22D122B18C'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
            </properties>
          </object>
          <object caption='v_frqcountry' id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
            </properties>
          </object>
          <object caption='v_photographyvsnonall' id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
            </properties>
          </object>
          <object caption='v_photovisit_rating' id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_frqcountry)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID (v_photovisit_rating)]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_2075C5A994FF4C969707987DA2B9EC36]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Frq city' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Frq city' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action2_B85DF04D49BF485CA7C60155D3FFA2F9]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 3' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Dashboard 3' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='5* Cities'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='City1' datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{8AE6B6A8-396E-4D3F-B028-7BC3FEFD306B}' />
    </worksheet>
    <worksheet name='Frq city'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([CountryCount])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_frqcountry):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='font-size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='8' />
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</cols>
      </table>
      <simple-id uuid='{93E7BE5A-2D49-47E4-89D8-19A9C636E294}' />
    </worksheet>
    <worksheet name='Line Chart Forcasting'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
              <calculation class='tableau' formula='2020.' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
              </aliases>
            </column>
            <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' forecast-column-base='[cnt:Traveller_ID (v_photographyvsnonall):qk]' forecast-column-type='forecast-value' name='[fVal:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_photographyvsnonall)]' derivation='None' name='[none:Travel_Year (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='vertical-align' id='refline0' value='top' />
            <format attr='color' id='refline0' value='#ff0000' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Forecast Indicator:nk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label='Covid 19' label-type='custom' probability='95' scope='per-table' value-column='[Parameters].[Parameter 1]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[fVal:cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='auto-season' range-type='auto' show-prediction-bands='true' />
      </table>
      <simple-id uuid='{87A7AAF9-8AA3-4318-BFA5-BB2477C400F5}' />
    </worksheet>
    <worksheet name='Map'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([activity])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]' field-type='quantitative' max='33334698.353073195' min='-29527072.347450349' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]' field-type='quantitative' max='18569227.248736389' min='-13131064.362785239' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{DB828CB9-B2E3-4F74-A932-614B90B54ACE}' />
    </worksheet>
    <worksheet name='Non vs Poto'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='height-header' value='17' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</cols>
      </table>
      <simple-id uuid='{6A50E07A-6C64-4E2D-A8D6-C7B847FDFC3F}' />
    </worksheet>
    <worksheet name='Photo Activity'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='65' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='-90' />
          </style-rule>
          <_.fcp.IndividualControlFormatting.true...style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' id='legend-color' value='center' />
          </_.fcp.IndividualControlFormatting.true...style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</cols>
      </table>
      <simple-id uuid='{8ACD1209-7334-4E56-857C-B5BB9F8D0C52}' />
    </worksheet>
    <worksheet name='Rating pie'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal' />
            <column-instance column='[rating]' derivation='Count' name='[cnt:rating:qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:rating:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7AB4EE68-1BAC-4E59-B2E4-2B1F6D160702}' />
    </worksheet>
    <worksheet name='SIA'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{2E56FC8B-EDFB-414D-AB93-5A9226D14142}' />
    </worksheet>
    <worksheet name='SIA Positve Cities'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='City1' datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{AA5E5BF6-9CC4-48A1-A971-6D7CB28B6C6D}' />
    </worksheet>
    <worksheet name='SIA Type of visit'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Beaches&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Bodies of Water&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Farms&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Gardens&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Historic Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Museums&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;National Parks&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Nature &amp; Wildlife Areas&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Religious Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Waterfalls&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Zoological Gardens&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{EF528593-29D6-41CC-B9C9-46FD7FABCCC7}' />
    </worksheet>
    <worksheet name='SIA countries'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Photography]' derivation='Count' name='[cnt:Photography:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='35' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([rating (v_photographyvsnonall)])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='%null%' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;England&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#f2eada</color>
                <color>#f3e3c3</color>
                <color>#f5dcab</color>
                <color>#f6d593</color>
                <color>#f8ce7c</color>
                <color>#f9c763</color>
                <color>#fac04b</color>
                <color>#fcb832</color>
                <color>#fdb119</color>
                <color>#ffaa00</color>
              </color-palette>
            </encoding>
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <lod column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]' />
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</cols>
      </table>
      <simple-id uuid='{4DE53B2F-6305-4D8B-BC96-67ABFB2EFBDE}' />
    </worksheet>
    <worksheet name='SIA type'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
              </aliases>
            </column>
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' user:ui-domain='cascading' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{38D1FCF9-5FD7-4A6E-83D8-A3BD7B8DFDAA}' />
    </worksheet>
    <worksheet name='Sheet 15'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='180' />
                <format attr='maxwidth' value='180' />
                <format attr='minheight' value='622' />
                <format attr='maxheight' value='622' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</cols>
      </table>
      <simple-id uuid='{AEF26B1E-1002-4FD2-BDF8-B3507923DA6F}' />
    </worksheet>
    <worksheet name='Stat'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
              </aliases>
            </column>
            <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Avg' name='[avg:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_photographyvsnonall)]' derivation='None' name='[none:Travel_Year (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]' value='88' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]' field-type='quantitative' max='6780.9361097560977' min='0.0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='wrap' data-class='subtotal' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]' value='off' />
            <format attr='vertical-align' data-class='subtotal' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]' value='top' />
            <format attr='text-align' data-class='subtotal' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]' value='left' />
            <format attr='text-orientation' data-class='subtotal' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]' value='90' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]' value='0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</cols>
      </table>
      <simple-id uuid='{B4F9E845-590C-4317-AE30-26D0E4BFAC9D}' />
    </worksheet>
    <worksheet name='visit buy month'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography1' datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non Photography Holiday' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[month (v_photographyvsnonall)]' derivation='None' name='[none:month (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' user:ui-domain='cascading' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='gridline'>
            <format attr='stroke-color' scope='cols' value='#f9a655' />
            <format attr='line-pattern-only' scope='cols' value='solid' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</cols>
      </table>
      <simple-id uuid='{926ADA61-A842-4E77-9E74-95CFABBF94A5}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='86414' x='584' y='967'>
              <zone h='49031' id='48' name='Map' w='51717' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49035' id='56' name='Photo Activity' w='51717' x='584' y='49998'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='60' name='Line Chart Forcasting' w='34697' x='52301' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='79' name='Rating pie' w='34697' x='52301' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='170' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='12418' x='86998' y='967'>
              <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='12817' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='20071'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='24909' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='47398'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='72307'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1500' minheight='1500' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='82' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98066' id='81' param='vert' type-v2='layout-flow' w='98832' x='584' y='967'>
                <zone fixed-size='280' h='49031' id='48' is-fixed='true' name='Map' w='51717' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='12817' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='20071'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='60' is-fixed='true' name='Line Chart Forcasting' w='34697' x='52301' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49035' id='56' is-fixed='true' name='Photo Activity' w='51717' x='584' y='49998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='24909' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='47398'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='79' is-fixed='true' name='Rating pie' w='34697' x='52301' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='72307'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{8CCA8090-640E-4B2E-82F7-02AE726BECC5}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='87948' x='584' y='967'>
              <zone h='38751' id='16' name='SIA Type of visit' w='64792' x='23740' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='59315' id='55' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='38751' id='56' name='SIA' w='23156' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='59315' id='59' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='149' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='10884' x='88532' y='967'>
              <zone h='2660' id='17' name='SIA Type of visit' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='10884' x='88532' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='2660' id='18' name='SIA Type of visit' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:City:qk]' type-v2='size' w='10884' x='88532' y='3627'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='6287'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='16686'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1450' minheight='1450' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='79' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98066' id='78' param='vert' type-v2='layout-flow' w='98832' x='584' y='967'>
                <zone fixed-size='280' h='38751' id='56' is-fixed='true' name='SIA' w='23156' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='6287'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='16686'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='38751' id='16' is-fixed='true' name='SIA Type of visit' w='64792' x='23740' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2660' id='17' name='SIA Type of visit' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='10884' x='88532' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2660' id='18' name='SIA Type of visit' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:City:qk]' type-v2='size' w='10884' x='88532' y='3627'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='55' is-fixed='true' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='59' is-fixed='true' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{148B74DC-060A-48C0-8A9E-8CA4F401E31E}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 3'>
      <style />
      <size maxheight='800' maxwidth='1400' minheight='800' minwidth='1400' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='9' param='horz' type-v2='layout-flow' w='98858' x='571' y='1000'>
            <zone h='98000' id='7' type-v2='layout-basic' w='87429' x='571' y='1000'>
              <zone h='50659' id='3' name='visit buy month' w='61857' x='26143' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='50659' id='5' name='Non vs Poto' w='25572' x='571' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='47341' id='32' name='SIA countries' w='37214' x='50786' y='51659'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='47341' id='34' name='Frq city' w='50215' x='571' y='51659'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='8' is-fixed='true' param='vert' type-v2='layout-flow' w='11429' x='88000' y='1000'>
              <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='8125' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]' type-v2='color' w='11429' x='88000' y='7500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='28000' id='35' name='Frq city' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' type-v2='color' w='11429' x='88000' y='15625'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1400' minheight='1400' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='37' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='36' param='vert' type-v2='layout-flow' w='98858' x='571' y='1000'>
                <zone fixed-size='280' h='50659' id='5' is-fixed='true' name='Non vs Poto' w='25572' x='571' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='50659' id='3' is-fixed='true' name='visit buy month' w='61857' x='26143' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47341' id='34' is-fixed='true' name='Frq city' w='50215' x='571' y='51659'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='28000' id='35' name='Frq city' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' type-v2='color' w='11429' x='88000' y='15625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47341' id='32' is-fixed='true' name='SIA countries' w='37214' x='50786' y='51659'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8125' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]' type-v2='color' w='11429' x='88000' y='7500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{1A80F195-FFE0-4D70-9B23-D0F132D84CF2}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Line Chart Forcasting'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Photo Activity'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Rating pie'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{46844394-C8DC-47C5-8AB6-F61F276BEB8A}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='SIA'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Positve Cities'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Type of visit'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='16' />
      <simple-id uuid='{79E10B69-7BD1-4F8B-8BCB-3874D47C0A61}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Frq city'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Non vs Poto'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA countries'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='visit buy month'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{91E32204-93F8-4CFF-AAD0-18D32233E187}' />
    </window>
    <window class='worksheet' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{352790A8-0E1E-4075-9D85-3F7C13DD202D}' />
    </window>
    <window class='worksheet' name='Line Chart Forcasting'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='type_in' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Forecast Indicator:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7E4C7457-FEF1-485D-A6DB-FB8B09F1C85B}' />
    </window>
    <window class='worksheet' name='Photo Activity'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{614D0002-C6CC-45DD-B3C3-55C172326677}' />
    </window>
    <window class='worksheet' name='Rating pie'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:InputID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F11A9256-BDCD-4620-9D17-A973F9712E45}' />
    </window>
    <window class='worksheet' name='Non vs Poto'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card AVG='true' KURTOSIS='false' MAX='true' MEDIAN='true' MIN='true' QUART1='false' QUART3='false' SKEWNESS='false' STDEV='false' SUM='true' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5B892FE8-53E8-4FB3-909E-CFD8384703C4}' />
    </window>
    <window class='worksheet' name='SIA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CDDD4D80-DDFD-40AB-ABC9-B13F899C78B8}' />
    </window>
    <window class='worksheet' name='SIA Positve Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B208DBA9-1D01-42F0-91B9-4290B0E2FB9D}' />
    </window>
    <window class='worksheet' name='visit buy month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='filter' />
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_month:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photography_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5ED166A1-4843-4683-888B-4722DFCC388E}' />
    </window>
    <window class='worksheet' name='SIA Type of visit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{396FB502-1C76-4CC7-B7CB-7EF9A5E14013}' />
    </window>
    <window class='worksheet' name='Stat'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Calculation_3191363324667273216:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[usr:Calculation_3191363324668567554:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{95C1AC77-0FF8-46EF-A265-09594A86B84D}' />
    </window>
    <window class='worksheet' name='5* Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{90413D93-B792-4F33-BBC1-794A4C561A46}' />
    </window>
    <window class='worksheet' name='SIA countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6C880C5F-A5AF-4AAF-85F2-6516170E3278}' />
    </window>
    <window class='worksheet' name='SIA type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C46270CD-548A-4EC4-8D4F-A646CCA311AA}' />
    </window>
    <window class='worksheet' name='Frq city'>
      <cards>
        <edge name='left'>
          <strip size='194'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='150'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C85E0752-E638-4646-8B76-A812B7EC5E38}' />
    </window>
    <window class='worksheet' name='Sheet 15'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1BB2767F-55E3-4617-AF12-45C1E0C45ED8}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='5* Cities' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      KekRAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
      5XI7ks5h4/8Hb6pPMGuXN48AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Frq city' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Line Chart Forcasting' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2dd3Bd2XnYf7e8/h7wADxUohIA65JLbiF3V6vVFvXNyPLYa9mJrGTsTJzY
      cWJN7EkZzyTxZMZJ5Cjj2BNnkpHtREkUWbYky5YsyytpV9u1nctlBdF7eb3devIHSBAXJHrH
      O78ZDvEB97vnu++d795zzv2+7yhCCIFEUqGou22ARLKbbJkDOI6zKX3btndFVwixa21vVn+z
      173Z72yj7KbdzpUrHlk+ASSVhRBw6RK88QYA+lp0HMug/0YfoVg16UyRhtooM6kC8aiPkq3S
      09W+rTZLJFuF6O6GCxfgzBn41rfW5gCqrhONVuHTVVzXJl0waYwFSAqFkC5wXRfXddnMfNp1
      3Q0/GjejW+lt78YayK7a3d+PW12N8tZbEI+vzQGsUoG5dJZEog6/rlETDTKbLVET0Sk5Oqqq
      IoRA07SNGcX8uFDX12TOlure+iB3o+3N6m/2uhVF2dR3tlF2025HCNTe3gVZ2aplUMdx9q0D
      OI5TkQ7guu6+dIDN2G0bBnogsCDLSbCkolCGhz2ydABJZbFk7iEdQLLjfPl77/HapdFdmYCL
      zk6PLB1AsqOMTmcZn83x2qUx/tu33qRsbO5F4npRxsc9snQAyY7y5y9d5W890suv/tQ5jnck
      +Hdf/hHXRuZ2zgDT9IgbX76QSNZJOl9mOlXgREc9iqLw+JlOjrUn+O/fepOzR5r55PkeNG17
      78mio8MjyyeAZMf4q1ev89T9XSjK7d811Ub5F599lFzR4He++grJXGlbbVAmJz2ydADJjmCY
      Nu/emOKRe9ru+Jtf1/jbHz7FJx/q4YtffYU3r05s3wTZMDyiHAJJdoQXLgzz6Ol2dE3Ftt27
      HnPqcCNtDdV86dtv8/7AND/71D34fVv7ok60eR1QPgEk247junz3x308ebZr1WPj0SCf/5mH
      aKiJ8G/++DnGZrJbaosyO+uRpQNItp23rk1y6nAD4aBvTcerisLHz/fwyz/xIL//jdf53us3
      tm5IVPLOMaQDSLYVIQTffuUaTz98ZN26rQ1V/NYvPM7YbI4v/smrFMvW5u1pbfXI0gEk28r1
      0STxaJBEdXhD+j5d4+99/F6eONvJv/6j53h/YGZT9ijJpEeWk2DJtiGE4DuvXudTHzi6qfMo
      isJ9R5rpao7zX7/5Otli111Xk9ZEsegR5RNAsm1MpQqk82W6muNbcr6aWIhf+clz/OCtgY2f
      pKXFI0oHkGwbf3Xz7q8sfvO1SWJhP7misfFJcSbjEaUDSLaFXNHgxniKs71NW3peVVFoqo0w
      utHl0ULBe74tsEkiuYPvvd7P42c6t/Tuf4vullr6xlIbU25u9ojSASRbjmk5vHl1nA/euz3V
      Qk50Jrg2Mrv6gXcjn/eI6yiLcoNwVZxUKkNDoobZdIGaiE7R0ejuaF39JJKK4eX3RzjT20TA
      tz2LjIcSVQxMpDemnMt5xDWWRfERi1VRLJY51JpgZCRNS/xmWRTVlWVR9nHbWx105riC77/R
      z+efOb+sbZu1W1Mh6NfJF8sE/etzMre+HrGo7TWWRckzPZemsaGOsbE5mhvizKQLxCM6JVuW
      RdmvVSG2oyzKpRtTdDbHqa2OLHvMVtjd0RRneDrHic76dek7hoG2qO01WeEPV3H69D0ANDbN
      TyLqG9bVrqQCEELwl69c4+c/enrb2zrRkeDq8Oy6HYBsFg4dWhDlJFiyZQxPZQj4dNoaqre9
      rd7WOq6NJlc/cCkN3ju3dADJlnDr7v/J8z070l48GiSVK61/DrMkJ1g6gGRLmMuWmE4VOdqe
      2JH2VFWhJhZiJl1c/eDFpL2rR9IBJFvC916/wSfO96CqW//iazlOdCS4vt5hUL13ziAdQLJp
      CmWTi/3T3HekefWDt5CulhouDa4zPFpWhpNsNc+/M8Sjp9u3PH93NY621TEyk1nfPCDlDaGQ
      DiDZFKbt8MrFUR4/07njbeuaiu242M7dk+zvSl2dR5QOINkUb1wZ50hb7ZrzfbcSRVHobqnZ
      eFgE0gEkm8B1Bc++0b+hfN+tore1bn2lFee8x0oHkGyYy8Oz1FaFqK0K7ZoNva2161sJqq31
      iNIBJBviVr7v0w/3rn7wNtJUG2Uylcdd60RY9XZ56QCSDTE+m8N1BZ1NW5Pvu1EURSEeCZIv
      mqsfDCALY0m2gmffHOCjDxzeloyv9XK4pYaLA9NrOzjudVjpAJJ1Y1oOlu1wuqdxt00B5jPE
      BibWmCLp93tE6QCSdWFaDv/lz17jgaMtaOre6D6HW2q4Ojy3thdi094nxd64Asm+oGhYfPFP
      XuGBYy3cu0fu/gCRoB/HFWt7IVbtDdWWDiBZE4WSyRe/+goPnWjlQ/d27Imx/2Ja62OMz+ZW
      PzAY9IjSASSrUiiZ/M5XX+Hxs5186Mze6/ywjhdiU1MeUTqAZEUKZZP//LVX+di5bh491b4n
      Oz/A0fYEV4bXUColFvOIa8oJFq7DzGySmniEgcFxDrU0MpcpUBOeL4vSmKjZkNGSvU22aPB7
      f/ZjPnG+h/uPtqyusIu0JKJMpQq4QqCu5KTRqEdcmwMIKJXLBNIlyq7G7FwSnxCMZxQCCNza
      alkWZZ+2vdx3liua/N7XX+fph3u4t7thU+3crd3tsFtXFTK5ErGw/y5a84ixMcQiJ1jjE8Bm
      amIMX1sHwpijrEZJlUyiEZ2Co8myKAesLEo6X+YLX32Fzzxxknt7tra2J2yf3UfaEwxPZ1e0
      2amqWn9ZFM0X4Nz5hwBoadnZrB/JzpLKlfjCV17mM09uT+ffTo601nFpcGZlu6uqPKKcBEsW
      SOVK/If/+xI/9+FT+67zA3QfqmFgMr3yUHx83CPKHWIkACSzJf7TV1/h7z99Hz2ttasr7EFq
      YiEKJQvbcfHpywzHw96tmuQTQEIyW+ILX3mJX3z67L7t/LdIVIeZTheW/btYKR/AMkoMj4xi
      rSfHUrKvmUzm+e3/8yL/4FP3c7hl/y9nn+yq58rQ8i/ElNFRj7zgAOV8mvcuXcWvq1x4+13K
      trN9Vkr2BGOzOb7wlZf55U8/QFfz/u/8AF3NNStHhoa82WsLDhCMhkmOj/Lj198g0dpJcLkx
      lORAMJ0q8Lt/+hr/9KfPH5jOD9DeWMXgZHrZDDGR8FauUxf/2HKoGccyceUQ6EDjuC5f+vbb
      /PKnH6S9cfsL2e4kAZ+OT9coG3d/0aaMjHjkRQ6gUx8LkSvlSWVKSA4ur18eJ1EdprPpYHX+
      W3Q2VdM/vswwKBDwiJ5JcKQ2QUN9Ew0Jb8CQ5OBQNCz+4uWrfObJk7ttyrbR21rH1WX2EBNN
      3vcbHgcwCxnwRfDrcnX0oPLNF67w+NkuqiKB1Q/ep/S21tI/fvdiWcrQkEf29HR/OIoPk0J5
      6wKfJHuHibkcfWNJHj/TsdumbCt11WHmskWsu61krpQTrCgKCrBHQ74lm8B1BV959iLPPH5i
      +bekBwRVUWisjZLMle/4m2jxhnV7HKCcy2GpfsIBGSFx0Hinb5KAX+fYDm1gsdt0Nce5MXZn
      xThlcNAje4dA0Qh2PkPRlC/BDhJl0+YbL1zh5566Z89mdG01x5fLEPN5i/h6nwDZHHmrSGo2
      u63GSXaW777Wx7ljLbtaw3OnaWuoZnjqzr0DRKt3U3fvMmiigc6WLrq79k7JC8nmmE0Xeeva
      BB87tzOb1+0VbpVrLy15IaYMDHhkjwM4lkkhnyWTly/CDgJCCP7331zgpx8/seO7t+wFWupi
      jM4sGc0sySTzOIAeCJJLzjI4PMLGs3sle4X3B2dQFDh1uDJ3NT/RWc+1UW9kqOjs9MgeB3Bt
      h2Nnz3Gq92CvE1cCpu3wp89d4mefrJyJ71I6m+NcXTIRVm7c8MiLHECQHB3kxsgYllBZ/JEJ
      4TI3l8S1TYZHxzHLBcYmpilkk8wkM9t4CZKN8uwb/ZzsaqCxNrr6wQeU5roombyB4y4K7lxS
      z3TRgr9L1rCZ7L9K8eQpz0HCdcnm8zilPD5d5UrfGLURH6OGgl8I6uIxWRZlD7WdKRi89N4w
      /+qzj6547s1+ZxtlO8u5LCXo15hNF6i7uQLmdnYiFrW9yAE06mJBGlqbeO3lt2j79BMLjwfh
      OkyPj9FQnyCVLxCLRJnN5AlHdAqOLsui7KGyKEIIvvbcZT79wWNEQsvH+6xUXmS72a6yKHfj
      WEc9Q1NZGmvnAzyd69fRjh9f+LvHilCslnLmMmceOu+ZHGi+AOcffhiArg2ZLdkp+saSZAoG
      9x/Z25Xcdore1lreuT7JueOH7vp3z4BI8wdo7WjFr1XmpGm/47qCL//1BT73sdOoqvwOAdob
      qxlZtBQqer17mnkcwChkmMuYRA9wqOxB5rl3BjnWkaCpgie+S6kKByibNiXDAkDp6/P8fUk4
      dIyQZnPp6g35HmCfkS0aPPtGP59+9FjFLnveDUVRaKmL3S6VsmTy7H0PYJVxgeR0CpkVvL/4
      +vOXefrh3l3ZsX2vc7ilhov9MwCIHm9IiMcBVM2HEILTZ09TeS/O9y+Dk2lGZ7I8dLJ19YMr
      kGMdCYYm5zPElP5+z9+W5D4KdF2Xw599hBCCL3/vAp/96Ok9s2ndXqOpJsroTBbXdcH1jm08
      n9iFN94kb5q4W1gLXrK9vHxxhNZEjI4DVt5kK/H7NGLhAJmCgTh82PM3jwOcuv8+QrqOzy/H
      kfuBsmnzzRev8swTJ+XEdxW6muMMTWZQhoc9v/fOAXR95e1lJHuKb754jU+c7yEaWn5HFMk8
      R9rq5iNDl4xuPMFw5WwWS/ETDsqc4L2MEILXr4wxOp3hQwe8wsNW0dVcw42xFKLLG8uwyAEc
      hsanSE1NYDlyGryXuTGW4psvXOFXfvJBOfFdI9XRACXTwhladgik095US6IpwbXrw3IlaI8y
      lcrzP/7yLT7/Mw8TktU71oyqKNTFQkxNeQtmeT7BqpYuugmj+ysneXo/kSsa/O7XXuMf/sT9
      JKrDW7pzYyVwpL2OPtehfdHvluQEG4wOD6H6Qsip8N7CsGx+909f45knThyocuY7ydG2BLNX
      lskIKxeyFCyVEyeO4xp5DLlBxp6hUDL5wlde5lMfOMrZXrlL50Zpra9idi6L694e4N/eICMc
      YWZskL7+QQqGjX8XEiUkd2JaDr//jdf5yAOHOd0ty9VsBr9Pw3eklzeu3t4p8vYQSFHRVDAs
      QVdnm6wPugdwXcEffudtTh9u4PwJGeezFfz0IZ1v/OjyQnj0ojlAkaHhDEc647x7YXB3rJMs
      IITg6y9cJujX+cRDvasrSNZEVSTIRx/s5mvPXQI8DqAxOXyZr3/rB8RqwsuoS3aK594ZZHQ6
      y+c+du9um3KgED09PHamg+GpDEOTaRSxkF4vPLkCd4stMUpZ+oemaG6oZTpdoC6iU3A02lsa
      cRxn3ybFO46zp5LiL9yY4psvXOGf/50PEPAtf+7NXrfruvsyKX4zdjuXL6MdP87QVJo/+s47
      i98DKKTH+njp0ggPnXuQRPzOtDqzmMd0BMlsgRofzBkOIcXGdV1ZFmWL2h6ayvD/fnCRf/Yz
      D6EprFrWZKfKi2wlu2m3cF2EbXOoLkp3S433RVi0NkFzXQbLuns+mO4Po5NExc9k1qA6olN0
      NFkWZYueALOZIn/4nXf5xz95jrrqyLa2XSllUe5o+8iRhbafeeKk1wFKmSzvX3qPcE0rzfVV
      dyiHYnFOnoxvqGHJyhRKJr/3Zz/m5z92mha5SeG2ofT3w9GjAAT9+uJJsMXlviHaWjuIV1Ad
      +b2AaTn8wZ+/wUcf7K6YHVx2jSUZYXc8h1QZXbijuELwP797gWMdCR65R671bzeiu9sjL+rt
      Po4dPkQ6m2FmWha83QmEEHzrpWvomsLTD/XKrK4dYOkeYZ4ngC8UYGY6ySMfqt9JmyoO23F5
      f2Cal94bwRWCX/rU/bLz7xSON8bN4wBaIEJzoop0Okd9VXBH7TroCCEYmszw4nvDXB+do62h
      mo88eJiOxqoDv23pXmJpRpjHAaxyERcN3wovXyRrRwjBXLbEq++P8vb1CaKhAB841cYzT5xY
      eMElY/p3FmV0FBYVx/L0dNuwCVeFMW8GCkk2RqFs8vb1SV6+OIJpOTx47BCff+ZhouHKTl4X
      5Qz24EtYgy9h2SVAwN0yTxQFlOWfimr9UdSzP4+ib+DztLx92+MAimKTLwq5DLoBbMflyvAs
      L1wYZmIux8nOBj77kcpe0xdCIIqzOMOvYg/8CGEW0NsfxvfAL6CFVqhjJASI5fNRzL4fUPrz
      XyHw2G+g1R9Zn01L9ghbFAtU4N03R2g/3Eg4EiPgX98wqBJjgUzbYXwmw8sXx7gyMktrfRWP
      ne6gt612zcnqu3nd2xELJIRAFKax+3+E3f9DcB30rg+iH34cpeoQiqJsid2kBzGe+2209kfw
      3/85FHVt53Nu3EBbtBS6SEswNzONPyxobg2u2wEqAct2mEzmuTgww+WhGWbTRRLVIR451c5P
      feh4xX5mQriI/Ax2/w+x+58H4aIffpzgk7+JWrU9G3Vodd2EPv0HmG/9L0p/8WsEH/+XqNV3
      3wTDg2l6xEVPAJMr7/TR2NtJVTCIpq3vhdhBewIIIbBsl4m5HBcHprk8NEs6X6axJsrJrnqO
      tSdoqovibiKSdLO2b+q6XRfXsVBVjYXsp4WlWGXVZdn5Tj+NfeOH2IMvomg+9O4n0NofRo2u
      vC3rVj+5nKlLGM//R3wnPoV+4idQ1OX7oV0ooEdux1l5wqHfeuk5RtIlzj/0QZrq1jd23e8O
      oGkapu0wMpW92eFnyBVNDtXHuKergWMd9TTEw3d0jL22R9hKCOEisuPY/c9hD7+KMIvzfX6h
      C9yKsLwZLqD65+eoqg6KerNjqaDqCKuA4guhdz+J3vlBlNDaY8S2Y+gmrBLGy7+PyI4RePI3
      USN3DylxBgbQFi2FesKhOw81kbImGJtMr9sB9iNCCMZmc7xycYRro0lyRYOOxjj3HG7gF5++
      j/q7dPj9hhAuIjOG1fc3OIMvovjC6D0fJviR30IEqle8aQnn5nDBsQEXXHs+eta1UXxhFP/q
      Eas7heILEfzQb2CPvkn527+O/77PoXU/cef3Vy579cSiwGrhmLx74X16T5wiss6iS/vlCSCE
      oFC2ePniCC+9N0I05OeRe1o50VlPTWz9q1978QkghECkh7D6vo8z8COUYDV6z4fRux5buFMf
      5IQYUc5i/Oh3EAiCj/06SvD2ipOdz6NHb+e6eByg/+K7lPw6fr2O3sNN6zJsrzuA7bhcHJjm
      B28NkMyWePhkG4+eaqMqEthzGWEb0RVC4KYGsfv+BmfoVZRYI3rPU+jtD9/1Tn2QHeAWVt8P
      MN/4EoEP/BO01nMoioIzOIi2aCnUY4WqOLzz9lUef/LjGzJuryGEYHQmy/PvDPFu3ySnDjfy
      U48dp6Mp7jlm3yIEzuRF7L5nsUdfR63pxNfzYfxnP4fik6Esvp4n0Q6dxfjhb2P3P0/gkV+F
      UslzjDcjLOinpqEFv76/Q6JzRYMXLwzz2uUxIiE/T93Xxc8+dQ/6Ole29grCsRH5SdzUIG5m
      FDc5gJsdQ5QyaLWd6L0fwf/QPwLNv+/nLFuNGqoh+Il/j33pLyh9/ZfQz/6SZ/svzxConE/x
      9tsXOHTkDO3r3HFkt4dAKCoXbkzx/TcHKJRNzh0/xKOn2omFV+4UeyUpXrgOojCNmxnDTQ0i
      0sO4yQGEmZ9fgYk2oMbbUOMdN/+142hBNN23oU5fCUOgpbjZcYxv/FtE2ESJ1KM1nlwaCqHi
      86vkskXYo1vuOK5LtmAwlykxkykylcwzPptlcDLD6e5GPvPkSVrrq3Z0o2hhl8E251dNrBLC
      scAuI6zi/P+2AWYeYZVv/94qIxwDNz+DWU6BECjhOtR4O2q8bX4F4/6/ixKoAlW/eye3bXnH
      XwdqVQv+c7+GeqQHUZjBmXp/STBcqUCmYFB7aG1BRqmZSQqORmvT1uUPOI5Lrmgyly0yky4y
      nS4wlSowmylSKlu4QhAN+UlUh0lUh2msjXKyM0Fnc82mwoqFbczfba0SwsgjjCyinEGU5//H
      yM7/rpSe7/CuDY6NcG0UPQB6AEXzgy+EovlAD6L4wvP/6wHwR1ACUYgkUH3h+TG6FsANxNGj
      tTeHL/tziLavaGlB0XwoVS2oVS1LHMB158dHa4xjyZUtEMZCWRTDMNA0Dedm0sHin1VVnY/h
      uPmzEGIhw99xBX/83feYzZawbJeQX6Uq5KOhJkKiOsT5ow001cXwaSp+XUXXdc95nf4fYr35
      l1jChcU7Gyye4N7xN3fRjw5C0UEP4mhBXD2MFqpG+GMQqEKLHIKao4hADC1cg6KHcFFRdR+u
      YOHNo3LzGsWSa1/pc7BtG8t0URTjpsnzn4miKJ7jbv28+FwA5s1X+yt9vsuddzHr/d5uHbP4
      nBu1+9Y5l9q93HmXs3s5Wxf/zMwMaiCwcN5FDmBw5cYMD913lEvjBWhZQwluu0zR0RcaCIc3
      VlFOCMHnPn6agM+H36et+7Fu9zyB1v0oeO6gyqJX+3j/pigsDsN1XIHu21io8l5ZBl0vlTgH
      AHAsCy14e4VskRUBmuqDvNs3y5kzayvH1961NTUrFUUhHPBtvCOpOoq+sWU/sUroreSA0ewt
      L+/pcR09x5FbrkkONPk8xG+/B5KzLkllkct5ROkAksqi0bvJiHQASWWxJBpUOoCkssh4i75J
      B5BUFg3ebDXpAJLKYklOsHQASWWR9u4ULx1AUlkkvLnC0gEklcWSeCLpAJLKIpn0iNIBJJVF
      XZ1HlA4gqWikA0gqi7k5jygdQFJZ1HjzXKQDSCqLJTkn0gEklcXMjEeUDiCpLOLeIr7SASSV
      hd+b+70uB3Adi9mZWSzLJJsrYBolCiVjS+2TSLaV6WmPuK4s9Fxykok5m0Ihh1E2waeBq9Db
      c/j21jUbZDP6su2N6W7W9o2yFde80YJgIhbztL3mJ0A+kyRvqjilJLnSop32ZGEyyT5ChLwl
      8Nf8BIhW1xKOWoTCEapjEQolk6BfxXLVhcJF6hoLat0N13U3rL8Z3VtFmHaj7c3qb/a6N2v7
      Rtms3cDG9aenUReFQ6xrCKRqPmpr5mfRVTEfAJW9861k3xHz7nwkV4EklcWi3WFAOoCk0piY
      8IjSASSVRcS7XZR0AEllId8ESyqasTGPKB1AUlksKeEvHUBSUYjaWo8sHUBSUSijox5ZOoCk
      sgh6N1KRDiCpKISsDSqpZJThYY8sHUBSWQQCHlE6gKSiEE1NHlk6gKSiUIaGPLJ0AEllsZmc
      YIlkvyNaWjyydABJRaEMDnpk6QCSymJDleGEwDRNhHApFku4rk2pbGBbJoZpra4vkewRRHu7
      R15TTrDr2NwYGKSxKsxkJouCD2Hb6EEN11U52tu9UGZjw4ZtQn+zuov/38m2N6u/FbqbsX2j
      7KbdSn8/4tixBXlVB7DKBeayZYJ+H6ZlEwoFKRQcwgEflqqiLyqLsh/r48i291ddoM3qC0Xx
      6K7qAL5ghAbdx7hRIFJTh1Y2aG+JkM6XiQY0yovKomiatiGjYP6iNqq/Wd3danuz+pvVBTZl
      +0bZTbvtw4c9umsaAqm6n9a2+bFTLDqfU1lXM/9KObCslkSy91Bu3IDjxxdkuQokqSyWlFSU
      DiCpKERPj0eWDiCpKJTr1z2ydABJRSMdQFJRiN5ejywdQFJRKH19Hlk6gKSyWPIGWTqApKIQ
      3d0eeV37A6xGJYYE7Ne29/MWSZuye2wMt6NjQdxSB9jovk23dDeqvxndSm771jl2ml21u63N
      o6uILQoHvLXV0G7ob1YXNv6BVup1b4a99H1t2RxAURSMcpF8sUypkMewHHLZDI7rkM5k7whf
      Fa5DOp3GsS1y+QKObWFazk1de9X2ioUcJcMil83gCkGpVEK4DuXy6tu2uo5FOpPFNssUSwaW
      UcZ2IZ9NY9rOqvrlUoFCyaCQz2E7LqVSCce2SKYyrHY3Ea5DKp3BtkxyhSKOZWLZLq5jrSG3
      QlDIZymbNtnMfFulUhnbNJhLppbO7+7AsU3S2RyWUaJUNjGNMo4rKOSymNZq1y3IZtJYtkM2
      k8UyDUzLJpWcI5cvrqpbzGcpm97vy7EtMtn8qp+Za1ukMzkso0yxbGLdtDubSeO4q37i5BbZ
      7d7sj7ZpkC+Wt3YIVCwWmJpJoykuqmpj2gGMwjUUVaGh6yTN8ds79FlmmdmpKcYmwYegtraK
      shKklJxF9Qfo7upYoSUo5HOkU0PYaoiAL43tOrQ3NTAxm6Kro21F3VKpyMTwGFrEj7AFjWGb
      UvVRyGYxMkU621pW1C8W8szMJkHV8fl8mJZFV1szYwPX0MP3UxVY/r5ilEvMjI8z6dPRXJe6
      6iBlfwKywxSo5Uhn4/INi/nrzqYHMdUowWQaRwhCqoWpRqitqVnDdU+gh3y4LtT6LURtFyNX
      rnP0nnvw+1aIsHRsctk0w8Mj+P0BfD4Vf1UDYSwmZ4rEouHldW/anUkPYaoRgr40jnCJaC4T
      yTynTp/Gry1/Ry+VikyMjKGF/QgHEgELq7qV0WsD1DQ00N1xaPm2XYdsLsPwyAi6L0AoGqOc
      TTKhB1GEu7WrQNlUitpE/cIjRlFUqmsT+BSBuuSRZZtlHNVPJOBDVRV0n49SsbjmR1s6laK+
      PoGiqCiqhnAsXEVduKutRLlYIFhdjc78WFTXfRRLRVKpLPWJuhV1ATLpFHWJxLytioKKS9mw
      0HUNe5UniGWUUIJhgrqGoij4fD6KuQyzySzZbHZFXYEglUrPX7eqomo6rm0QCEWZm57EXuW6
      S/k84XgcDW5et06xWEQBJianV9QVwiGdLZOorUa9pVsqY1k2ra0r3zAEkFr0famqhmubmLaL
      wEWsZnchT6g6Pv99AT6fTtnUSNQEEavs0yuEQyZbJFEXR1VVjGIBLRInqN6cizJX7G0AAANw
      SURBVGzVHAAgm05iCY2QT0ELRDAKOcLRCNlcgZp43BOIZxllkukM1fFqDNNGEzYlSxAJ6GiB
      EAHfyg+n5Ow0mj+MImyCoRCpVJpQKESpZFBXX4e+wjaa5WKeTL5EvCqK5YJdLuKqOo5RJhSr
      JhoOLqsLkEnN4Sg+/KrAHwyRTqUIhsOYpkVdbe3SgEMPZrlIKpMnHq/CMB0U18RwFBI1VVi2
      i2+F6xZCkJybwReIIByTcDhEMpUhGothWg7x6tiK3aFUyJErGFTFwjiomMU86AF0HAKRGH59
      +SeAcG1mZueIRKuxTANVAdNxqY5F8fl8K35eQghSczNogQg4FqHw/PcVi8UomxY11dUrfmbz
      dpepqopiuwp2OY/QAgjbJF5bh7qCrnAdZmdnCUersEyDoN9HJl8kXhXFdLZwEiyR7EfkizBJ
      RSMd4IBhmQaFYnHZpHHXcXCFwLZtbPvuq22uVSKbN+6qtx7mddalAoDj2NiWQSqTW7/yOtnS
      VSDJ7pNJjfL956/y2COncAVkShaNiTgqgpnpKVwjTbT9fvreeQlfMEJLopp4opGh0QnaWhpw
      HBgfukFjRw+uVSAaDvL+1RtgFsgqYe7paCSZN5jNzNBam0AJxDAy0/gj1RglE+EUqKptYGJs
      HPJpMtFGjh6qw6cpCKFiG3lmMgY1YRWDIIqZJVJdx9TkNC2HGpmYTpNOTaI4GppP5dz586tM
      czeHdIADRqKxifaWPJfev0xLYw2vvXWdwz2NuLbFyOgsbc019HYo9DRFmfMf4sUX/5q25mb6
      +8fo62jn6Q8/RbkfsuM3eCdl8+SpJpK5LKP9E3QebuH7P54gEQzQ/uAp+t66iFPKQDiOmb1C
      rK6b/Ox1CuZF6uoPMX5tkLZelQu5JAF/AGv6Km64nZJlUBXS8KkGlhUm9fpL1LcfYXB4jNmp
      KQ71dhFRQLguDtvbSeUk+MDhkMuWAQcNm4m5Ao11EYQvwuzYELGaOmLVNah2CVsNMjc+QCAa
      J5VMk2hsoLa6isGr7xGubwcBNXqRH14Y4+EzR+fPbpvkyg4aAp/qgC/EWy88S0PvWY50tpGc
      HsOnu7x/I8m5s/P1d+YmBhHxTmJKmXAkyOhkiqb6GhQgm54jUlWDpmlYZplUpkhdogbVdbja
      N8CDD9y3rZ+WdABJRfP/ATtVrc0pUmNjAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
      tTMlsDUibwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Non vs Poto' width='183'>
      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
      XL58GYmJiSgtLQUA4zjNz6fcv38/vLy8YG9vD0dHR5w/fx46nQ7Hjh2DXC5v+0k8ndWZGHjN
      baq9kwRycnLohRdeIIlEQv3796eIiAiqrq4mosYTE15//XUiItLr9ZSQkEDOzs4EgIYOHUqJ
      iYlkMBiorKyMVq1aRXK5nAC0GIeI6Pr16xQZGWl8XI1G87vX3HzIaxN8yKtYeFnChMVxM2Fx
      3ExYHDcTFsfNhGXZ0xNg5mn+Ryk9PYVOS/vsDZPLvOdmwjLvuA0a3M3PwLebP0ZkgrL5RpRn
      JWDt6ghErIzEf6VeweOPZFQiweT2GlxK/AS7r+i6ZdrMPJh13PeO78Duq0PgH7EAE1tsPIod
      Jx2wbP3/IH7zR3ixIglJ5zWtjqNSJuOgdTAWT7Dq8jkz82HWcQ8PeA8fBE+GUz9pi21FZy/g
      mQXz4WYvBawcMe2NANRcyEOLvFVKpBxxwNLg8Wg5ChOZWcfdnqoHcjw7ukmucnc8Z1kB02PE
      VLiYfBgOQfPhymX3Ob303RIttNr+6N+v6XUSSEvvoxSAMwBkb0NENtDPayU2tlK2Wq1udeSa
      mpoumC/rDs1/dr00bhvY2NShTgPAGHgDDI7D4Pjo4pQViA8fi6wt67Dv6vMIGW8aeGsHSKnV
      atjZ2XXhvFlXav6z67XLkoEOlfj1huHxFZX/h8v6wTA9ulcGn+WLUZeaCKUKrI/ptXG7+k7G
      rUNpKKw2ALpSnEk5CrvJHujX/IaySQh9exgO78oC9923mPWyRJkQgW3Zjy9nZwPAFKyID8ek
      4QH408xEbFq7EuWG/hg7+12s8GqRNgBA6jwHoc9uxJYMF0TPceZ3TfoIPlmhCT5Z4TH+8ztj
      ZozjZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4mLI6bCYvjZsLiuJmw
      OG4mLI6bCYvjZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4mLI6bCYvj
      ZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4m
      LI6bCYvjZsLiuJmwOG4mLI6bCYvjZsLiuJmwOG4mLI6bCav3xm24g39s/RiRKyMQsXottmZc
      h8q4UYmEBGWTG2twKfET7L6i6/55sh7TS+M24Grq/+LKCyux4et4xH8ZjakV3yLpvKbVW6uU
      yThoHYzFE6y6eZ6sJ/XSuMtQVD0Jc6c5oZ8UgJUDJi1+DTYX89Aib5USKUccsDR4PKQ9MFPW
      c3pp3IMgbziLoxceoHGhoYOqgmBZexd3TW6nwsXkw3AImg9XLrvPsezpCTyZfvBatgw349Yj
      6psa1Ev7w3GMOwY+sETVo5tkb0NENtDPayU2tlK2Wq1udeSampqumzbrUs1/dr00bgCyCQj+
      j40INl5xCYmflWD4o4tTViA+fCyytqzDvqvPI2S8aeC2trYthlSr1bCzs+vCSbOu1Pxn10uX
      JS0ZruTj2jMuGGpyrQw+yxejLjURSlUbd2TC6rVxa+/dRonq4Yq79Azik27B758mtHzRKJuE
      0LeH4fCuLHDffUuvXZbY1P+M72K/wM2aeljbjcK0sPcRMLz120qd5yD02Y3YkuGC6DnO/K5J
      H2FBRNTTkzAXarW61bV4XzT/o5SenkKnpX32hsnlXrssYawjHDcTFsfNhMVxM2Fx3ExYHDcT
      FsfNhMVxM2Fx3ExYHDcTFsfNhMVxM2Fx3ExYHDcTFsfNhMVxM2Fx3ExYHDcTFsfNhMVxM2Fx
      3ExYHDcTFsfNhMVxM2Fx3ExYHDcT1v8DIWZMWEhQOIgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Photo Activity' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Rating pie' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAbAUlEQVR4nO3deXBd12Hf8e9d3r7vAAmCAAGCq0BJpEWaixYnUiQzslUpnTqO06k77Xia
      OB3brVN3cabTJs3STKeZttOmdeNpM06VuFFkS7arxaIoiaRMEqIoiAtAygQBEA/Aw8NbsLz9
      3v4BEeICEA/A24B7PjOcAYG7HJD39+455557jqTruo4gGJRc7wIIQj2JAAiGJgIgGJoIgGBo
      IgCCoYkACIYmAiAYmgiAYGgiAIKhiQAIhiYCIBiaCIBgaCIAgqGJAAiGJgIgGJoIgGBoIgCC
      oYkACIYmAiAYmgiAYGgiAIKhiQAIhiYCIBiaCIBgaCIAgqGJAAiGJgIgGJoIgGBoIgCCoYkA
      CIYmAiAYmgiAYGgiAIKhiQAIhiYCIBiaCIBgaCIAgqGJAAiGJgIgGJoIgGBoIgCCoYkACIYm
      AiBUxNmzZ3n99dfRdf2unw0ODs5/PTIywuDgIBcuXODatWsAJBIJSqXSXftdv36dN998k0Kh
      cNfP4vF4Rcot6QuVWBCW6dixY0xNTZHJZCiVSkSjUTo6OvD7/aTTaTweD0eOHCGTyfDyyy/j
      9/vx+Xy8+OKLdHd3EwqFOHbsGAcOHKCzs5POzk7Gx8c5d+4cJpOJ2dlZFEXBYrGQTCbJZrNE
      IhHS6TTPPPMMkiStqNwiAEJFvP/++0xOTuL1epFlmVgsht/vZ3Z2lo6ODmZmZhgeHqalpYV4
      PI7FYiESiXDu3Dm2bNlCNptlYmKC9vZ23G43Fy5cwO12k0qlKBaLuN1uAOx2O5FIhLGxMRRF
      YXJyksOHD4sACOtXoVDAZDJV5diiDSDUja7r9PT0MDY2xrFjx8hmswtuV62LH0Ct2pEFYQmJ
      RIK+vj5kWSabzSLLtf88FgEwOE3TKOSyaKUiWqlIMZ8nn8uQ0N04rCbsVhOKLGNSZaxmdcV1
      7YXY7XY8Hg/pdJpCoUAymSQcDlfs+OUQbQCD0HWdQi5DfGSQyZEh0vExUuNRphITZKbTlAoF
      tFJxfvuXlCfQJRlJAlWZu/i9DivNQRctIRcbAi7amr1sCnuwmtfu56gIwDpWzOeYGB4g+vPL
      RD+6TPzGdfLZ2bL2vRmApXgcFra2+Nm9JcyejiZaIx5UZe00LUUA1hmtVCIeHeTKmXe4fuE9
      ZtOJFR2n3ADcqSXk5pH7N3O4u5UmvxO5glWmahABWCdymVkun3qDq++dJDk+surjrTQAN0kS
      dLUE+OWDXRzcvalh7woiAGuYrutkptNcPvUGl069QXZmqmLHXm0AbtUccPL0wS4+82A7Nkv1
      ujRXQgRgDZpr0GY599qL9J0+TiG3cP/5alQyADd5nVaee2QHRz+9FaUOXZ4LEQFYYzRN49oH
      p3n3h39BdjpdtfNUIwA3fWVLP7/46LOYOnZVtFt1JdZu/5UBTUaHePelvyB69VK9i7JiG5UY
      ewdfZfTbl3EcOYL3i7+K4vXWrTwiAGuAruv0/exNTv3we2jF4tI7NCgJnS/Y3qDQHwYdZt56
      m8z5Dwj85m9g676vLmVqjIqYsKjs7DTHn/9TTrzwv9b0xQ/QbbrK9skUWtYy/z0tlSL2B39I
      8vv/F32BdwKqTdwBGlhs6BrHn/9TUrHRehdl1VSKfMH8FtkrIeCOer+mkf7rF8j19RH8ra+i
      eDw1K5e4AzSokasX+X/f+eN1cfEDPG47i2/YBJqy6Da5Dy8w9q//DYXRe//OmUyGmZmZuW7g
      TGbJc2cyGTRNm/+7pmnzI0/FHaDB6LrOtd4zvPWX36FUyNe7OBXhlqY5WnifQqJ5yW2L0Sjj
      //b3CP2Tb2De0r7gNidOnCCdTrNz505mZmYIhULE43ESiQRdXV1cu3aNQ4cOIUkSPT09zM7O
      4na7MZlMxGIxAoEAV69epbu7W9wBGomu61w69VOO/5//vm4uftB51vY20pCfu6o+iyjF44z/
      /u+TvbRwb5fH48Hn85FOp7ly5QqpVIrh4WGam5vp7+8nHo+jaRqaphGLxVBVlXQ6TbFYxO/3
      UygUsNvtDAwMiOcAjaT/zNu889ffRb/ldl0vlXoO0KZE+VbmZQrDkWXvKzsdhL71LSydHbd9
      v1gszr98L0nS/Av1iqIwNDREX18fHo8HSZLYuXMnJpMJRVHm3zfQdZ3p6WmcTqcIQKMYvHiO
      N773Xxvmk78SAZDR+Kbt+7RcMt+z7n8vit9H+He+jampaVVlWYyoAjWAsetXOf78eqr2zNln
      7qM9mlvxxQ9QmkwQ+8M/ojhZ/qhWXdd57bXXiEajvPDCC3z44Yf84Ac/YGZm5q5tRQDqbGoy
      xk//938in126N2MtsZDn2dJpCpOr79IsRkeZ+JM/Qc+X9wEhSRJtbW2k02n27NlDJpOhs7MT
      m81217YiAHVUKhZ566/+J5mpVL2LUmE6T1jO4hq2Um7Ddyn5vn6Sf/n9srbVNI3h4WFkWWZs
      bAy/308sFltwgi3RBqgTXdc599qLnHv9B/UuyoJW0wYIykl+J/s3SMOByhZKlgl+/WvYP7Wv
      coes2JGEZRm5epHzx16udzGqQOdZ9QRStAoD3DSNyf/xHYoTExU7pAhAHeSzmbmxPXUY+1Jt
      neoN7h+fhNLKG773oqXTJP7suwvOQboSIgB10Hv8x0zFx+tdjIpTKPG3S+9SmnRX9TyZ986R
      6empyLFEAGosFYvy4duv1LsYVXHAdJGWkRKVavjeS/LPv4eWy636OCIANaRrGj976XmKZXbn
      rSV2Kcvnp3vRMnd3NVZDcWyMqZdW34YSAbiDruukUnPdktPT06RSKXRd5/Lly4vWO3VdL6tO
      Onqtj6G+Dypa3sag85RyFttobS7+m9Iv/4jS1OomAhCjQYFsNsvQ0BCapjE9PU2hUMBmszE+
      Po7D4SCXy5FIJEgmk3R0dBAKhbhy5Qqjo6NEIhEymQwffPABR44cQVVVRkZGsNvtaJpGd3f3
      /HnOH/sxrMNe54ic4OGJQSg5a3pePZtl+tXX8Dz37IqPIe4AgMVi4ezZs5w7d47ix29dRaNR
      VFVF13XMZjPbt2/nRz/6EdFoFIBcLofP5+PMmTOcOXOGQCDAhQsXOH36NBaLhfPnz3P+/Pn5
      c8SGrnHjyod1+f2qS+e50mnkSUddzj71k5+glfFOwGLEgzBur8LcnKVA0zQkSbpt1gJN0xga
      GuLatWvs2bMHn883v92t/4yyLM8fU1HmugN/+uf/mYHeszX8rVan3AdhO5UBfmP4NHrGWoNS
      Lcz7xV/F/bmnV7SvqALBXRc6MH/h3vm9trY22tra7rndzWPeNDUZ4/qH71WmsA3ERIFnZ95H
      z1iW3riKpl57HdfRzyIt8n9xLyIAZert7WVwcBCHw8GuXbt49913OXToEH6/f8l9B3rPouv1
      H+NfaYelS0TGdOpdky7FYuT6+7Hu2LHsfUUboEx2ux2r1Tq/ntXU1BQfffTRkvvpus6VnhM1
      KGFtuaQZnpy8UrUnvss1c/ytFe0nAlCmXC7H5s2buXHjBjMzM+zevZutW7cuuV98ZJDE6HAN
      SlhbR4vvY080TgUic7YHbQXPVxrnN2hwO3fuBKCzs3NZ+107f7oaxamrTdI4B8ZHgcaZ6Fab
      nibb+yH2vQ8uaz9xB6giXdcZ7u+tdzEqSkLjczO9KJnG++zM3tLtXC4RgCrKZ2aZHBmqdzEq
      ao8+wLZYmlqM91mu3OXL8xMK5PP5RVedvFXjxXgdGb3WB6yfxywW8jyduITUIA3fOxWGhtGm
      plA8Hk6ePEmxWKS1tZVEIkEmk8Hr9ZLJZGhrayOZTKKqqrgDVFP0o8v1LkJFPVLoI5xszPlJ
      i4pM0ukgPjgIQKlUQtM0JiYm6O/vx2w2z88kd/LkSXw+H1evXhV3gGrRdZ3Y0M/rXYyK8TLF
      Z2IDNELVR5MkZm1WJr0eouEg48EAcZ+XWZuNQyaZp4HDhw/PP41vaWkhFAoxPT1NKBQiGAxi
      Mpl47LHHRACqRtdJr5uXXnQ+O30JR1aj1gHQgZzZTNLjIhoKMhYKMuH3MuV0oC3w5Df+8dQn
      FssnT6dbW1sB7poVQlEUEYBqyWVnq7qCSy21azEeikep9sWvA0VVIe10MhYKMBoKEgv4Sbqd
      FE3ldblOzM6g6XpZq1PGYjERgGpJT4zVuwgVIaPxucmLKKXKX/wlWWLGbifm9xGNhBgP+kl4
      PGStKx9blMxkKGolzMrSl7bb7RYBqJb1EoAHcoN0pFOs9tNfkyBrtjAR8M1/uk96PUw77HNr
      qlZIQSuRymYJOZZ+NyGZTIoAVMt6mOzKohd4eqIPaZkX/82qTNzrZTzoJxoOMRHwkXI50Wuw
      OuRsPg9lvJ4QiUREAKqlGkuX1lpXNkYgl+Ven/46c70yaddcvT0aDhEL+Jj0eimp9XlekCne
      PQPcYkQAqqSYX/2MBfUko/NUoo87L34dmLHZGA/NfbKPB/xMBHzkzea6lHMhhWXMtyQCUCWF
      NR6AA9ODtGSnyJpNxAJ+xkJBxkIBxgN+Zm0fv/1V5zV+F5NdxmKCIgBVspbvABbFxM7OQf6s
      u4XJQBhdVpAkFQkNSUoiFRUkFCTp4z+3fi3V/5IqLmOBkfqXdp1STY1TJVgOCYmHm+/D136D
      Fncvp9My56YUUsXFPu2lu76+GYRPgqF+HBT1ltCot/9MUpGWGJnzSdhMSJJ8yznmjoEkI6Gg
      SCIAdWe21WeWhNXaE9jCJkcILe5mU+ASrZECnw+VOD8t8+akwkBW4vaLXr/ra13X0PXyG6KV
      JYHWCWwpa2sRgCoxWer7ovhK+C0u7g90IEkSimZFSbSjhfoxybDPrfGgS2MgK/FGXOHCjExB
      b8Q2gI7NVP4EXSIAVaKa6zdNyEookszhpt0ot/TTW9PtzIb65/8uS7DFptO+sUi8AMcTCmfS
      CtNVeEq8GlZT+f/2IgBVYndXYX78KuoObCFku305IyXjRyuYkU23v2srSRA0w3OREk8FS5xO
      yZxMKYzkGmN0vdfmK3tbEYAq8QSXvyxovQStbrr9dy9KbcKMFO+ApoXX6wWwK/CoX+OwV6N3
      WuZESqZ/Rkar07Bpu9mBx1r+h48IQJW410gAFEnmUNMuVHnhp7aWyS5y4T4k+d49K6oMD7g1
      9rg0hnMSJ5IKZ1Iy+Rq3E0KOMGoZA+Fuaox71jqkmsw4PEtPmlVv3YEtBK2Lr+ToKHnIJzaU
      fTxZglarzhciRf7VljxHg0U8au1eCw05w8jLWNtMBKBaJAlvpPwLpx5CVg97/PfuLpQkCUt8
      +7IntZYk8JvgqWCJb7fn+bvNBTZaNKr9jnSLt3VZ24sAVIkkSUTalp44q15USbmr12cxzkwz
      +enyG5Z3sirwkEfjt9sK/ONNBXY7SihVCsLW0PZlbS/aAFXUtGV5/xm1dH+wA7/VVda2ZkVG
      Gt+G7nx3VcN/FAm6HDpdjiKjublu1LNphYxWmXaCKpvYGupicnISl8uFyWSiWCwiyzLyIkEX
      Aaii0KZ2VJOZYqGxlkSK2Lzs9rctax/bVDvZ/PuYLJUZ5t1kgb/TVOKXQyVOJhXeSigkirCa
      F282+9twmB0cf/0neL1eHA4HmqbhdrvJZrNs2LCBTCZDJpMhFouxdetWEYBqUlQTodYOoh8t
      3o1YayZZ4VDTbpRlLoLtVkykxrZgar1Y0fI4FHg8UOIxf4kPpmTeSih8lJHQVxCEHZFdSJLM
      yMgIHo+Ht99+m9bWVtxuN5cuXWL37t3YbDaSySRNTU2cPn1aBKCaJEli0/buhgrAg8Gt+CzL
      X8pIkiSsiS60jZeRlcpP9a5K8KBb4wGXxrWsxJuTCr3TyxtusWfjXgC+9KUvUSgUiEQi+Hw+
      JEmira2NUCg0XyUym83IsixWiKm26WScv/qDb85P2VdPTTYfT7Z+atmf/jcVNZ3h8DHcTbWZ
      7nEiDyeTCqdSClNLDLcIO5v4D8/8F+RFnmcsRtwBqszpDRBu7WBs4EpdyzFX9dm14osfQJUl
      1Ilt6JGhmrwLEzTD58IlngiUOJOWOZ5QGM3fORp1zoG2g4te/IlEgjNnzuByucjlcjz66KPz
      PxPdoDWwdd/heheBvcGteFdQ9bmTp9DEbGrlXaIrYVXgiE/jn7cX+EpLkZ2OEnc+T9i/+dCi
      +7/yyivcuHGDlpYWtm3bdtvPRBWoBnKzMzz/775Rt7fEmu1+nty0b1lPSO/l56bLeLf9rCLH
      WqloTuLNhMLPUjKbfJ387tE/vmudt1sNDw8jyzLNzc23bSeqQDVgsTvY9tAjXHjn1Zqf2ySr
      HIrsqtjFD+CYaiefPY/ZWr+ZL5otc8MtPhsEpf2Ze178AC0tLQt+X1SBamTX4ceRlzFIq1L2
      hbbisVT27bSg2cxUtLw3rqpJksDnaGZT5MCKjyECUCMuf4iOB1b+H7USGx0Btns3Vfy4iixh
      indRaoB1AqzNv4Ikr3ypJhGAGrrvkadqdhcwyyYOVrjqc6uw4iY1trEqxy6XZApgCf7Cqo4h
      AlBDvshGumrUI/RQuAu32V6149tNEsXR5Y8SrWgZNn0ZSV7du9ciADW298nnsDrdVT1HiyPE
      Vk/1P50DpTBTiUDVz7MQ1bUbc+CxVR9HBKDGrA4X+558rmrHtygmDjXtrFrV51YBq8z0ja6q
      n+cukoq99StIFfgdRQDqoHPvIcKbl7fecLn2h7fjXMa0IKshSxLOmVZymdqc7yZL+CiqozL/
      fiIAdaAoKkd+5e9jtla2jt7qDNPhru1baM02C/GhjpqdT7Fvwbbx1yt2PBGAOvFGNnDg87+2
      5AOcclkVM5+O7ChraaBKsigScryTUrEGvVuyDUf7N5DVyj3XEAGoo84HD1ZsnFAtqz53aja5
      mByt9p1Hwt76D1Edlb3biADUkSRJ7H/6iwRb7p6TZzk2OyN0uJsrVKrl81okZm9Ut0vUHPwM
      ltAvVfy4IgB1Zrba+IVf/01c/tCK9rcqJj4d2VGxqtRKSJJEUA9VrUvU5PkUjs2/VZFenzuJ
      ADQApy/IE1/+OlZHeS+p32p/eAeOZcyFWS1NdoX4YOW7RBXHNhxb/imSUp3JhkUAGoQ3soHH
      v/w1TJbyL+Z2V1Ndqz63MskStqnKdonK1o24tn4b2VS9B4ciAA0k3NrB43/va1jsS7+4crPX
      p55VnzttclgYu16h/nlbK65tv4tsru6TZhGABtPcsZ3PfuWf4fTe+z/+YGQnNrWx1iBwmqAU
      61h1l6jq3IF7x78nr3l45ZVXGB0dBWBoaIhEIgGAruvzX6+GeCOsQaXj47z23f9Icnzkrp9t
      cTfz2IY9dSjV0qLTJZIbThBpvbai/U3e/Tg7fhtJsZNKpXj11Vdpbm7m2LFj3H///XR0dDA9
      PU06nSYcDjM4OIjZbKajo4MrV67g8/nYv39/2ecTd4AG5Q6EOfqP/gUt27tv+75dtfDpyI46
      lWppYbtMYrBrRV2ilqa/hbPzXyIpc0/IVVVl586deDwe9u7dS1NTE5Ikkc/nSafTn+xnsdDT
      00Nzc/Oy7wriDtDgNE2j9/iPee/Vv0ErlfjFjQ+y2RWud7HuqS9RxLzjVTzBWFnbS6oHR/vX
      MXkfKqtNc+XKFWw226KvOS6HCMAaoOs649evMvTjl9hraW6ohu9CZgs650sfsW3fiSW3VV3d
      ODu+iWwOlnXsXC7HwMAAfr+fdDpNR8fqngyLKtAacHOm6b3/4KtI9+2AMmZ0riebCqb0JrKz
      iw/2k1Q39s1fxbXt98q++AF6e3vp6elhYmKC3t7eVZe1sf8lhdtIZjN8ag98/globtxqkCRJ
      bHaaiA4s1CUqYw79Ep77/hvWyFEkeXk9Rp2dnVgsFkqlEtns6melEFWgtUrTYWAIzl+ARKre
      pbmLpuucjE2x7eEfoqglQEJ1349t46+hOneuuBpXLBbJ5/MoikKpVMJuX92QchGAtU7TYGQM
      PrgIo+U1Omvlo2SJ3OYztO5pwtr0DIqjqyrjeVZDBGC90DSIjsOVn8NwFPL1Wqn9Y3Ybhc2b
      yHe1Y/d7G7bhLgKwHuXycCMK/ddgLAalUm3Oa7VAywbY0gpNIVBVcrkc0WiUzZs3LzsEuq5T
      KBQwm80A5PN5VFVFlmXy+fz891dDBGA903XI5iAWh9HxuSpSMgXFCgXCYoaAf65B3hQGvwdM
      t09S1d/fz9TUFKqqMjMzQyQSIRqNEggEyGaz+P1+BgcHKZVKOJ1O3G43iUSCffv2IUkSL7/8
      Mt3d3YyMjGA2m1FVlWAwSE9PD1u3bsVqteL3z63G6fUuf3FyEQAjuRmI6RlITUEqDelpmJqG
      QhEKhbnGtfZxQGQZVBVUBSwWcDnA7QLPx3+cTjDfe1a2y5cvc+rUKdra2tB1HUVRcLvdqKrK
      e++9R7FY5MCBAySTScLhMJcvX2bTpk3cd999SJJEb28vY2NjqKrK5OQkfr8fs9mMpmmMjY0h
      SRKlUomnn356RQ1iEQDhE7o+15a4WWWSFVBkVrMYwM1qSyaTIZlMEgx+0uefSCSw2+1YrVY0
      TWNqagqXy8XExARDQ0NIksQDDzwAwMTEBIFAAE3TKJVKZDIZAKxWK/39/ezdu3dF7QwRgDWu
      v7+fyclJtm3bhs/nmx8n43TODam2Wm9/v0DTNNLp9IqqC+uRmB59jdM0jWKxyNDQ0HyVIpFI
      4HA4cDgc9Pf3s2PHDs6ePUs4HMbhcNDS0sLg4CDBYJDR0VGee+45TKaVTzBbSalUinfeeYcD
      Bw4QCFR/1jkRgDVOVVWKxSIWi4WZmRl0Xefhhx8mnU6TTCZpa2tDVVX279+Pruv4/X50Xefg
      wYNcvXqVeDxOI1UCzGYzGzduxOPx1OR8IgBrXGdnJ52dc0MOFEUhHA7jdrvZsGHpaUpcLhfN
      zc0V6U6slFQqRTweJ5vNzlfjqkm0AdapsbExnE4nAwMDhMNhrl+/zq5du7DZ6jN3UKNqrOfS
      QsXMzMyQTCZxu91cv34dl8vF2NhYvYvVcEQA1qloNMrFixd5/fXXURSFU6dO4XBUdqmk9UBU
      gQRDE3cAwdBEAARDEwEQDE0EQDA0EQDB0EQABEMTARAMTQRAMDQRAMHQRAAEQxMBEAxNBEAw
      NBEAwdBEAARDEwEQDE0EQDA0EQDB0EQABEMTARAMTQRAMDQRAMHQRAAEQxMBEAxNBEAwNBEA
      wdBEAARDEwEQDE0EQDA0EQDB0EQABEMTARAMTQRAMDQRAMHQRAAEQxMBEAxNBEAwNBEAwdBE
      AARD+/93xH8Ai+VaVgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA Positve Cities' width='192'>
      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
      c+QTzjVty+azJ/4qjxbcUDI+yc+njn2G6bTrBxHyRfjo1CcpxiYAkOxhniF7wLZtbNtGliUM
      3cBGwu/3YVkWsixjGAaK4kOScGymYWBaNqrqd22mgWHaBPps21mTJMmxWaaJbpioqn/rvjKW
      ZaLrXpttWXR1HVVVB2x+VYVtm23R7er4/SpgO/ftdrv4/CpSn03vdlH8fiRwbXoXRfEjSV6b
      rPiQnW3hNoZhOluUJUlCkkDv6kiy4mz/liTQdR0kGZ+iDH2uW08dvdtF2rrHzuvJcp9t2PW2
      8iJJ0oCt9zy3352OZYPqv/M7GfbuLNNANy0CqtqzSZKns7Af784yTZBl5L68DHt3/fSn0/Xu
      3c8COXv/bYvnnn2Wi+/2Phu0fePy6jxvv32JpmY4tu9/50W++9pbnnRvvvoKL37vdY/t1s0b
      vHvlqsd2850f8CfPfw/L7kt3+Q2+8cIrtHXLsd2+donnX3iJatsteLM3r/LtF59jra47tvnb
      M3zvpW8wX9Uc2+riHN956VvMlmqOrbK2yIsvPs/MUtmxtaqrPPfCS1yfXXJsZqvMN55/has3
      brsPv1vjmy99n+s3bjoFD73JN557iXevXNsqrBIYGt969gXeee+q+1wtk2effZa3L7ufY6JT
      4U+f+w5XrvVdr1vnz557mctXr7s2o803n32Rd9+71nc9nW89/xLXb9zoe3c233ruea7fuO55
      1q+8+ByvvfmO9/lfv8qVazc8trd+8B2e/+5rHtt7b/45f/riq47NtgzW19dZXF71vuP33uSb
      L3ybVrf/3b3DCy++SKXllpm5mWu88uKzrNbcd9fV2rz79kXmV0qObW1pjldefJbZtU3HVisv
      c31mjlbHPbe9ucazz7+M8pWvfOUr7BOhUIBcYZxwMABAo1ZlYWmNQiFPKBzGv1XTpTNZUqkU
      kXDIOVf2BRgvFohGwo5NazfRbZlsOuWmC0SYKuaIRsKOU4qNRCyeJJ9N9dlkcoUxMskYcp/z
      Sio/Ri6dQJEkbNvCr/iJpbPk0yl8stSrXRSFRCpDLpPq5dm2QVJIplNkM2nUbV9oCVLpHPlc
      Bv+2TZZJpdIk43FCocB2ptFbG2QLE0TCwe0fTD6TIpXOEgyo7u+zLfLjk0S2zwXCoQD5sXFC
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='SIA Type of visit' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA countries' width='192'>
      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
      FicyEND7rrTqZVa3dl9bxui28SUmuJgbd2Mzh7b+qOONhlC9XLgwx+5emcjA+4xGwlRKRdrd
      b/5sHKPF1y92zqYC1Is7rK1vU6uUqHa+/aTcxdapNA1Cfh/eE9iy+2Wer65jdl/v635bmrUK
      LcPBHMxB+g50mnV80TRR35ubkmVZJNNpPOo3G396xyT5mZqeQhsMYraahGIJfJ5v3skpqpeZ
      ieTZnANEx7I0DJW52RyewDGMAKqG0W4yOT2DrZx0n6GweGGWcPTV9vo3YW7h+A6XANA7LfYL
      FWZm515fUAj8gSAc7JTxTbce0ls1HF+cyOHRXI6FrfpQ9A72t1jUWC3u0rGV774kUvKOcWwe
      P3mM6osMZdC+Lzi23YsfKAo+77vbLKDdrLG+uc38xcsEfRo4Fnv7Bcx2FeLTzLwhDvAyeqdF
      uVo/myPAWWJ9a5urV66zsbX9fVdlJKqm4Tum+M2rcIwWS89Waek6HxwG0RS1t4PeWJKA3/f6
      G4zAg85uoS5HgPedcmGPeqtLIpV1lyGeR8TBxmGqJ9DPB/r2N6Na2mN5dUsqgOT9R9gm9+9/
      STLmRUtfZib5HeMhQtDVu9iWcTa9QJKzhaJ5uX71Eh3bTyr6zc2dUZTy++znS3IOIDkd5PeL
      lPdWCY3PM/ddRwBFITc7D7wnu0NLJK9FCLyhEBcvXkLzHq/RIk0gyamgWilj4hvKBToOpAJI
      TgXjmUxvPcBxJnchFUByGlAU6uUynmCIb5hF8UakAkjee4RtYKGwv72D8+bi3wgZB5C89xwe
      jdUprFMNznx3L9AA0gskef9xTPb39/H4EsyOHe/5ZXIEkJxr5BxAcq75/5TD2sT2HifNAAAA
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SIA type' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 15' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO2deYxd133fP3d5+77NvHmzcYYznKFIiZIoKZJly4lcJzBSuwka1G2QoC2K
      pi2KAO0fDbqgzZ9Bi7ZIEBT5w0D+KNIibY2krlPYtV1LimXZkl1RFHdyOPv29n25792lf7zh
      u+9xhtKQHnJIvvMBCPL9eO895557v+d3zu8sV7Isy0IgGFLk486AQHCcCAEIhhohgOPCMrj0
      4ft8fG35noekMxkymfTdJ7KxfJP1neyB52iats+2trqCbnZburrW4Nby+qGzOXg9i9u3l3ia
      2szqcWdgaJEUYj5oRZP85Vv/l+TYKPlqi3goSLvZYGM7TcfhIuZRyO2sUTUVtEKTV147y83N
      Ep89n+AH77xNyD9CbDREvpCjVK6zvXmb5597llJVIxqJEpuaZXtnl3ZHR5ZlqGxzo2CxtZMj
      7GpjOry0axVC4Qj5coOx1CiqZJHb3sSQHVy9dYvnFmawcBGKhDCaRbZKbSbCzuMuwSNBCOAY
      kSQZLAuH18fKjSvk2m5K6k2iySlWtzOkpiaRZZnbN2/gGZvE64rgdnkx6nlu35Yp1RrUsre4
      vabgiwSJuBzERpM0qgWSMy/wl9/7Dr+xMA9ALbNCyz/LqWiclNJGUqPsLF/AwsKwXLR1g2q1
      Sq1WQlKdhFxuME1iIR91zeD8mTG++c7HfHYxQcd8enyAJKJATydarchmvsnJ6RS3bl5nZm4B
      VZb2Hbe5vsHE1OSnXq+S36Giu6gW0iyePs3+Kz2ZHIkATNPsuleB4Anj0E0grVGmWLdoV3ME
      4knyOxukZk7hdSoIJyJ4UjmkB7BYX7tFuyHjjoTQciu4U89i1PKMj49hmiaS9LQ4RcEwcTgP
      YOg0Gi3qTYlWp44/GCezdoOxyVkURQHo/S0QPEkcSR/AMAwhAMETiei5CoYaIQDBUCMEIBhq
      hAAEQ82RTYUolUq8++676LrOK6+8QiqVOqpLCwQPjSPzAKqq4nA4kCQJh8NxVJcVCB4qRyaA
      Wq1GJBJB13UqlcpRXVYgeKgcmQDi8TjlchlJkhgfHz+qywoED5UjE0A6naZYLKKqKisrK0d1
      WYHgoXJkI8GmadJqtbAsC1VV8Xq9R5E/geChcmRRoD/8s59SbXSXz8myzL/+228c1aUFgofG
      kQng0nKaQrUFgHLAwguB4HFEDIQJhhohAMFQIwQgGGqEAARDzSE7wRbrK0uoviitUoZgfIzC
      7iap2UX8brGziuDJ5dBvr8fjplSr0Kg18boz+FOnKGR28IynME1z325huq4fcVYFgqPnkAIw
      qVWbmKj4A14aukJl9SqpqZO9pZB3Bz5VVXgGwePPId9ShZn5Uw83JwLBMSA6wYKhRghAMNQI
      AQiGGiEAwVAjBCAYaoQABEONEIBgqBECEAw1QgCCoUYIQDDUCAEIhhohAMFQIwQgGGqEAARD
      jRCAYKgRAhAMNYdfE7y8RBuVdqOKPxSmmMszNj3PSNT/cHMoEDxEDikACa/XQ7NYIzQyjpZe
      YmT2RVrlXYyQR6wJFjyxHFIABtVqA184QrucIzixSH7rOqmZ02JNsOCJ5gHWBI8CEI88+3By
      JBA8QkQnWDDUCAEIhhohAMFQIwQgGGqEAARDjRCAYKgRAhAMNUIAgqFGCEAw1AgBCIYaIQDB
      UCMEIBhqhAAEQ40QgGCoEQIQDDVCAIKh5tDLttZXbqHhQCsXGUmNsb21w9jUHKOxwMPMn0Dw
      ULmP7wT7CHr9ZFoNKrltRmbOoFUyGGGvWBMseGI59K4QpWIRj6ngcKr4I7OUdm+Tmjkl1gQL
      nmgOvSvE/Okze//urglORMMPJ0cCwSNEdIIFQ80+AXz/+99nZWXlOPIiEDxy9gmg0+nwwx/+
      kEuXLtFut48jTwLBI2NfHyCZTOJwOMhms/j9fmZmZo4jXwLBI2GfAM6dO3cc+RAIjoUDokAW
      l99/Hznqw+VMcXI69uhzJRA8Ig6MAsmSzqWPlwiGvY86PwLBI+UAAUj4XA4S41Oo8t3DWwLB
      08WBHiCcmsSsZGm0jUedH4HgkXKgABTVgd+rUqm0HnV+BIJHyoECMNpN6m0IhzyPOj8CwSNl
      nwAsy6Ld0kCy0EQTSPCUs08AWjVLVnPzuRcXqVZFE0jwdLNPAC5/jEZxnR9dXGXuRPw48iQQ
      PDL2DYRJssLi/DwbuTouMaVf8JRzYCfYtEzWb1/jnfc+3LfSSyB4mjiwjm9W8nRkF+fPnu7Z
      qpUy+VwW2eVFr+VwhlJYhsn4WBzLsvYJxTTNh5lvgeBIOMADmKyvpkkmA5RKzb2ljhbpnW3C
      kShaq4lhWDQaDfa/9gLBk8UBHkAiEvHz0eoun//82Z41FA5jSiqjsQhu/wlq5RLhaAxZ6oZO
      7540IctisZng8edAATgkC384htybCySRGB0bOCoaE7NEBU8+B1bT8ek5RoNeFDEZTvCUc6AA
      JEnC0gps7NYfdX4EgkfKgQJolLKsZ6oE/M5HnR+B4JFyoABUp4tQMIhDFR1ZwdPN/rlA9QL5
      tpvXX3qGRl3sCiF4utknAIfLy87qNd774AqxmP848iQQPDL2hUFl1c1nP/8Lx5EXgeCRIxr5
      gqFGCEAw1AgBCIYaIQDBUCMEIBhqhAAEQ40QgGCoEQIQDDWHXva+vbVBLDHG9toSgViSYmab
      1MwCPpdyz3Msy+KHP/whnU6HkydPMjU1dSSZFgiOikMLwOtz0dE0ypUGXncW3+gs+fQO7vGx
      e34m1TRN0uk0siyTy+VIpVJHnH2B4Gfj0ALI7GwjOWMEgl6qGtRy1xmbmv3Ez6Saponb7UaW
      Zbxer/h0quCx49Bv5KnTzz9QAidOnMDr9VKr1R7ofIHgYfLQq+RKpUKr1aJSqTzspASC++ah
      CkCWZaanp0kmk2xtbT3MpASCB+KhCuD7H66wk6/BlTwAX46OEPS5HmaSAsF98VAF8M5Ha3y0
      tNv7/fnnp4UABI8VYiBMMNQIAQiGGiEAwVAjBCAYah750KxlWXzwwQdUKhUSiQTPP/9gA2wC
      wVFwLB6g0WjQbrfRNO04khcIehxbEyiVSvXmEQkEx8WxCCAQCGAYBk6n2HtUcLwciwAMw0BV
      VVZXV48jeYGgxyPvBEuSxMzMDCMjI4yOjj7q5AWCAR65AN67vMHFpV1gDYBffMXNyVTkUWdD
      IACOQQDX1nJ8+4Pbvd/n5pJCAIJj49B9gM2NVVpah5VbN8gVy9y4colqS3+YeRMIHjqH9gDB
      kB+tWsMZilPZvE5w6kWKmR2846l7rgm2rEGraRhY1uD3g03TRNeFkATHw6EFkN7aQnJFaDdK
      +MNjZFauMDY194lrgiVp0CorCpI06HRkWRZrhQXHxqHfvPnT5/b+1d3aZGpSbHEiePIRk+EE
      Q81jI4CtrS3eeecdMTgmeKQ8NgK4cuUKjUZDCEDwSHlsep8ej4dIJMKZM2eOOyuCIeKx8QCq
      qjI1NcXNmzePOyuCIeKxEEC1oTEytUCuZuAIjFCsNo87S4Ih4bFoAr1/dYs//LMPer//1hfO
      8je/cPYYcyQYFh4LDyAQHBdCAIKhRghAMNQIAQiGGiEAwVAjBCAYaoQABEONEIBgqBECEAw1
      9ycAy+TyxQtksmkuXrhAulB9SNkSCB4N9zUVwsLE6XRRzW2TmD2DVk5jhLw/85pg0zx4nbBp
      mrRaLVqtFtFo9H6yKhAcivubC2SB6lDwR05Q2rpJanbxSNYEy/LB64TffvttNjY28Pv9fOUr
      XxF7iQqOnPsSgCSrzM4tADASe/h7+czMzNBqtTBNc59IBIKj4LGYDXovVldXURQFSZIwTRNF
      UVheXmZzc5NoNMrExAThcPi4syl4gnmsBfDaa6/hcDioVqs9D+Dz+Zifn+fChQtMTYmdKQQ/
      G4+tAFZ2Svzen/yg9/v8whj/4CsvkcvluH79+r7+hUDwIDy2AujoBulivfe7VOt+TSaZTJJM
      JqlWq7hc3W8OW5ZFtVql3W4TjUZFf0FwaB5bARyEbpj8xU82er9DGy1+5XOL5HI53nrrLTwe
      D1NTU5w7dw7Lsnp/dnZ2mJiYOMacCx5XnigBGIbJn/3l9d7viUSAX/ncIqFQiImJCRYXF6nV
      akDXK3zzm99kamqKTCbTE8Dq6iqNRoNgMChEIXiyBHAvqtUqkiRx8eLFnheQJIlYLMbk5CR+
      vx/oiuLjjz/ufaHyjgDW1taoVqtomsaLL76IJElsbm7SbrfZ2NjgjTfeQJIkMpkMnU6Ha9eu
      8frrr+PxeI7ztgVHwFMhgGg0yssvvzww8mxZFg6Hg62tLcrlMvPz8wC8/vrraJrGzs5O79hM
      JsO1a9c4ceJEz1av13n//feJx+NYloUkSRiGwTvvvIPb7RY7Wj8lPBUC+J0/+i6ZUqP3+4//
      +Veo1ttMz59BAkYnu51qVZG5fPkyU1NTFIvF3vHj4+OEQiGWl5d7tng8zquvvsrS0hKGYSDL
      MoFAgJdeeomdnR0ajQaBQADLsqjX6+i6TqFQYHZ2Fuh+B03TNDwej4hYPcY8FQIo1zVKtdaA
      7T/9zw/44Np27/fv//YvkYz6ee7FVwA4H0/S7hg4HQrlcpmJiQnqdTvqVK/XCYfDpFKp3gus
      6zoOh4Px8XEcDgcAmqbx3nvvMTExQbVaZXZ2FtM0+da3vsWJEydoNpu8/PLLD7sIBA/IUyGA
      w/L1d67x9bev9n7/07/xKmdnRiibAcrrZXAm2MhUiIe8bFdlqLbBEWdpu8TCZIzrWzXAATio
      5jWiUXA4HCwuLqLrOoZhAN0PAU5OTtJoNAYm8VmWha7rA/Ok7mW743X6Q7qGYSBJkgjzHiFD
      JYCDuLqa5T/8tx/1fv/1z5/mjXPT/N5/ebdne2kxxb/6zc8N2EbCPr72O1/GMAyy2Szj4+M0
      Gt1mmGVZ5HI5IpEIt27dYm5uDoAf/OAHbGxsMDs7y2uvvQbABx98wMrKColEgjfffBNJkrh2
      7RoXLlwgHA7zpS99CVmW2d7e5t1330VRFL7whS8QDoexLIuPPvoIy7KYn5/vNckajQZer3dA
      UIexDSNDL4CflfVMDXd0knwTJN8IpmkhyzIvv/wygUCAcrncOzYUChGLxfD5fD1bJBJBVVXi
      8fjAcZOTk0xPT/dsPp+PeDzOwsJCzwNomsalS5dQFAXLsjh//jyGYfCNb3yDU6dOsbi4iN/v
      p9Pp8Od//ucsLCwwMzPTS+ub3/wmJ0+eJJlMMjk5CcDy8jKVSoVOp9NruhUKhZ4In3nmGQBK
      pRIul4vr169z7ty5J9YrPZAALMsim0kTG0miDG/lAcDvf/3HbGQqvd9/+ru/xl+8d4PLK9me
      7e//1RepNjWWSs6uIdfEcpVwOmQu7RiAl9Vag1Inw8lUhB8vVYAE2dUG6+UNPvfcNN//eAdT
      GePHSxXczjq//FoQl8vFr//6r2MYBk5n99qyLPPmm28yOjrai4opisIXv/hFRkZGBiJlP//z
      Pz9wHECxWOT69esDEbErV66ws7NDOBxmYWGhNylxeXmZcDhMqVQiGo3SaDR466232N3d5atf
      /Sp+vx/LsvjRj36EJEmMjY31rnvhwgVarRahUKgnqmvXrlEqlXC73Tz//PNIksT6+jpbW1sY
      hsHrr7+OJElYloWmab1+2J0KQNM0XC5Xr68G0Gq19tna7TaqqnY/2P4gD91o5KhqJs2tXaYn
      kg9yiaeald0SHy3t9n7XW20+vp3mv37vcs8W9Drxe1385/9zsWf78mdOkQh7B2znTo7yueem
      +ZPvfIxudBcOhf1ufvm1U/zLr32flR07mvW1f/Zl3r6wyqXlDHALSYJ/8Ruf43+8fY3l7SLQ
      3Xn7t758nou307x/dRO4BcCvvrHI5EiI+MQcnx0/CZJEqdYi7Hf3QseKovTWZLzwwgucPn0a
      RVF6L5bH4+H555/n4sWLvbGXO1PZfT4fmUymJ4B2u00oFBqIxlUqlX22fD6P3++nXC73ZgRf
      v36ddDqNoijMzMz0Ahjf+973mJubo1Kp8JnPfAbDMPj2t7/N9PQ01WqVN954A4Dvfve7jIyM
      UK1WH7AJJMm0W02c/uADnS44GrS2TlOzxyMsC25vF3n/2hYAd5r2NzZyfHjTFuRv/tJzrGfK
      veMA3nh+mp18jT/4+vs921ffPMNrZyb43T9+u2d7aTHFP/prL/H3/u3/6tmSMT//7h9+kR9e
      2qChdVATC3znJ7f5K+dnqTTanDh1tjctpaMbtNo60/Pd70CEE+M0tQ4gDdhqzTYep4Ox6e74
      TSxpUGm0iQQ8zMzMkEwmyWQyvenwXq+X1157DcMwiMViQNcbvvrqq7jdbvL5fC+/58+fJxQK
      sbKy8mACUDxRJpIOfAEhgKcdw7Qo17Xe73qrAzBg87m7za8/+e7H7ORrPfsvvHCCP/rGT3n/
      qi20//iPf5EfX93kv79lR+P+ya/9HKqq8O//9L2e7Vc/t8ibL87w23/wrZ7t/Kkx/s3f+Txf
      +98fw94iXP9yk7/7pef50+9fIV+2x4J+6ysjvH1hhZsb9ov/a+ERNrNVfnzFnk8mWXcv3L1P
      DMPANE12C3UMs3spSYJUzE++0qLVtmuo0YiXhqZTbbR7tljQjWlBsWrH8UM+F06HTLZkfyfA
      61IJB9xs5+wCdqgyI2Ev6WKj1zwAGI/7KVRbA7XjSNhLq6NTqdtpRwNukKBQsdMOep24XSqZ
      ol2YHpdKNOBmqy9tVZEYjfjIlBp0dDvtVMxPqd6i0fcR8UTYQ7tjDrw0kYAbWYJ8X9oBrxOv
      SyXdl7bbqRALetjO17jzpBRZIhn1kS03aHfstMdiPir1du8llYBU/HDPIRp0gwWFvucQ9Llw
      O5SBQcaDysKhyIxE7uc5GFT6yuKg53BQWXicKtHg/TwHjcZeWQAkQh7a+uBz+JkFAHY7r1zI
      Ua63SI6lUOWuCzKNDmura8SSE/g9TmRZxrIsttZXcAXjxMOBbkb2rqMbJk6nY2AZZEfXcahq
      z9asltjMlpg9MY1EN+qiaw0KpRrheAJVsnrp6J0OsuroHYdlsbWxisMfJRHperA77hlJQpHl
      vvvJkq9qzE5P9GyVcgmPP4iqyFim2VutBvTSlGWZjtZEt2QMw8DrcXfLwjToJiP1Qo8SUG82
      8Xm9A2VZKeXRcRINB3q2dqtBvlQlkUggS930jI7G6to6oxMn8DqVXh7unGNZFrIkYezlUdor
      gztlsbm+iisQJb5XFhKQ2d2iI7kYTybssshnKNQ7zEyN92ymafbut/e3aWLebbs7P3tpG6aJ
      JMm9ppoEezapd/1eOjDwbFr1Chu7eWZOTCNL3PM56FqTRgcCPndvSosEGIaOiXw0+wLdeVEL
      uSwo6oAtu7PF+sY62VLNDpVpeT68sUU2nbZfBrPNW9/9HhdvLg2cD9DpdAZsG6s3uXl7nY5h
      9Wxb66tcuvgTMtV2z1ZMr/Pue+9xe2PXvl67yIfXNgbSrpfz/OT/fcTFS5cH0rl1/TLLGzsD
      NhmDix99xPrWTregjQ4f/uSnbCxdYiXX6h2nt5usra5Sqtm2SmaNn1y8waWr1wdEsHLrJrvZ
      /EA6S1cv8KMLVwdsayvLdAxzwLaxuk5me4Vczb7vZjnNrVtr6HfKxzK5dfVjbt28wa319OBz
      uL5JNpMZeA4ffnSFXD43kM71a5dZ3dwdsN24eplsvohl2bbVW9fZzuYGnk05u8mN5Q2aWsdO
      u1Phw4s3qDWadtqWwccXL1Kq1AbSuXLpIoViefC+V26xvLJGU78jPJ0LP/kpG7cvs5Jr2M9L
      VVm/fY2LV28hy3I3nU6V73zvB1y9eetoN8ZSVRWj06Hfp/hDEebmF0jG7P5C2/Lw0plZUuPj
      9oGSgiccJRny90y1Wo1arUazaTeF2lqTYGKKF84u4FTtGKwvEOal17/AeKi7SAbToK4ZTE9N
      EQna18QZ4pXn5pmctKdCB8Jx4iEPkYgdi9c7bWZOneWZuRMD91ip1EiNjzORHAVAVp2cfeYk
      +bpEMuzsHWci4/N5Cfm9PVt4dJqQo008MTpwzUazTjabG7BNzD3Hi6cH09Z1A1kejDuPjiU5
      c+5l4j47bZc3SLmUodXpjkwjK5ycn6PVajMas9dQa3h46dlZUuMp26ZbnH/xOVJjYwNlMbd4
      lsWT9rgEQCwS5PbKKsadB26ZeHxettbW7LQBl9tLemuNQrlvHynFi6xXyBbscRIkBbcDtnbt
      EHKtXER1ONnYsqe1AERGp/m5F8/g2CsPWXFw9swc+RokQ+7ecUZbw0BhLNlX5oqHU/OThAKh
      oxWAy+NBb9XRjL0CMXXyhSKapmGadwrJolLKUam3eiOn3ZuX8LoVjL4sbW6uc3NpaeDmVYeL
      Qi5LIZ+mrdtKczkVrl+5Qku3H3ok6MfQdZqa3dalXWF1uzC4Z5FlUK41CQbsASpFdaC3NUp9
      A1kAzWaDdke3QyzA7k6GeHKE3qYtpkG5UmMfnTrVtorP6+4zWgT9ARxO58Chutai0Ryc3zSa
      HKGQzXKnqWvpbTLZDD/98NKAMLR6ma10jVrHvsdyPoc7GMGp2uXrUKBWa9Fo2BWMQ1WpVusD
      5aOoKs16nWZrMD/lQppiuY7d9JbwBwI4VXlgdNnY2w9KN/vKXK+xVWjSrNtjKFgGqxu76Lrd
      RveHIhhabeBZdw9tkytWUfrue3c73X0OfXVEW2tQb7Wp979rgCzJNFvNI/YAigKyjHLnqrJK
      LBIis7tDrbl3U5JEPBZBN8yByWftRhXZ6afTtm9+7uQ8pxcWWDx1ys64LBPyyGxmB28+ny+R
      CDsp1O2aB0ByuInt9TMAWrpCxK/S0jp9BykEPE5yhZJtkiRqtTKK6hi4nt/jYH1ze+Bhjo4l
      yWyu07rzJsgK0ZCPer1Bvf8lVr141A7Fkl0TNutV8tU63LVhWLFUHBgxBlAUFcvo0N6rYCTV
      idftYv7UHP2OQXV5mZ9NEfHY+ygFownqxQz1ll0ZyEBDM8C0O6myZFGpVunf6axWLrGVzlIq
      2fF5rVlHckc5OZns1cJIEsVCqSt0be9+zG7lMjszQ9Bnr58wLYVz554j6O/zzpLC6YU5IqHB
      LXc6bQ2zfz8ps0PHApfLPbAf1cjYWPc59AUG3L4go9EQgb50Wu02TqeT0UTi6ASgt1usrG8h
      6U1qLfsl7LTbBIKBwYMlGUmSGR1J2CZFZWdjBa0v86rDQXpnc5/7U9w+4qHAQC01PjUJjhBj
      IbsmlWUZXe8M7DzndioYkgO3q6/GtQx20jm09mANFwpHwOjQaveJRXbgd7sGmnm5XBHZqFNt
      2Q99dzeNhYRu9AlSb5AuNmk1be/g8QXxOGTuDkWEAj4KpT7vY+p0TIgmRvE67MeuShJap0N/
      5Wp0WjhUJ3JfLVwtl9DaGrVG3z1aJrliiVar76ucUrfPUCzZlUEgHCUe9GBKdtTc5fEhY2FZ
      +kBl4PV68EdG8Lv3xCcrBH0uNK1Nudo327ZWJpvewenpE7llUCzX2N1ao9kXtZqYmmEk0hdy
      lx00K0U03aBfqd3n0KDS9/4ZHY1qrTFQvlKnTrktUSoVjk4AqtPN6VNzOLwRwl671pTMDh2c
      BLyuvqMljE67F5kAcDhdJEdGcTrtcyulPOVqg3b/CwhUa01SqSRqX7W3ubaOopdZz9mFbJgm
      W2vLZIt7btay2E2nabdaAy9msVhgdu4ko3FbkAClXJZ6S6PZV4u3OwbxRBzHnp81OxqmopIY
      nyPu23tBZIWJySlUSafZtD1atljj1OwEIyMjPZtlmZi6ibk3xN87dmedpXV78ApZpd2oUy5m
      WdtO98wd02Jz6SqFvtCerDiQJMu+nqnT1C0mJqZIRPoqI9VNIqDi8fftrWRZmIaJftd2lYZp
      DQgKuk2jyROzuFR7gl2n00HGYCdtx98lWaFQLA40TQLBAPlciULBbu8jSZRKRVy+IB5ntywb
      tQrr2xmqFVuQud0tqm2IhQO9PJm6huRwEE/NEvfb75BlWgSj8YH3r9XWqRWzeH3Bo20CZbIZ
      asVdLly91bPJbj+n56a67WYAyyJXqBCLBgcK1NA7BGIJnH2lFAzHsNo1CuXB9nTQ76PZag3s
      R+r3ubh8fRXJ7PTSsVAYn5jA77Hb3DXN4rlnFyn1FXwkEmNleZndTGYgnUqlRLHaJBKyX5pG
      o4Gi2jWh7HDhsjSqrc7g/qiWRUvrEO5rfgUCIRRZQupz3Mu3l0hNTdOsVgbOj0/M8ZkXnum7
      XDeE53R5MHS7QvB4/czMnMBxJ7piGWzu5JAwMO6kI6sEfS4ymQylil1BoNdo48V/V59EdblJ
      JuL002xqJOKD+7O6nTI3by33vI9WzaMZUK9rRCJ2M8bhcOF2uwgE+pohusozC1MkR+ypNKZp
      MTs9PTCF3OsPEvY5KdfsNnxsdIyxRJRCPt/rgMuqC5ds0WnVqfSNwUgSVMplOn0VXigcJZEY
      JRE74k5wLBrFG0owMWrffHZ3i5W1TXtfT0kiMTrWXYXV1+ksFUuU82kUp3fgmsFwjNG7Cr6c
      2+TDyzfpGPYr0zEVpsYTuD1751smpVIBly9E4M4DliDodbG6ukY8YUc5kCSmJyYIhUM9U61S
      ZGRiloWZyYG0XS4XemfQI4WiCbyKSbuv0mzWyzjdPkp9kQ+3U+bW7VUyfREfj9tFu90mEosP
      VAiyZVBv2bV6R2ugI+PxBpid6kawLKNDvdXCpUhUGnvHmgb1pgaGRrNtP3RZ6q4t8Hn71jEr
      fuROkXJ9sOln3LUVpWWZJMdGafXlB6BYruOUjV6fxOHx0WpqnDx5ArfD7n9IMpidNlpfs8bt
      cqLrOh3dzmO1UkJ1e6hXB3cdLxXz9AWVqBYyLK+uU6g1cSh2Pv1+Pygu/G67gjJNE5dTHWh+
      Aexs3GZpdftop0Nn0mkcwRgje3MxAPxeLzdur6L4IoR87nuem87mUF1eGpU8jBWqGPAAAAke
      SURBVNm1j9bSCPQJoFmrMTZ3Dtm7hdrnLUyjO9tvbW2d0WfnQFYYSyZZWttBj905X2Jk7ICd
      ICyTj2/cZmFuBugKwxcIUykVyFU1JlJ2CE2yjH3Ng2q1ytbmOt7ENKG9tq/T5WZr6ybx0f5Q
      r8xYMonPZ4s8NXmiNwh3h+s3byJJEgvzdu3odPvoVK6xWmgTiI4Q9sogq4yOjgKj9HKoOHn2
      2bP2gFNfvhWnF0dfFAi9huyJUSnmYGSv0pIUnJJOrljueb6djVVq9QYVw35+rUYNnz+AgYxr
      75qKw8PCoh2w6LtxZHlwY+N0JkOj0SQUse2hSJxQBGKaLchGrULqxCnGJLtZE4yN8mokwc5u
      GsO0UGSJTj3P9dVdgqEQPqd9TcXhwqkqeNx9756sMjU1TaFSO0IPYJl4fV7SO9u9wZruTcWI
      xROE/Z+8g8LC4jM8s3CKuZNzPVuzXiUQ8FPsc9vlQpZStYbWbtuhVSAY8OP0hYhFbK/SaNTI
      ZDNk83b78SCKpQovPreIw22fK0kSpWKBam2w5jBaFda2dmn2dda1js7i3MzepK694/bKIBCy
      vQpmm0pDw9/XFLiTVn/renJsFL/Xy27G9hSWoeMLj+DzeAl47B25c5ldNjc3afXV9vtWjZk6
      5aZOPBKwm1+WRb5Uw6lYhMN9URdLR5ddtPrCk6mpWeYXz3B2zvaGLo+PiclJ3KpFWx+MvA1g
      6VRqGoGAH7fLfolHY0GWVjbZ2Nrad4rbZb+sbo8PrVEjm97uew8kNtZXQe73Mg5CoSCW3kK7
      4y5Mg0w2Ry6bHgxkAOVSkVAofHQeoKM1MRQvozFrcKt0WcYhd6cEJ+51MlAr59lIF3G7PczN
      dgdcmo0GnU6bjt5XcJMnaDUbjESjAzHtRquF0+1jZMSurb2+AD63k3D4kyftbW1vEAyEKZaL
      zEx1a+ydjRUsZ4DpEfvlsCyLkYkZtEwVj9NOW3G68TgNmndqcVNnO1NganKccF8z7/K1JaLB
      UG/p5L3wBUL4AqEB2/bmOsVKHZ9HodzQifocIEnIhka5rhO7x7UAkFVSqfFBmyQRi4bZKbT2
      wtFdr1sulQn4A/j8dr47bY1isYBuqaSSib3Tu/eaTA02EfdhdFhfWyExlqJUrvQqwlyhxImp
      Scb7BtwOzLqi0NFNJMmiVCoRCXYFUSpX8aNiWhYKEqonyMkTdz1ny2Q3nWYkNUk40Ne0Nppk
      Sk0Ud/3oBCDJCpXsBpojRPJOu8wyaTaaNHWLsZD/E88PReNsp/P0h7UCoTBOj49EX/NAkiQ8
      3sH4OJaFjEVL0zD7RiUzO1v4IiO4HZ98mwsLz6AoCuGoXduPpibprK2QyRWZGOuKant9FUNR
      aDXKNNsmfpcClkl6Zws9HCY0tidUvUWtbaHViiTH7Q18G40GHl+w5x3uh2g8jik7QJK76QJm
      u0Zb9iBpu7R0k4FA26GQ9oWjN3czdFoNgpHTPVtba7G2voXidPUEcGhUDy+cf2mfeTdXRpIg
      6PcecNJdl1AVRiITJEe6InW5XdQaDRwOBx3DwnGvz0YoDs6/9Mo+882lVabGRwlHY0cnANXp
      5plzd92o2WE3W6BarQ0MWh2IaXBrdYP5WXu43TRNbty4AYrK+efP3fNUyzJQXB6MarHfiCWr
      +FWVYqWG133vL8w4VIX1lSVqhoNnAt12b2Zni3rHGnjgsViEjXQBny+I22F7gJkTJ6g1Wrjv
      eCSnn+fPLOxL58WXfg5VfbAi9/iCTPruquEkifT2NlPT4wMzIQ+NtBeO7hPk7Ilp2h0Dte+t
      8gVCjCcTNB5wK6SD1hzPnJhGN6yBUPi9MA1joLOM7GB+ZppitdULR98PU9MzLN9eoub2H50A
      9HaLS5evEfKpBFKLJAIOUFwsLi7szQb85EmnFhKnT51EddrtP5fbQzIRQZc/uf/QKGXY2Skg
      WTrZms5kRAFZwTQ6NDRIReOfeD502/Gqag+OJSemuXutm9sfZt5/1/cIJBmP28X6+jrBWBL3
      XgesVtxlI9diamIMn6dbNT/oy38vZIeP51984cFOtiyy+W44WuqrnDxePweVttPlZHVni7mZ
      6QP+9/7x3cdiqla9yGq2zmRfMMLhcFAtbaHpJ+7tAe7B2sptHN4QIb/3aD3A/OwU2VLFHgXc
      Q5IklE9RarNWplpvkQoOvmArt2/SdiWYnrh3W9EbHiXRUYkEfUguux0QDAS4fXUJ1e0l6Puk
      tqaEYUmMj96ne99DazWQlL4pE6ZBoVxHxhqYH/9YsReOPiyVYg5ZvXcU72EST06g1AbdT7Va
      w+sPfHrL4gAWztitiSOtkvKZHbbSOVyRcTwh56ef0Ifs9JFKhFEUO0uWZTJ18hk+xXkgyQqj
      oyODRtOgY8r4PW6ikU/5ioxlcHNpmbZu8tzZM/eVb9PUMVGQZQc+tz0SHAl4aOTqZPJFQp8S
      AXsSyGYytNRH/zWe2zevUyhVMZTBOVlej4e2KQ3MBngQjnQgzBeKEovGep20+8HtVNjezaH0
      DWzoWotarav0+0aSkSQLnz+AtO8bloOUikWePb24L/JyGDr1AreWVvC5JTYKdvza4fZSKpfw
      uu+vIngcKRbyzC2cYfx+O8BHQCAYJBwJk4ja0bj87jZt06TeaPZWIT4oR+cBTIP1zW0i4TDK
      A8iqXm+gSAaVepPonbClrOL3uKhUa/f/UT6zTSZfIRyJ4PyUKJAsS5iWRTRy/x/+c/oTPPtc
      oJtGn/eSJBkZC0l+8r9sWS0XKTf1YxHzSDLFyF2dMbfbRSZTJDXys38690iWRALddm+xSL3R
      YnQsNRCjPwxaq4muG6ysbXD2jB2Cu3jhQ1JTMyQe4lcps+kddBOcbi+xyP17gYMopdfYLHZw
      OF0szH5KrPxxx7J6PvRp20Xu6DyArFAtFVA8D7ZTRLmYp9rQGBu3pypUywWcTie5QvmhCuB+
      OoOHwtTRFT/z066Bhf1PLHeNVD9NHJkALNPA5XJRbtT3zW0/DCNjE9zVjcXrDzF3KsCNmzeP
      JI+PDMtge3ubgM+N6hNfuH+cObImkNHRyBfL1As7eFOnGQ3+7O3FSilPsVwjHE0QCnz6iOHj
      RHenCfat4RU8Xvx/jnJ9HYGjP2EAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Stat' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='visit buy month' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAaR0lEQVR4nO3d6W8beZ7f8XdVsXiJl0Tx0EFJluXbPXZ3uz093rnanV1gMMAGyW6QyZPJ
      BIt9kAd5lP8iSPJknwWbRwE2CwTzbDBI5gS6e2d63Nvto32obd03RVGieBfrygPZasuibdIt
      WxL5fQGGJbJ+rJ9Y9WGxjm/9FNd1XYToUuphd0CIwyQBEF1NAvAaLM5Osr5Z4eYXN/c87lgG
      lbrJ8soyAEZ5ky9u3aFarbC0lmf6q7vcvPOApcfPP2lTrTdeOs+V5eWXTvMsx6qzPDvFnS/v
      slUx227fCRTZBzh4H//TR4S9Kl/cX+Ptc4O4/h6K2RUwa+R9I3hKM2ROfgu/VSQci/FobpmR
      M5dZevApdUPDcCqkUhnsWgm7UWXLiZPqMfD7A6zkyvTHA8RjffzTn+5w8ewoZcOhms8S6+8n
      2BMkv1UhkehjM7dKKp1mYWGJcKSPmlEjGPBiNFx8dhErEMPdXMM79g5OeYP3r7x92G/dGydb
      gNegJxShXKxx7sIEdcPAMOr0JtJEor3EAh4yJ06DU0dTVUKpEbZyeUbSMSKxOD+4/gMymRN4
      MDEaDYLRfqIBDcNoUClusrWZx9UCeKw6ikcju75BwzRJDo0S8PewODPN+TMjTC/liPg1Zufn
      SaVTlLa3MRsGJjrRHg+FYg2zZtATjuD3gKp6DvttOxSyBThEVr1EdrvBUCre0vSOWefe9BIX
      z06gPH4sv5Gnrz++87tjMre0zujI0O7zrcitzBPsz9Dj7b7Pw28cANd1cV0XVe2+N08cfy1t
      9xyrwfT0NKFoL/mNPIlEnI3NEmfPTqC4Lo7jvO5+CvFatPSxrWgeIpEIVq3CwNAwS9kNhnp9
      dOmBA9FBWtoC2EaVbG6TdDrF6vIymVQ/y1slzqUUFEBVVfkKJI4l2QcQXU3WWtHVJACiq0kA
      RFeTAIiudmDnv13XZWVlhUQiQalUwuv14vf7+eKLL5iYmCCXy+HxeEgmk+i6TiAQOKhZC/HK
      DvQCkCcr/q1bt8hkMgwPD6PrOn/84x/J5/OEQiE0TeP8+fOcPn36IGctxCs50K9AS0tL3L59
      m0KhwNLSEjMzM3z11VecPXuWWCzG9evXiUQiPHjw4CBnK8Qrk/MAoqsd3D6AY9H47H+2PuOJ
      D9HiEwc1eyFeycHtAzgWjT/8XcuTq7GMBEAcOvneIrrakSkDmpycRFEUCoUCtVqNq1ev8utf
      /5pgMEi9XicUCuE4DufOnWNwcPCwuys6xJHZAoyOjuLxeAiFQni9XoLBIJlMhosXL9JoNIjH
      45imyW9+8xukiE0clNa2AK5LpVolGPCT3yzQG4tQLNfojUUOrCNzc3MUCgV8Ph+ZTIZCocCJ
      Eyfwer0MDg5y7tw5RkdHmZ+fP7B5CtFSAFzHZmlljaF4kLm5NVaDAXo8Cr5QGL+6UxGmtFkV
      5jp7K8nODIYh/eTssA1uYefHBnz77ACUlwkDFzMR3NoWrj/W1vyEaKa1LYCi4JgG5aqGqoJt
      21iKivJU5bXSVhn2zms+rfrzv8XdXmypqf7e3+K99p/am58QTbS8E5xOp/EHewiEewmFeqjV
      GwQ0BdfdqQhrNwCKwiufPFMURU68iQPRUgAUVaO3rw+AgN8HQKjnyBxAEuKVyceo6GoSANHV
      JACi49m2zfT0NOVymRs3buA4DgsLC8zNzR2dM8FCvC6O47C1tUUqlUJVVer1OpOTk+TzeQmA
      6HymaXL//n1KpRLFYpFMJsP4+DiKokgAROcLBoP89Kc/3fNYKpViYmJCAiA6n712F2vqN02f
      kwCIjmfnvqLx2d83fU6OAomuJgEQXU0CILqaBEB0NQmA6GotBcB1bBaXV3Bsk+npaUrFAlOz
      C0hhojjuWi6IUVyXYm6F7YqJzRbxgEqp4dKjOTsVYbbd1owd28GyrKceaT1OjvNsWyGe70Vj
      2LVWEmlbZFeX0YYG0TFxbJXlDZPzAwoqKoqioChaW51SNRWP5+nZt15Qo6rPthXi+ZwXFE+1
      tBapHi/vvncVgIHB4T3PyQ0axHEmO8Giq0kARFeTAIiuJgEQXU0CILqaBEB0NQmA6GoSANHV
      OuJ06pNxyp78rGkalmWhaRq2baOq6u44ZorS5j1MRUfriACsr68zNzdHrVbDNE2+//3v84tf
      /IKBgQEqlQobGxtEo1FOnz7NyZMnJQRiV0d8BUqlUoRCIQKBwO4AG5lMhnw+Tzwe58c//jFe
      r5ePPvqIYrF42N0VR0hHbAEWFxfJ5/NMTOwMulcoFNB1ne9973vcunWLer3O+++/TyaTIRI5
      uEE9xPHXEQEY6rEYnIgCuZ0HavCtlArVeb53uhesVSjCRBjcrTmUvhOH2l9xdHREAIxP/jvW
      9O9bmtZz8gMCf9n6cK6is7VYEWaxsLQMwNryIqXSNo9mpCJMHH8tVoRpqIpCo1Yil12nYELS
      7x6ZirB2Ro10XVeqybrMAVSEmWRXl3GsJEbDQLdMlkr1I1MRZrZxWFNRFKkm6zJtVYS5js3c
      zBQVwyYzeoJoKLBTEXblPQBGRkf3Ti/fg8Qxti8a+fVVFG+IdLKfjfUs7Q1+KsTxsm8L4NdV
      /t+vf4uDzl/+m7/qjDNlQjzHvvU7EInz/nuXiUaiaKpcMiA6274AaLoPyzLY3tjAaLR3ZEeI
      46bpN5yAL8jI6QkCPjlaIjpb0wDYlgVtj/0uxPHTPACOQ71SpG7KVyDR2ZoGIBwJYbkKPk97
      J7eEOG6aBmB9NUustw+pGxGdrmkAYvF+VhfmMG05zSs6W9MANOo1/AEfpiX7AKKzNT3OGe3t
      I54wCcphUNHhmm4BtvI56paDnAgWna5pAOL9cRamH3H/q5k33R8h3qimAXBQufjWW5ye2Ln0
      2bVNvno0jVmv8ODefRYW5vny3iSyjyyOu31f8hu1Ep/+8Qa9gydQ1Z3zAIqmE+4Jouk+wpEw
      hu2QiQcpmy4hqQgTR1xbFWEeb4AL58/wcCm/u0o6VoPN/DqO3aBQrJHsj7G6XeVsSgGpCBNH
      XFsVYarmoV6rYVW3efBogXfPn0D1eLn41iUAnowQlkzt/C8VYeI4axoNVbVZXtpibHTwTffn
      UNi2zdzcHK7rUiwWmZubo1QqkcvlWF1dxTCMF25GxfHVNAD9Ayd4570LBL3d8VXh4cOH3Lhx
      g1KpxM2bN6lWq/zud79jfX2dX/7yl9y4cYN6vX7Y3RSvQdM1PL8yz3a13U88FTVxtuWpFd/R
      uUXhkztIF4tF0uk0d+7cIRAIMDs7y/vvv8/c3Bx3797l6tWrh91VccCaBsAb6MHJrXD3wRTv
      fetMSy+0nssRHf+g5TsvK6FU6718zc6dO0dfXx99fX309vaSSCTwer04joPf72d0dFR2nDtU
      06Wq6zqWBT69tZJ413XJrueobFbxelQKlQYVwyLo8+DTNQoVg3BAx3WgUGkwkggxcKB/xquz
      c5M4G49IAGyDBnifmcb3+H/T24N+8vob7Z94vZoGoFqpoADDz9wD6HlqtRqVchlqJsWaScDr
      wTBtEhE/5brJRtFARaFhOWyU6gzFgwf5N3wj1sNf0bjxP1qaVolmJAAdpmkAAsEgXr8P/QXH
      T5+m6zrvvPsORuNTvv783Pnc7O/xMhb3srRRoS+ocXG4D4CGYaA1GruvYVoOjtXifodpoTzV
      tmE6WC22dUxnz3wblkWjxbaq5dB4qq04Hkzz+cu4SQAs/vlPX+DvT7dcEJPL5TDrFSq/e/En
      aRVYePyz34mjNXp2n6sVDJxSa2dovRvb6MvLu78bmxWsYmttPZtlfE+1NXPbNFpsq7p1Ak+1
      FceDldvEeM4ybhIAD29dOs/U4jqm3don4+DgIIrToNz37Lfn5/MPp9BPfH2f/nJ/AFdvrb13
      II7vqba1VBir3FpbTypC4Km2xkqcxmJrbZVokNAJGVvguGmUkxjPWTeb1wRHw9hoUhMsOt6+
      ADi2zeL8ItFYTGqCRcfbFwDLqFJvmEx+9RBHrvMRHW5fALzBMAGvTm9A5e7DuUPokhBvTtPD
      oG9f+wFvv+meCHEImu4E51cX+Pn/+TlFY+fQ0ZOKMKNS4M6dL1laWuLLu1IRJo6//QNkZJfZ
      LNW58v77ZBcXcPi6IqxeKRPvT7C+uU1/xI8hVwiLY25fAPoSaXTNJZfLMTicQWWnIqxS2sbS
      wzi2xcUz49ieAAE5SiqOuf1jhNkNlpZWcb09+H06AKrHy6kzO5c6x3ujAAwPBnamf1M9FR1h
      amqK+fl5PvjgAx49esTQ0BD37t0jmUxSKBTIZDL09/e/sf7s2wKsz05RV/0Y+SzZYu2NdUR0
      h4mJCWKxGIqiEA6HyefzhEIh7t69y+zsLJ999hnlcvmN9WffFiCSStH4ag4HnUig9UsbRPe4
      c+cOuq4zMTHBxx9/zPDwMFNTUwwMDOC6LslkkuHh4aZt8/k8Q0NDFAoFZmZmcByHYrHIxMQE
      Xq+XyclJisUioVDojfwt+wIQjCb587/4C3SfTwbIEE3Nzs4Sj8eZmJgAYHJyEkVRaDQabGxs
      sLi4SCKRwOfz7Wsbj8d3f/7ud7+77/mTJ0++vo430fQ8wNyDWyxuO1y7dpWALnu6Yq9Tp05R
      KpUolUr4/X5GRkaYn59nbGyMwcHB3UA8y7jx9zj5qZbmoQ1exnvpJwfd9X2aBiDSF8VfLmNa
      jgRA7HP+/Pndn69duwawuzUAyGQyTdvZC59iL37a4lxcOIwAuI5NrVrj0cMp3rpy+bV3QBwv
      lX/4CW6t0NK03iv/Ae+lf/uae/TN7AuAUS2ytF5ifGIEuRpaPMstreJW861Na5Rec2++uX2H
      QRVFwaMq2LYjd30THW9fAHw9MWI9DgvTy5TrchNZ0dmaXgwXicTRo0H6evYfxhKikzQNgO4P
      k+oNUZfbiIsO1/QwaKWUZ21lgxZr4oV4I1ZWVpicnOSHP/whi4uL1Go1yuUy6XSaP/3pT1y6
      dImTJ0+2fHdCeM4WQPNGGM4k8LR2WyAh3oiFhQUMw2B7e5tMJoPjOIyOjqKqKoFAgAcPHvDw
      4cO2XnPfKu66Lna9iKX60J65MZbrunv+iePr/v37u7eE//zzz6nVanz++eesrKxQKBTe6AVp
      rbpw4QI+nw/TNJmenmZ1dZXZ2VnW1ta4cuUKp06dIhwOt/Wa+74CrU9PMl8w6Q0H990Vory1
      xv2pFcLhHoy6wflLl/DKBUOH5vPPP2d0dJRoNMq9e/c4e/YspVKJcrlMMplE0zT8fv++dq7r
      cu/ePT788EOKxSLT09MsLy9jGAbZbBbDMBgbG+Py5cttfZ143cLhMNev79yaMplMcurUqT3P
      J5PJtl9zXwC8gRDnLwwT8Xnxas9uAcCrezAsh1RfGNN28ajHe4yw9ga+ODrji7muy5dffsmZ
      M2eYmppicnKSSCTC9vY2s7OzqKrKxYsXGRsba9p2eHiYzz77jPHxcWzbplAo4PF4uHz5MlNT
      U9y+fZsLFy6gPvstoJ0+Pruc2mj97HIyP/6vWLf/oaW2Sv9p/D/5x93f2xojTNNV7ty5y/j4
      GOl0ClX7+hMgFOunt2gwMJBiY6tEj66Ae7zHCLNbvP/p49ZH5jbplmUxOjrKrVu3CAR2ipMq
      lQqPHj3i+vXr3Lp1i8nJyT3X6Dzhui7vvffe7so9NjaGpmlYloWu6wwMDHDt2jU0Tdu3BVBo
      PQTKM8up0cYyfnY5WQrgtvZhpbjOnrZtjREW7k8Tm5vln7+4zY9+9OfoTz2najpjJ8YAGBqQ
      irDDpGka3/nOd9D1nSV04cIFNE1jYmICn8/H9evXsZtslV2zjnn7fwPw9Or05LPWfOoxB/BM
      /AvUWPOL2zrBvgAoqoaqqIR0lWLNwh+WC4KOGqe0hvXwV6jAk1VcZefDSOPrlRmgAegX/zWK
      b6fAxDWrGB//t5bnpfad6K4AAJx/+wrpQpn+kFSEHUVOYQHjo//S8vSeiQ93AyD2avLlyOK3
      v/y/3L1zm62q3AtfdLYmAdAYGkxiuRr+LhklUnSvJgFQUFQFv98vNcGi4zU9PpQeGsZp1DDl
      3oeiwz33AKnjOHK5g+h4zW+Ou57FaJjYEgDR4fYFwG7UCER78ei6DJEkOt6+AJRzK2QrLvGQ
      l1rjaFz3IsTrsu84Z3RonLQ1ixM9RTwkJZGiszU50K8wNDr+5nsixCGQM10HYG1tjd7eXrxe
      LwsLC2iaRrlcxnEcRkZG8Pl8uxetiaOlraJH13VYWligXq+xvLouV4Kyc1nyH/7wB7a2ttjc
      3OSTTz5BURSmpqa4c+cOv//978lms4fdTfEcbW0Birkl1rYqmLaNT3WpmAkCXV4Qs76+TrFY
      ZG5uDlVVKRQKrK6uUiqV+OCDD7h58yaTk5Ok0+k25vNiTpvvtW3bONaT8d7abevAnqKW1h1k
      QYzbxpi9LrS8jNsKgMcXwGPnKZQsFMclnlFQle4uiBkcHORnP/vZ7u9Xr14F4MqVKwD86Ec/
      auP1W2Np7b3XmqahPu6303bbve/1oRXEqG20hVcviHmRYKSfS29/PXyNotDVt0+081NYU79t
      eXrve3+Dospu11HS1tI4SgXSR4Gz8ZDGH/6u5em97/57kAAcKXLnH9HVJACiq0kARFeTAIiu
      JgEQXU0CILqaBEB0NQmA6GpyVuYQOY7DJ598QigU4vTp03z00Uf4fD7K5TJ+v59IJMKZM2fo
      6+s77K52LNkCHCJFUYhEIrvXvQwMDBCLxbAsi0QiQS6X49NPWx1YWrwK2QIcIsdxqFQqDA8P
      k81myefzjI2NkU6nOXPmDMPDw6ysrBx2NzuaBOCQuI6NalW5duVbu4+NpL8NwMlMCnAIRgMk
      oid3BpzWgyiq3KTgoEkADomzOUP1f/2rlqcP/rt/REtffI096k5t7wNsb+YxjBpLK1mpCBPH
      XltbALtRY+bRIwKJAaIem4rpdnVFmNPmOLK2ZfPk7v1tV2Y5Nu7jeUtF2Eva8poqwsrFbeoN
      A82ok92uEx/u7oowV2tvA6p5NJTH7e12K7NUDe1xW6kIe0lbXlNFWLQ/zXe+t7e2tZsrwsTx
      J+cBRFeTAIiuJgEQXU0CILqaBEB0NQmA6GoSANHVJACiq0kARFeTAIiuJgEQXU0CILqaBEB0
      NQmA6GptBcCsV3jwYJL19SwPHs7IpdDi2Gt7iKRYuIdCqcpAxEPRdAlpUhHWKqkIO+YVYdXC
      BtmtEoneMIv5KudTCipSEdYqqQg75hVhPb1JLvcmARga3nlMvgaJ40x2gkVXkwCIriYBEF1N
      AiC6mgRAdDUJgOhqEgDR1SQAoqtJAERXkwCIriYBEF1NAiC62isFYGNtidt37mHKhXDimHul
      ANRMl+F4iLr18mmFOMpeKQCJvigFUyWkH3R3hHizXmmUSH9PhJM9EVzXxXEcXNdFcVU83/3P
      rb9I/Ay2be+0VRQ8V/5mZzjQFijpb+1pq577l3gG3mmprRrL7GmrjPwZHm+4tfn6wnvaEj/T
      1t/suCquZaEoCq6/r622bk8S+0k1V3iovfl6Q19Xgmm+9uYbO7F3OX37P+KatZbaKoPv7Gmr
      XfxrlNE/a6mt2je+dxmf+CGenlRr8w307V3GyQvP/ZsVt516wiZc18V1XdS2Kqu+5jhO17Xd
      qaBrvcLpIMhyau4bHwVSFGV3JpVikfYqTnfKG9dXl5hbXAXANCpUjdZe5ek/biu7zHbdZGZm
      Zt90plmjVjOf2/aJxYUFnKc/DxyL7c1NyvXGS9uuLMzTsG1mZude2udnV36nUadcN17Y7kVK
      xeLOD2aVrXLz13l6ObmOxcLS8gtf0zCMPdV+tVKBrx5NYzl73x+jsX9HsPikP489me/G2jIP
      p2cf13A7GMaT99WkWGy+VVFdm/nFFba2tl7YX2hQLNb3zXd+5hHzS2vPLeM80IGya+UKG5ur
      zGdrDEZ1FL+XoK8Xs1rgy4eznD97ElzwBYL09icI6Dv1qZVKGc0f5uPf/YpYMk2joRKOBPD5
      VPx6BKOyye2HC1w6N4ZlgS8UJplMoD9VJ2rZDtvLc2TzZdz6LbZsnQAKfr8Hj19jY7XIyXPn
      iIX9Tfvuuial/Drrupe1fI6gL0gg4MGqWgRTPkJ+7wv/dts2WJiaYttSuPnpR3jC/fRFY8RS
      aXr0F3/OOGaDtWyWaDhKvlDCtGyc8jpWIMm7F0+/9H0vl7epVAyor5NrBKlHA/T1J/F5ms+3
      up1nc6uM6llFcxXsRoVCzSEei4BT59HDJfr6giSGxknFozvvr2XiuC7T92+Srbgkgjoej8Km
      4UGrZlF64mh2HUXxogd7cOaXOPvW+T0rWNWwift0puZm8Cgu67kKfREd1eelmCsT6Q0yOTnN
      +OmTxONJkvEYuDaFzRyVSg8b2VVUr4+g30dhq8DMSp6zowlK1Qa9/WE2lktEe/1MPprn1OkT
      xPvT6IEQrmHwxY1PcDxRevwesKrkqi7psPfgzgM4lsHa1ja4Gn2RHnoTaWLhEBtrSxSrBoOp
      JB5/iBMnRlnPruPXvy7OjvQmGBlM0Z8apL+vF4+moPuCDA+kyK4uUKyaDCUTeMMxxk+OklvL
      4nmmSFr3BVGA4cE0iu4nHPCSHhzGp2uomo/xiXFUnn93gFphCzcQobK5jmm7eP1BBlL9aLqO
      1/PyQvJgJI6NwlA8hD/cSygSI7ex/tKVHxwWl1cI+nwsLi3j7wkzmIwTjsYZSMZfOt9Cfp2G
      o7KZW6FuayQScbLZDbzPWfkBtss1/JpJabvC0to6lmVTr9cpbuao1GyiIQ89sf499ylQNQ+O
      baH7w4wOpTCMBsFoH5Ggl2hfklQizvDYGJmhAbweHUVVqVWrVKvV3dfQsFgtVujxePAGIsTC
      /t0bKni9HlTNw+iJcSLR2M7KD6CoDI2MYDVqO/sReoDidpl4X4yJ8VFi8RSZTIZQIIDXq6F6
      dMbHx4nEeunvjVDZ3qRiQywWZyAVR1EUfMEIo0MD9KcH+f8Vwo6s/WayiQAAAABJRU5ErkJg
      gg==
    </thumbnail>
  </thumbnails>
</workbook>
