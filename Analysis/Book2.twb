<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1211.0901                               -->
<workbook original-version='18.1' source-build='2024.3.2 (20243.24.1211.0901)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <CascadingFiltersHamburgerUI />
    <CustomReferenceLineTooltips />
    <_.fcp.IndividualControlFormatting.true...IndividualControlFormatting />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <ParameterDefaultValues />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
        <calculation class='tableau' formula='20.199999999999999' />
      </column>
      <column caption='Non_Photo_min_perDiff2023' datatype='real' datatype-customized='true' name='[Non_Photo_max_perDiff2018 (copy)_1510957715805691906]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[PerDff]' type='quantitative' value='-19.399999999999999'>
        <calculation class='tableau' formula='-19.399999999999999' />
      </column>
      <column caption='Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Non_Photo_max_perDiff2018 (copy)_1510957715806212099]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='2.6000000000000001'>
        <calculation class='tableau' formula='2.6000000000000001' />
      </column>
      <column caption='Photo_min_perDiff2023' datatype='real' datatype-customized='true' name='[Non_Photo_min_perDiff2023 (copy)_1510957715806420996]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[PerDff]' type='quantitative' value='-2.3999999999999999'>
        <calculation class='tableau' formula='-2.3999999999999999' />
      </column>
      <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
        <calculation class='tableau' formula='2020.' />
      </column>
    </datasource>
    <datasource caption='v_countrydate+ (ecocapture)' inline='true' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='mysql.040164612je0re1ch3d4c10oumvj'>
            <connection class='mysql' dbname='ecocapture' odbc-native-protocol='' one-time-sql='' port='3306' server='localhost' source-charset='' username='root' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatsdiff' table='[v_twocatsdiff]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatstats' table='[v_twocatstats]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
        </relation>
        <cols>
          <map key='[City]' value='[v_photovisit_rating].[City]' />
          <map key='[CountryCount]' value='[v_frqcountry].[CountryCount]' />
          <map key='[InputID (v_photovisit_rating)]' value='[v_photovisit_rating].[InputID]' />
          <map key='[InputID]' value='[v_photographyvsnonall].[InputID]' />
          <map key='[PerDff]' value='[v_twocatsdiff].[PerDff]' />
          <map key='[Percent2018]' value='[v_twocatsdiff].[Percent2018]' />
          <map key='[Percent2023]' value='[v_twocatsdiff].[Percent2023]' />
          <map key='[Photography (v_frqcountry)]' value='[v_frqcountry].[Photography]' />
          <map key='[Photography (v_twocatsdiff)]' value='[v_twocatsdiff].[Photography]' />
          <map key='[Photography (v_twocatstats)]' value='[v_twocatstats].[Photography]' />
          <map key='[Photography]' value='[v_photographyvsnonall].[Photography]' />
          <map key='[TravelMax]' value='[v_twocatstats].[TravelMax]' />
          <map key='[TravelMean]' value='[v_twocatstats].[TravelMean]' />
          <map key='[TravelMin]' value='[v_twocatstats].[TravelMin]' />
          <map key='[Travel_Date]' value='[v_countrydate].[Travel_Date]' />
          <map key='[Travel_Month]' value='[v_countrydate].[Travel_Month]' />
          <map key='[Travel_Year (v_frqcountry)]' value='[v_frqcountry].[Travel_Year]' />
          <map key='[Travel_Year (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Travel_Year]' />
          <map key='[Travel_Year (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_Year]' />
          <map key='[Travel_Year (v_twocatstats)]' value='[v_twocatstats].[Travel_Year]' />
          <map key='[Travel_Year]' value='[v_countrydate].[Travel_Year]' />
          <map key='[Travel_month (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_month]' />
          <map key='[Travel_month]' value='[v_photographyvsnonall].[Travel_month]' />
          <map key='[Traveller_Country (v_frqcountry)]' value='[v_frqcountry].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_Country]' />
          <map key='[Traveller_Country]' value='[v_countrydate].[Traveller_Country]' />
          <map key='[Traveller_ID (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_ID]' />
          <map key='[Traveller_ID (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_ID]' />
          <map key='[Traveller_ID]' value='[v_countrydate].[Traveller_ID]' />
          <map key='[_allcount]' value='[v_twocatsdiff].[_allcount]' />
          <map key='[activity]' value='[v_photovisit_rating].[activity]' />
          <map key='[inputID]' value='[v_countrydate].[inputID]' />
          <map key='[location_Type (v_photographyvsnonall)]' value='[v_photographyvsnonall].[location_Type]' />
          <map key='[location_Type]' value='[v_photovisit_rating].[location_Type]' />
          <map key='[month (v_photographyvsnonall)]' value='[v_photographyvsnonall].[month]' />
          <map key='[month (v_photovisit_rating)]' value='[v_photovisit_rating].[month]' />
          <map key='[month]' value='[v_countrydate].[month]' />
          <map key='[rating (v_photographyvsnonall)]' value='[v_photographyvsnonall].[rating]' />
          <map key='[rating]' value='[v_photovisit_rating].[rating]' />
          <map key='[sentiment_comments (v_frqcountry)]' value='[v_frqcountry].[sentiment_comments]' />
          <map key='[sentiment_comments (v_photographyvsnonall)]' value='[v_photographyvsnonall].[sentiment_comments]' />
          <map key='[sentiment_comments]' value='[v_photovisit_rating].[sentiment_comments]' />
          <map key='[tot2018]' value='[v_twocatsdiff].[tot2018]' />
          <map key='[tot2023]' value='[v_twocatsdiff].[tot2023]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>inputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[inputID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>inputID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Travel_Date]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Date</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Month</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CountryCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CountryCount]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>CountryCount</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_twocatsdiff)]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tot2018</remote-name>
            <remote-type>20</remote-type>
            <local-name>[tot2018]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>tot2018</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tot2023</remote-name>
            <remote-type>20</remote-type>
            <local-name>[tot2023]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>tot2023</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_allcount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[_allcount]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>_allcount</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Percent2018</remote-name>
            <remote-type>131</remote-type>
            <local-name>[Percent2018]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Percent2018</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>5</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Percent2023</remote-name>
            <remote-type>131</remote-type>
            <local-name>[Percent2023]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Percent2023</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>5</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PerDff</remote-name>
            <remote-type>131</remote-type>
            <local-name>[PerDff]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>PerDff</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>6</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_twocatstats)]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_twocatstats)]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMean</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMean]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMean</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMax</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMax]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMax</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMin</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMin]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMin</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>40</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>41</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>activity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[activity]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>activity</remote-alias>
            <ordinal>42</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>18</width>
            <contains-null>false</contains-null>
            <collation charset='296' flag='3' name='LROOT_S1' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>43</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>44</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>45</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>46</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>47</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>48</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>49</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='perDiff2018' datatype='real' name='[Calculation_1510957715795554304]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If [Per Dff] NOT NULL then #pDiff2018' />
      </column>
      <column caption='Pdiff2018' datatype='boolean' name='[Calculation_1510957715796783105]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Photography (v_twocatsdiff)]=&apos;No photography&apos;&#13;&#10;    then [Parameters].[Covid 19 Year (copy)]=[PerDff]&#13;&#10;END' />
      </column>
      <column caption='Z-scor' datatype='real' name='[Calculation_3191363324673548296]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(SUM([rating (v_photographyvsnonall)])-WINDOW_AVG(SUM([rating (v_photographyvsnonall)])))/WINDOW_STDEV(SUM([rating (v_photographyvsnonall)]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
      <column caption='InputID (v photovisit rating)' datatype='integer' name='[InputID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Input ID1' datatype='integer' name='[InputID]' role='dimension' type='ordinal' />
      <column caption='Per Dff' datatype='real' name='[PerDff]' role='measure' type='quantitative' />
      <column caption='Photography (v frqcountry)' datatype='string' name='[Photography (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Photography (v twocatsdiff)' datatype='string' name='[Photography (v_twocatsdiff)]' role='dimension' type='nominal' />
      <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
      <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
          <alias key='&quot;photography&quot;' value='Photography Holiday' />
          <alias key='&quot;Photography&quot;' value='Photography Holidays' />
        </aliases>
      </column>
      <column datatype='real' name='[TravelMax]' role='measure' type='quantitative' />
      <column datatype='real' name='[TravelMean]' role='measure' type='quantitative' />
      <column datatype='real' name='[TravelMin]' role='measure' type='quantitative' />
      <column caption='Travel Date' datatype='string' name='[Travel_Date]' role='dimension' type='nominal' />
      <column caption='Travel Month' datatype='integer' name='[Travel_Month]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photovisit rating)' datatype='integer' name='[Travel_Year (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
      <column caption='Travel Year' datatype='integer' name='[Travel_Year]' role='dimension' type='quantitative' />
      <column caption='Travel month (v photovisit rating)' datatype='integer' name='[Travel_month (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel month' datatype='integer' name='[Travel_month]' role='dimension' type='quantitative' />
      <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Traveller Country' datatype='string' name='[Traveller_Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
          <semantic-value key='&quot;Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Austria&quot;' value='&quot;Austria&quot;' />
          <semantic-value key='&quot;Bahrain&quot;' value='&quot;Bahrain&quot;' />
          <semantic-value key='&quot;Bangladesh&quot;' value='&quot;Bangladesh&quot;' />
          <semantic-value key='&quot;Belarus&quot;' value='&quot;Belarus&quot;' />
          <semantic-value key='&quot;Belgium&quot;' value='&quot;Belgium&quot;' />
          <semantic-value key='&quot;Brazil&quot;' value='&quot;Brazil&quot;' />
          <semantic-value key='&quot;Bulgaria&quot;' value='&quot;Bulgaria&quot;' />
          <semantic-value key='&quot;Cambodia&quot;' value='&quot;Cambodia&quot;' />
          <semantic-value key='&quot;Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Croatia&quot;' value='&quot;Croatia&quot;' />
          <semantic-value key='&quot;Cyprus&quot;' value='&quot;Cyprus&quot;' />
          <semantic-value key='&quot;Czech Republic&quot;' value='&quot;Czechia&quot;' />
          <semantic-value key='&quot;Denmark&quot;' value='&quot;Denmark&quot;' />
          <semantic-value key='&quot;Egypt&quot;' value='&quot;Egypt&quot;' />
          <semantic-value key='&quot;Ethiopia&quot;' value='&quot;Ethiopia&quot;' />
          <semantic-value key='&quot;Finland&quot;' value='&quot;Finland&quot;' />
          <semantic-value key='&quot;France&quot;' value='&quot;France&quot;' />
          <semantic-value key='&quot;Germany&quot;' value='&quot;Germany&quot;' />
          <semantic-value key='&quot;Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;Hong Kong&quot;' value='&quot;Hong Kong&quot;' />
          <semantic-value key='&quot;Hungary&quot;' value='&quot;Hungary&quot;' />
          <semantic-value key='&quot;India&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Ireland&quot;' value='&quot;Ireland&quot;' />
          <semantic-value key='&quot;Jordan&quot;' value='&quot;Jordan&quot;' />
          <semantic-value key='&quot;Kuwait&quot;' value='&quot;Kuwait&quot;' />
          <semantic-value key='&quot;Lebanon&quot;' value='&quot;Lebanon&quot;' />
          <semantic-value key='&quot;Malaysia&quot;' value='&quot;Malaysia&quot;' />
          <semantic-value key='&quot;Malta&quot;' value='&quot;Malta&quot;' />
          <semantic-value key='&quot;Qatar&quot;' value='&quot;Qatar&quot;' />
          <semantic-value key='&quot;Romania&quot;' value='&quot;Romania&quot;' />
          <semantic-value key='&quot;United States&quot;' value='&quot;USA&quot;' />
        </semantic-values>
      </column>
      <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID' datatype='integer' name='[Traveller_ID]' role='dimension' type='ordinal' />
      <column caption='v_countrydate' datatype='table' name='[__tableau_internal_object_id__].[v_countrydate_98771871190540D39E6CEF22D122B18C]' role='measure' type='quantitative' />
      <column caption='v_frqcountry' datatype='table' name='[__tableau_internal_object_id__].[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]' role='measure' type='quantitative' />
      <column caption='v_photographyvsnonall' datatype='table' name='[__tableau_internal_object_id__].[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]' role='measure' type='quantitative' />
      <column caption='v_photovisit_rating' datatype='table' name='[__tableau_internal_object_id__].[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]' role='measure' type='quantitative' />
      <column caption='v_twocatsdiff' datatype='table' name='[__tableau_internal_object_id__].[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]' role='measure' type='quantitative' />
      <column caption='v_twocatstats' datatype='table' name='[__tableau_internal_object_id__].[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]' role='measure' type='quantitative' />
      <column caption='_Allcount' datatype='integer' name='[_allcount]' role='measure' type='quantitative' />
      <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
          <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
          <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
          <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
          <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
          <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
        </aliases>
      </column>
      <column caption='Input ID' datatype='integer' name='[inputID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
      <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='Month (V Photovisit Rating)' datatype='string' name='[month (v_photovisit_rating)]' role='dimension' type='nominal' />
      <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
      <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
      <column datatype='string' name='[sentiment_comments (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
      <column caption='Tot2018' datatype='integer' name='[tot2018]' role='measure' type='quantitative' />
      <column caption='Tot2023' datatype='integer' name='[tot2023]' role='measure' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Avg' name='[avg:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Avg' name='[avg:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='Avg' name='[avg:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryCount]' derivation='Count' name='[cnt:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Photography]' derivation='Count' name='[cnt:Photography:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Count' name='[cnt:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Count' name='[cnt:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
      <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
      <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='Count' name='[cnt:location_Type (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryCount]' derivation='CountD' name='[ctd:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Sum' name='[cum:sum:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[CountryCount]' derivation='None' name='[none:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
      <column-instance column='[TravelMax]' derivation='None' name='[none:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='None' name='[none:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='None' name='[none:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country]' derivation='None' name='[none:Traveller_Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
      <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Avg' name='[pcdf:avg:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:4]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:6]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:8]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Photography]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:9]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Photography]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;No photography&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Photography]' derivation='Count' name='[pcto:cnt:Photography:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Sum' name='[sum:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Sum' name='[sum:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='Sum' name='[sum:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rating]' derivation='Sum' name='[sum:rating:ok]' pivot='key' type='ordinal' />
      <column-instance column='[TravelMean]' derivation='Sum' name='[win:sum:TravelMean:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Avg' from='-2' ordering-type='Rows' to='0' type='WindowTotal' window-options='IncludeCurrent' />
      </column-instance>
      <layout common-percentage='0.914074' dim-ordering='alphabetic' measure-ordering='alphabetic' parameter-percentage='0.0859259' show-structure='true' user-set-layout-v2='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:location_Type (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[ctd:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:sum:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:avg:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:2]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:4]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:6]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:8]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:9]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[win:sum:TravelMean:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pays-Bas&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niederlande&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Reunion Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Beruwala&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Polonnaruwa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Katukitula&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nuwara Eliya&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nilaveli&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sigiriya&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Colombo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Galle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tissamaharama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ampara&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Deniyaya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kalutara&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ahangama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Koslanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ella&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Weligatta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arugam Bay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peradeniya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kalametiya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trincomalee&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Haputale&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Unawatuna&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kalkudah&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Habarana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saliyapura&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Anuradhapura&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bentota&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pinnawala&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kandy&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mirissa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hikkaduwa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jaffna&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Embilipitiya&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Pussellawa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ambalangoda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Negombo&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[sum:rating:ok]' type='palette'>
            <map to='#499894'>
              <bucket>12</bucket>
            </map>
            <map to='#499894'>
              <bucket>51</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>2</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>30</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>207</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>6249</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>8</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>41</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>1977</bucket>
            </map>
            <map to='#79706e'>
              <bucket>16</bucket>
            </map>
            <map to='#79706e'>
              <bucket>72</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>13</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>52</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>9</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>44</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>24</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>164</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>3</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>34</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>477</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>21</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>114</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>10</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>45</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>18</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>77</bucket>
            </map>
            <map to='#d37295'>
              <bucket>19</bucket>
            </map>
            <map to='#d37295'>
              <bucket>79</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>22</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>126</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>27</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>194</bucket>
            </map>
            <map to='#e15759'>
              <bucket>14</bucket>
            </map>
            <map to='#e15759'>
              <bucket>60</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>11</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>48</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>4</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>35</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>683</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>20</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>93</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>15</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>61</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>38</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>691</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>4</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:activity:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Beach_Water_Sports&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Relaxing&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Historical_Sites&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;wildlife_nature&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Romantic_holiday&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hiking_climbing&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Religious&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Biking_cycling&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Sightseeing&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:sentiment_comments:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Neutral&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Positive&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Negative&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_frqcountry):nk]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;France&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location_Type (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Religious Sites&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Beaches&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Historic Sites&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waterfalls&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Museums&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bodies of Water&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;National Parks&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zoological Gardens&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nature &amp; Wildlife Areas&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Farms&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gardens&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Photography:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;No photography&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Photography&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;photography&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='Photography (v_twocatsdiff)' />
        <field-sort-custom-order field='Travel_Year (v_twocatsdiff)' />
        <field-sort-custom-order field='tot2018' />
        <field-sort-custom-order field='tot2023' />
        <field-sort-custom-order field='_allcount' />
        <field-sort-custom-order field='Percent2018' />
        <field-sort-custom-order field='Percent2023' />
        <field-sort-custom-order field='PerDff' />
      </field-sort-info>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
          <calculation class='tableau' formula='20.199999999999999' />
        </column>
      </datasource-dependencies>
      <object-graph>
        <objects>
          <object caption='v_countrydate' id='v_countrydate_98771871190540D39E6CEF22D122B18C'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
            </properties>
          </object>
          <object caption='v_frqcountry' id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
            </properties>
          </object>
          <object caption='v_photographyvsnonall' id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
            </properties>
          </object>
          <object caption='v_photovisit_rating' id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
            </properties>
          </object>
          <object caption='v_twocatsdiff' id='v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatsdiff' table='[v_twocatsdiff]' type='table' />
            </properties>
          </object>
          <object caption='v_twocatstats' id='v_twocatstats_75CA33B722EC46A3B140AAD50ED57027'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatstats' table='[v_twocatstats]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_frqcountry)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID (v_photovisit_rating)]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_twocatsdiff)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_twocatstats)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_twocatstats_75CA33B722EC46A3B140AAD50ED57027' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
    <datasource inline='true' name='Clipboard_20250129T203533' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Clipboard_20250129T203533' name='Clipboard_20250129T203533leaf'>
            <connection class='textscan' directory='C:/Users/rosh_/Documents/My Tableau Repository/Datasources' filename='Clipboard_20250129T203533.txt' />
          </named-connection>
        </named-connections>
        <relation connection='Clipboard_20250129T203533leaf' name='Clipboard_20250129T203533#txt' table='[Clipboard_20250129T203533#txt]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator='&#9;'>
            <column datatype='string' name='Month (V Photovisit Rating)' ordinal='0' />
            <column datatype='integer' name='Count of Traveller ID (v photovisit rating)' ordinal='1' />
            <column datatype='real' name='% of Total Count of Traveller ID (v photovisit rating)' ordinal='2' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Clipboard_20250129T203533#txt]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;£&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;\\t&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Month (V Photovisit Rating)</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Month (V Photovisit Rating)]</local-name>
            <parent-name>[Clipboard_20250129T203533#txt]</parent-name>
            <remote-alias>Month (V Photovisit Rating)</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <object-id>[Clipboard_20250129T203533]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Count of Traveller ID (v photovisit rating)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Count of Traveller ID (v photovisit rating)]</local-name>
            <parent-name>[Clipboard_20250129T203533#txt]</parent-name>
            <remote-alias>Count of Traveller ID (v photovisit rating)</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Clipboard_20250129T203533]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>% of Total Count of Traveller ID (v photovisit rating)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[% of Total Count of Traveller ID (v photovisit rating)]</local-name>
            <parent-name>[Clipboard_20250129T203533#txt]</parent-name>
            <remote-alias>% of Total Count of Traveller ID (v photovisit rating)</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Clipboard_20250129T203533]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Clipboard_20250129T203533' datatype='table' name='[__tableau_internal_object_id__].[Clipboard_20250129T203533]' role='measure' type='quantitative' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <object-graph>
        <objects>
          <object caption='Clipboard_20250129T203533' id='Clipboard_20250129T203533'>
            <properties context=''>
              <relation connection='Clipboard_20250129T203533leaf' name='Clipboard_20250129T203533#txt' table='[Clipboard_20250129T203533#txt]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_GB' separator='&#9;'>
                  <column datatype='string' name='Month (V Photovisit Rating)' ordinal='0' />
                  <column datatype='integer' name='Count of Traveller ID (v photovisit rating)' ordinal='1' />
                  <column datatype='real' name='% of Total Count of Traveller ID (v photovisit rating)' ordinal='2' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_2075C5A994FF4C969707987DA2B9EC36]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Frq city' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Frq city' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action2_B85DF04D49BF485CA7C60155D3FFA2F9]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 3' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Dashboard 3' />
      </command>
    </action>
    <action caption='Highlight 3 (generated)' name='[Action3_0BBC4CBEFC7F4DCD93F57ACCFEB6DF54]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Photo Activity' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Activity' />
        <param name='target' value='Photo Activity' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='5* Cities'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' scope='rows' value='Number of Rating' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{8AE6B6A8-396E-4D3F-B028-7BC3FEFD306B}' />
    </worksheet>
    <worksheet name='Frq city'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([CountryCount])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_frqcountry):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='font-size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='8' />
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</cols>
      </table>
      <simple-id uuid='{93E7BE5A-2D49-47E4-89D8-19A9C636E294}' />
    </worksheet>
    <worksheet name='Frq city (3)'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([CountryCount])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_frqcountry):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' shelf='rows'>
              <sort-filter-info>
                <sort-filter level-name='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):ok]' member-value='2023' />
              </sort-filter-info>
            </shelf-sort-v2>
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='font-size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='8' />
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):ok]</cols>
      </table>
      <simple-id uuid='{E86721F7-2EE1-466B-966C-FC16EA0E8D75}' />
    </worksheet>
    <worksheet name='Line Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays vs Non-Photography Holidays by Year </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
              <calculation class='tableau' formula='20.199999999999999' />
            </column>
            <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
              <calculation class='tableau' formula='2020.' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='real' name='[Percent2018]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_photographyvsnonall)]' derivation='None' name='[none:Travel_Year (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Holidaymakers ' />
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' scope='cols' value='Year' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' field-type='quantitative' max='2024' min='2010' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[Parameters].[Covid 19 Year (copy)]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dotted' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' value='Holiday Makers Type'>
              <formatted-text>
                <run bold='true' fontalignment='1'>Holiday Makers Type</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label='Covid 19' label-type='custom' probability='95' scope='per-table' tooltip='Covid 19' tooltip-type='custom' value-column='[Parameters].[Parameter 1]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</cols>
      </table>
      <simple-id uuid='{A58EDB08-AD47-409E-AD1E-DC0A82A0F9E9}' />
    </worksheet>
    <worksheet name='Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#000000'>Top Ten International Tourist  Arrivals by Countries - Year 2010 to 2023</run>
            <run fontalignment='1'>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([activity])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' using='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]' />
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]' field-type='quantitative' max='30844281.911059216' min='-1909607.794413897' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]' field-type='quantitative' max='13253385.098458683' min='-10239273.619251298' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' field-type='quantitative' max='419' max-size='1' min='0' min-size='0' type='quantsize' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{DB828CB9-B2E3-4F74-A932-614B90B54ACE}' />
    </worksheet>
    <worksheet name='Map Cross Tab'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#000000'>Top Ten International Tourist  Arrivals by Countries -2010 to 2023</run>
            <run fontalignment='1'>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([activity])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' using='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]' />
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='113' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' field-type='quantitative' max='419' max-size='1' min='0' min-size='0' type='quantsize' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{1FC0B189-DC7D-4F5F-AB97-00FE6023ED82}' />
    </worksheet>
    <worksheet name='Non vs Poto'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Overall Photography Holidays vs Non-Photography Holidays - Year 2010  to 2023</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Holiday Makers' />
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' value='93' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' value='148' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='17' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</cols>
      </table>
      <simple-id uuid='{6A50E07A-6C64-4E2D-A8D6-C7B847FDFC3F}' />
    </worksheet>
    <worksheet name='Ph_ by Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Seasonality of Traffic by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column caption='Month (V Photovisit Rating)' datatype='string' name='[month (v_photovisit_rating)]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[month (v_photovisit_rating)]' derivation='None' name='[none:month (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='value' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#ffbe7d' />
                <format attr='mark-transparency' value='239' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</cols>
        <annotations>
          <annotation class='point' id='0' mark-position='1' pullback='0' text-width='157'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.524651'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;January&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='198.422351233672'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='203' y='-34' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{CA2E3D86-7E9B-4B80-80DC-286F1F4CC814}' />
    </worksheet>
    <worksheet name='Photo Activity'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Distribution of Photography Holiday Activities  (Percentage) </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' scope='rows' value='Number of Holiday Makers ' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='65' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='-90' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <_.fcp.IndividualControlFormatting.true...style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' id='legend-color' value='center' />
          </_.fcp.IndividualControlFormatting.true...style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='Photography Holiday Makers&apos; Activity'>
              <formatted-text>
                <run fontcolor='#000000' fontname='Segoe UI' fontsize='15'>Photography Holiday Makers&apos; Activity</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</cols>
      </table>
      <simple-id uuid='{8ACD1209-7334-4E56-857C-B5BB9F8D0C52}' />
    </worksheet>
    <worksheet name='Rating pie'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Distribution of 5 star Rating Given for Photography Holidays (percentage)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rating]' derivation='Count' name='[pcto:cnt:rating:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:rating:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7AB4EE68-1BAC-4E59-B2E4-2B1F6D160702}' />
    </worksheet>
    <worksheet name='SIA'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidaymakers&apos; Sentiment Comments (Percentage)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{2E56FC8B-EDFB-414D-AB93-5A9226D14142}' />
    </worksheet>
    <worksheet name='SIA Positve Cities'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays Sentiment Positive Comments Received by Cities</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]'>
            <groupfilter function='level-members' level='[none:City:nk]' />
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Negative&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Neutral&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='field-labels-decoration'>
            <format attr='vertical-align' value='center' />
            <format attr='wrap' value='off' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='565' />
                <format attr='maxheight' value='565' />
                <format attr='minwidth' value='720' />
                <format attr='maxwidth' value='720' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{AA5E5BF6-9CC4-48A1-A971-6D7CB28B6C6D}' />
    </worksheet>
    <worksheet name='SIA Type of visit_'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays Sentiment Comments by Location Types</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Beach_Water_Sports&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Biking_cycling&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Hiking_climbing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Historical_Sites&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Relaxing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Religious&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Romantic_holiday&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Sightseeing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;wildlife_nature&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Negative&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Neutral&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' scope='rows' value='Number of Sentiment Comments' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{E93BA932-D0FA-49D4-9649-22E03DD52C36}' />
    </worksheet>
    <worksheet name='SIA countries'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Top Ten by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([Traveller_ID (v_photovisit_rating)])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_photovisit_rating):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-color' value='#ffbe7d' />
                <format attr='mark-transparency' value='239' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</cols>
      </table>
      <simple-id uuid='{4DE53B2F-6305-4D8B-BC96-67ABFB2EFBDE}' />
    </worksheet>
    <worksheet name='SIA countries (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Sentiment Positive Comments Received by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk:4]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Field' type='PctTotal'>
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]' />
              </table-calc>
            </column-instance>
            <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk:4]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='35' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([rating (v_photographyvsnonall)])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='%null%' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;England&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' scope='rows' value='Number of Sentiment Comments' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]' value='100' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</rows>
        <cols>([federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk] / ([federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk] / [federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]))</cols>
      </table>
      <simple-id uuid='{06C83C76-08ED-4260-AF18-C77EA28F7C3C}' />
    </worksheet>
    <worksheet name='SIA type'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' user:ui-domain='cascading' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{38D1FCF9-5FD7-4A6E-83D8-A3BD7B8DFDAA}' />
    </worksheet>
    <worksheet name='Seasonality of Traffic by Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Seasonality of Traffic by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[month (v_photographyvsnonall)]' derivation='None' name='[none:month (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Photography Holiday Markers' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-color' scope='cols' value='#f9a655' />
            <format attr='line-pattern-only' scope='cols' value='solid' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='left' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</cols>
        <annotations>
          <annotation class='point' id='3' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.683333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1388.6975476839239'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='135' y='13' />
          </annotation>
          <annotation class='point' id='4' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.433333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;January&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1420.8433242506812'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='208' y='-33' />
          </annotation>
          <annotation class='point' id='5' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.7'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;March&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1037.2370572207085'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='77' y='-97' />
          </annotation>
          <annotation class='point' id='6' mark-position='1' pullback='0' text-width='171'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.3'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;December&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1167.9632152588554'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-46' y='-139' />
          </annotation>
          <annotation class='point' id='7' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.493827'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;January&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='164.02179836512261'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='287' y='-100' />
          </annotation>
          <annotation class='point' id='8' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.333333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='164.02179836512261'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='219' y='-47' />
          </annotation>
          <annotation class='point' id='9' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.469136'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;December&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='142.55585831062669'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-152' y='-167' />
          </annotation>
          <annotation class='point' id='10' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.580247'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;March&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='134.57493188010901'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='115' y='-107' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{926ADA61-A842-4E77-9E74-95CFABBF94A5}' />
    </worksheet>
    <worksheet name='Sheet 15'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='180' />
                <format attr='maxwidth' value='180' />
                <format attr='minheight' value='622' />
                <format attr='maxheight' value='622' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</cols>
      </table>
      <simple-id uuid='{AEF26B1E-1002-4FD2-BDF8-B3507923DA6F}' />
    </worksheet>
    <worksheet name='Sheet 16'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
            <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
            <column-instance column='[Photography (v_twocatstats)]' derivation='None' name='[none:Photography (v_twocatstats):nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_twocatstats)]' derivation='None' name='[none:Travel_Year (v_twocatstats):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='302' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</cols>
      </table>
      <simple-id uuid='{226A9F59-9FAB-49BA-82E6-2AE8BAD8A0C1}' />
    </worksheet>
    <worksheet name='Sheet 20'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{7740638F-84ED-4B3F-A1E7-F71BDE528CFB}' />
    </worksheet>
    <worksheet name='Sheet 23'>
      <table>
        <view>
          <datasources>
            <datasource name='Clipboard_20250129T203533' />
          </datasources>
          <datasource-dependencies datasource='Clipboard_20250129T203533'>
            <column datatype='real' name='[% of Total Count of Traveller ID (v photovisit rating)]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Count of Traveller ID (v photovisit rating)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Month (V Photovisit Rating)]' role='dimension' type='nominal' />
            <column-instance column='[Month (V Photovisit Rating)]' derivation='None' name='[none:Month (V Photovisit Rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[% of Total Count of Traveller ID (v photovisit rating)]' derivation='Sum' name='[sum:% of Total Count of Traveller ID (v photovisit rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Count of Traveller ID (v photovisit rating)]' derivation='Sum' name='[sum:Count of Traveller ID (v photovisit rating):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Clipboard_20250129T203533].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[Clipboard_20250129T203533].[sum:\% of Total Count of Traveller ID (v photovisit rating):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[Clipboard_20250129T203533].[sum:Count of Traveller ID (v photovisit rating):qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Clipboard_20250129T203533].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[Clipboard_20250129T203533].[Multiple Values]' />
            </encodings>
          </pane>
        </panes>
        <rows>[Clipboard_20250129T203533].[none:Month (V Photovisit Rating):nk]</rows>
        <cols>[Clipboard_20250129T203533].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{4B488AFC-B244-432D-BC21-75116687C91C}' />
    </worksheet>
    <worksheet name='Stat'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
            <column datatype='real' name='[TravelMean]' role='measure' type='quantitative' />
            <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
            <column-instance column='[TravelMean]' derivation='Count' name='[cnt:TravelMean:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography (v_twocatstats)]' derivation='None' name='[none:Photography (v_twocatstats):nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_twocatstats)]' derivation='None' name='[none:Travel_Year (v_twocatstats):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMean:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</cols>
      </table>
      <simple-id uuid='{B4F9E845-590C-4317-AE30-26D0E4BFAC9D}' />
    </worksheet>
    <worksheet name='X-SIA Type of visit'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Beaches&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Bodies of Water&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Farms&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Gardens&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Historic Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Museums&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;National Parks&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Nature &amp; Wildlife Areas&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Religious Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Waterfalls&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Zoological Gardens&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' scope='rows' value='Number of Sentiment Comments' />
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' value='60' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='vertical-align' value='center' />
            <format attr='wrap' value='off' />
            <format attr='text-align' value='center' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='615' />
                <format attr='maxheight' value='615' />
                <format attr='minwidth' value='660' />
                <format attr='maxwidth' value='660' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{EF528593-29D6-41CC-B9C9-46FD7FABCCC7}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='86414' x='584' y='967'>
              <zone h='49031' id='48' name='Map' w='45800' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49035' id='56' name='Photo Activity' w='45800' x='584' y='49998'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='79' name='Rating pie' w='40614' x='46384' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='91' name='Line Chart' w='40614' x='46384' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='170' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='12418' x='86998' y='967'>
              <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='15235' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='22489'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='26118' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='49816'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='75934'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7980' id='92' name='Line Chart' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='12418' x='86998' y='81496'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1600' minheight='1600' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='124' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98066' id='123' param='vert' type-v2='layout-flow' w='98832' x='584' y='967'>
                <zone fixed-size='280' h='49031' id='48' is-fixed='true' name='Map' w='45800' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='15235' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='22489'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='91' is-fixed='true' name='Line Chart' w='40614' x='46384' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7980' id='92' name='Line Chart' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='12418' x='86998' y='81496'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49035' id='56' is-fixed='true' name='Photo Activity' w='45800' x='584' y='49998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='26118' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='49816'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='79' is-fixed='true' name='Rating pie' w='40614' x='46384' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='75934'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{8CCA8090-640E-4B2E-82F7-02AE726BECC5}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='87948' x='584' y='967'>
              <zone h='59315' id='55' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='38751' id='56' name='SIA' w='34697' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='59315' id='59' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='38751' id='100' name='SIA Type of visit_' w='53251' x='35281' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='149' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='10884' x='88532' y='967'>
              <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='11366'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1300' minheight='1300' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='120' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98066' id='119' param='vert' type-v2='layout-flow' w='98832' x='584' y='967'>
                <zone fixed-size='280' h='38751' id='56' is-fixed='true' name='SIA' w='34697' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='11366'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='38751' id='100' is-fixed='true' name='SIA Type of visit_' w='53251' x='35281' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='55' is-fixed='true' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='59' is-fixed='true' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{148B74DC-060A-48C0-8A9E-8CA4F401E31E}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 3'>
      <style />
      <size maxheight='800' maxwidth='1400' minheight='800' minwidth='1400' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='9' param='horz' type-v2='layout-flow' w='98858' x='571' y='1000'>
            <zone h='98000' id='7' type-v2='layout-basic' w='87429' x='571' y='1000'>
              <zone h='50659' id='5' name='Non vs Poto' w='43715' x='571' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='47341' id='32' name='SIA countries' w='87429' x='571' y='51659'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='50659' id='74' name='Ph_ by Month' w='43714' x='44286' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='8' is-fixed='true' param='vert' type-v2='layout-flow' w='11429' x='88000' y='1000'>
              <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='2750' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='11429' x='88000' y='7500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='80' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='79' param='vert' type-v2='layout-flow' w='98858' x='571' y='1000'>
                <zone fixed-size='280' h='50659' id='5' is-fixed='true' name='Non vs Poto' w='43715' x='571' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='50659' id='74' is-fixed='true' name='Ph_ by Month' w='43714' x='44286' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47341' id='32' is-fixed='true' name='SIA countries' w='87429' x='571' y='51659'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2750' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='11429' x='88000' y='7500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{1A80F195-FFE0-4D70-9B23-D0F132D84CF2}' />
    </dashboard>
  </dashboards>
  <windows source-height='51'>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Line Chart'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>2379</value>
                  <value>&quot;No photography&quot;</value>
                  <value>2018</value>
                  <value>0.2101961477292808</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Photo Activity'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Rating pie'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='79' />
      <simple-id uuid='{46844394-C8DC-47C5-8AB6-F61F276BEB8A}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='SIA'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Positve Cities'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Type of visit_'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='59' />
      <simple-id uuid='{79E10B69-7BD1-4F8B-8BCB-3874D47C0A61}' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Non vs Poto'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Ph_ by Month'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA countries'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='74' />
      <simple-id uuid='{91E32204-93F8-4CFF-AAD0-18D32233E187}' />
    </window>
    <window class='worksheet' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{352790A8-0E1E-4075-9D85-3F7C13DD202D}' />
    </window>
    <window class='worksheet' name='Map Cross Tab'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0E82B045-3354-4369-864E-2D81875A5B32}' />
    </window>
    <window class='worksheet' name='Line Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='243'>
            <card mode='compact' param='[Parameters].[Covid 19 Year (copy)]' type='parameter' />
            <card pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E9C45F67-31E5-48DA-9189-8EFE85F6B4FF}' />
    </window>
    <window class='worksheet' name='Photo Activity'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='256'>
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{614D0002-C6CC-45DD-B3C3-55C172326677}' />
    </window>
    <window class='worksheet' name='Rating pie'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:InputID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F11A9256-BDCD-4620-9D17-A973F9712E45}' />
    </window>
    <window class='worksheet' name='SIA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='222'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CDDD4D80-DDFD-40AB-ABC9-B13F899C78B8}' />
    </window>
    <window class='worksheet' name='SIA Type of visit_'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F7D445F7-A2F7-4F8B-B70F-673383488A10}' />
    </window>
    <window class='worksheet' name='SIA Positve Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <simple-id uuid='{B208DBA9-1D01-42F0-91B9-4290B0E2FB9D}' />
    </window>
    <window class='worksheet' name='Non vs Poto'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='208'>
            <card AVG='true' KURTOSIS='false' MAX='true' MEDIAN='true' MIN='true' QUART1='false' QUART3='false' SKEWNESS='false' STDEV='false' SUM='true' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5B892FE8-53E8-4FB3-909E-CFD8384703C4}' />
    </window>
    <window class='worksheet' name='Seasonality of Traffic by Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='231'>
            <card param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='filter' />
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_month:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photography_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5ED166A1-4843-4683-888B-4722DFCC388E}' />
    </window>
    <window class='worksheet' name='SIA countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6C880C5F-A5AF-4AAF-85F2-6516170E3278}' />
    </window>
    <window class='worksheet' maximized='true' name='Ph_ by Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{68F71B14-8D42-45C1-9DE1-1661A8511167}' />
    </window>
    <window class='worksheet' name='SIA countries (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{944969AD-46F7-441E-91D3-073854003760}' />
    </window>
    <window class='worksheet' name='Frq city'>
      <cards>
        <edge name='left'>
          <strip size='194'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='150'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C85E0752-E638-4646-8B76-A812B7EC5E38}' />
    </window>
    <window class='worksheet' name='Frq city (3)'>
      <cards>
        <edge name='left'>
          <strip size='194'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{F0BA4005-2418-41F2-8F93-A1EB2E5A40D4}' />
    </window>
    <window class='worksheet' name='SIA type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C46270CD-548A-4EC4-8D4F-A646CCA311AA}' />
    </window>
    <window class='worksheet' name='X-SIA Type of visit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{396FB502-1C76-4CC7-B7CB-7EF9A5E14013}' />
    </window>
    <window class='worksheet' name='5* Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{90413D93-B792-4F33-BBC1-794A4C561A46}' />
    </window>
    <window class='worksheet' name='Stat'>
      <cards>
        <edge name='left'>
          <strip size='108'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Calculation_3191363324667273216:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[usr:Calculation_3191363324668567554:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{95C1AC77-0FF8-46EF-A265-09594A86B84D}' />
    </window>
    <window class='worksheet' name='Sheet 15'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1BB2767F-55E3-4617-AF12-45C1E0C45ED8}' />
    </window>
    <window class='worksheet' name='Sheet 16'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_frqcountry):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3B9E3B7E-AC37-4F11-99FC-F4783A09C476}' />
    </window>
    <window class='worksheet' name='Sheet 20'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E6376252-0223-4DEF-9317-BA83DB2D4779}' />
    </window>
    <window class='worksheet' name='Sheet 23'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{75CB3050-D1C2-4279-B189-B691FE70B6FA}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='5* Cities' width='192'>
      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
      fJwtalUy6wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      oI77AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Frq city' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29Z5Qc53nv+auqzrl7enIeDMIAGGQSYBQpWYG0JPuuLFvO8srp+txzj89+
      2T37ec9+3D279l7bcjhrrSXb0pVtSZYlWjRFUiRBkMgDYDAJk6d7QufcFd790ACIMIPpnukJ
      IOp3zpwhmtNPPW9V/ave8DzPKwkhBCYmTyjyTjtgYrKT1EUAQgh0Xa+HqbraqdfLbbe1rZ62
      dqOd7bxuu+4NUK/G17NnZ/r0+Nmp1tauE4CJyXZiCsDkicYUgMkTjSkAkycaUwAmTzSmAEye
      aEwBmGwaIQT5VKKuU5jbhSkAk00jDIMf/vn/zrWfvfbYicAUgMmmiUdmCXf0sjg1xsgHbz1W
      IjAFYLJp5kaH6Bw4xou//LtMDZ1n8uoHj40ITAGYbAohBAvjN2jbewibw8nLv/5H3HjvP5i7
      eXWnXasKUwAmm6KYyyB0A5fXD4Dd6eJTv/lfuPzGD1gYH95h79anZgEIw0DT9MrvOkY3mjye
      LE6N0dyz977PnB4fL//aH3L+x99heebWDnlWHTULYHJ8hOvXbjB2a4zr14fRHo+unskWMT96
      jfZ9hx/63BMM84lf+X3e+5dvkIjO7YBn1WGp9QuNTY1Ergxj83US9lvRdIEkGXWL465XXLlh
      GHWxA7svZr6etjZjxzB0YvPTnPzcL61qxx0M89yXfoe3/vEvefErf4CvoakKm9t73WoWAELQ
      0b+XBreVWE7DbpFAVF4kiqLUbG5Vpyy1u/UgmqahKAqSJNXBo/r4VE879bS1UTuJaBR3oAGH
      y42maavaCbd38+wv/hbvfOev+eRv/BGeQMMjbW73dau5C+QNNtLd3oIn0EB3ezP1cdPkcWRh
      /AZt/QfX/bum7j2c+uyXePNbf04hm94Gz6rHnAUy2TDzYzdo37u+AABa+wc48tKrvPF3/w/l
      Qn6LPaseUwAmG0ItlyjmMniC4ar+XpIkOgeOceD0y/z0W3+GWipusYfVYQrAZEMsTo3R1NWH
      XMO4T5Ik+o6dpuvgcd7+9l+hqeUt9LA6TAGYbIj5kSHa9w3W/D1Jkhg48zKNnX28+93/F0PX
      tsC76jEFYFIzhmGwND1OS+++jRmQJAY/8QreUCNnv/fNuk591oopAJOayafi2JwuLDb7hm1I
      ksSxn/sFFIuVC699F7FDIjAFYFIz82PXaes/uOm5elmWefrzX6GQSXHlzR/uSASpKQCTmpkf
      vb5q+MNGkGWZ5/6Hr5KIznH9nZ/UxWZNx9/2I5o81qilItnECoHm9rrZVCwWnv+l/5HorWHG
      zr9TN7vVYArApCbikVmCLR3Icn1vHavNzou/8vvcuvw+i5OjdbX9KEwBmNTE3MgQHftrn/6s
      BpvDyeCLn2VuZGhL7K+GKQCTqhFCrBr/X0/8TW0klua3zP6DmAIwqZp8OokkSThvZ39tBS5/
      iHwquW0LZKYATKomOjlCS+++uoUqr4YkSdgcTkr53JYd415qDgSfGr/JUixHsMFNNqsyeHSQ
      +mQBmOx25kaGOPjMp7b8OL7GFlIri1v6prlDzQJQFAWLImEoDpqDdjMjbAfs1NNWtXaEECSi
      c/gaW9C0h7sn9bxugaY2VuanCXf2bcrWlmSE+f0BCpqFZr+buJkRtmN26mmrGjuxhRn84RZs
      Duea57Re162hrYuJS2frYm89GzUfwRdqxBdqBMAfqnxm5sV//Jkfu07H/sEt7f/fwdfQRCa2
      tOXHAXMQbFIlxWy6buEP6+Hw+CiXituSL2AKwGRdhBAYurYtg1KozAS5fUFyyfiWH8sUgMm6
      lPJZbA7XtnR/7uBvaiW5HNny45gCMFmX6OQoVrtjW48Zau0kEZnd8uOYAjBZl/nRa4Q7erf1
      mKGWDuKRra8oZwrA5JEYuk5sYYZw5/YKwOUPkk8ntvw4pgBMHklqOYrbH8S6ifTHjWC1OxBC
      oJZLW3ocUwAmj2Rh/Dpt/Ye2/biSJOFvbCG1tLClxzEFYPJIFsaHaesf2JFjB1s6SES3NjTa
      FIDJmqilIsVsGu/tlf/tpjIQ3tqZIFMAJmuyOD1OY43V3+pJqLWTeHRuS6tFmAIwWZP50aFt
      C39YDbvbi1osbGlyjCkAk1URwmBpeoLm7q1Lf1wPSZKwOV1bmhxTswCSsUUmJ6cp5LMsx1Nb
      4ZPJLiCXSmC1O7A6nDvmgyRJBJvbSSxu3UC45nBojy/ESnyKhegikmHg9/uwSKISMFWHJJR6
      2rnzs5t8qleizlb7NDcyRFv/warPYb39uRN3FGhuJ74wS+ue2meiqvGp9i6QUcbhCSBz+8SY
      W8R8LJkfq1/1t1q5N+gu2NJBYnHrQiJqT7mRrbQ0hTFUF5mCjk2WEKLidD2KJRmGUTc7kiTV
      JYKxnj7Vq6DUVvqklktkEyuEWjuQpOqOsVXXLdDYQjq2tKFrWY1PNQvAYrVV/kNx07C9AYIm
      20R8YYZQS2fVN/9WYnU4QYBaKmBzuOpuf+dbaLLrmBsdomP/zk1/3oskSbj8AXKprQmMMwVg
      ch9CCBYnx2ju2eDmF1vAVoZEmAIwuY/tqP5WK6GWThLRrQmJMAVgch+V6m/7tzX9cT0CzW0k
      FrcmKtQUgMl9zI9e29Hwh9Vw+QIU0sktiQkyBWByF2EYJKLzhFo7dtqV+7BabVhsdoq5TN1t
      mwIwuUs8Mosv3IxyZ6p7tyBJ+MLNpFcW627aFIDJXebHrtG+79Cu6v/fIdTSQTxa/xVhUwAm
      QGX6c37sBu17tz/9sRqCrR1bUibFFIAJAOViHq1cwuUL7LQrqxJoaiO5FKn7QNgUgAkAi5Oj
      NPfu2xXhD6thdThRy0UwBWCyFcyNXqNjl3Z/AGRZwenx1T0kwhSACYauszI3RWN3/067siaS
      JBFq6SRe5xXhmgVQzKYYnZgmHV/i1sy8uTfAx4B0bAmX17/txa9qJdha/yoRNYdDT89MIaw+
      Yuk8DllQ1AQ2c4ukbbVTT1u6rjM3eo2WvgOrbn203f486rr5G1uZvn6xaj+3ZIskr8dLNLqM
      5vOTLKk0dUrImFskbbedetqK3rrJqc9+adP2tvq6BVvaycSXUWQZqcrkm7pvkdTW1Udb1/2b
      l21h2RaTLUYtFSmkk/jCzTvtyrooigXFYqVcKmJ31ic5xhwEP+Esz96ioaNnx4pf1Yo3GCab
      WK6bPVMATzgLO5j8vhFCrZ113TfAFMATjBCCxalRmnt2rvhVrQRbOkiYAjDZLEIIrr39Yxo7
      92B3unfanarxN7aSquPeYaYAnlAWxq4zNzLEyc99aVdGf66F2x+kkE1j1GnaddVZoPlbN5he
      KuJ0Ojl+dGdqw5tsHenYEudf+y6f+s3/gmKx7rQ7NSErCna3h0ImhTsQ2ry91T60WK3MTo3j
      8Po2fQCT3YVaKvKz7/w1pz//q3gCDTvtzobwh1tIrUTrYmtVAfi8HnyBRnxus/LVxwlhGJz9
      3jfpO3r6sRr4PkiotX47SK7+BnC40PJxIktbv1O3yfYghGD47BvIisyB0y89Vv3+B6nUCapP
      TNCqApAUKx2dnWRTybocxGTnid66ydTQec584derDiPYrXhDjWTiK3WxtboAkMhk03R0ddbl
      ICY7Sya+wgf/9m1e/JXfxWLbZQnvG8DmdKOVS+ibCN67w6oCUIsZCiXBYqQ+Aw2TnUMrl/nZ
      f/9rnnrly3iC4Z12py7IsownFCYTW9q8rYc/Upmey/DSS88R9NW/Gq/J9iGEwbl//Xu6Dx7f
      0AYTu5lgUxuJpc3XC11FAArxpUnOvX8O3WLOAj3O3Hz/LXRV5eBzn36sB72rEaxTTNAqC2Ey
      p59/kWxew+d9+A0Qi8yymFEJeSzEMyoD+/Zs2gmT+hO9NcLklXN8+nf++GN380MlKG78wrsI
      ITbVvlVXgoUw+OCtH5PGz8+/8jJ25aMXRUnVMFSVvGahwW2hqJsZYdttZz1buVSCcz/8R174
      5d9FUiyPzKDabW2r9rrZ3V7y6SSaqq45q7XhjDCtlMMa6ORzRw48tAVYsLEZt7tAUYAFgV2R
      kMyMsG23s5atXCrBue9/kzNf+Aqh5rZt9Wk7r5uiKFjtDrRyEadn7YiF9XxaVTpCCPRiluHJ
      OWzK/X/idLrwNzTQHG6gIRxG/vi9XR9btHKJt/7h6xx+4bM07eD+vtuBJEm3cwM2tyC2qgAm
      hq8RXUnWLe3MZOsRhsEH//ZtOgeO0tY/8LHs9z9IsLVz0+USVxXAnv2HCHidOO2P/6LJk4AQ
      gpEP30YtFTn0/Gd22p1tI9jcvumtk1YVgGKz4bBbzZo/jwlLMxOMX3yPZ37hN+q2DevjQKCp
      ldRKdFOTL6uHQshWfB4XqVRqw4ZNtod8OsH73/smL375a9gczp12Z1ux2ivrVGqpsGEbazwu
      BIl4DFWr31SiSf3R1DJvf/tvOPnZ//RYlDXZClz+IPlNBG2uHgtUSIPVQymf27Bhk63n/I/+
      O6179tOx/8hOu7JjbHbjjNW7QDYfYb+N7r7eDRs22VpGP/wZxVyGwU+8utOu7CibnQlaRQBl
      Ll++ydETJ4nOTm/CNZOtIrYww8TFd3nmF5+sQe9qBJpaSS5tvErEKmfPRmPQyrvvnaN334FN
      uGayFQghuPSTf+GpV3/5sSpnslW4/SFy6cSGZ4JWXSfec+AIe8x7f1cSm5/GMAzCnWb3FMBi
      tWGzOyhk07g2sLv9k/3+fMwQQnD1zR9y5KVX4aEorY8PtT7LvQ1NG06OMQXwGBFbmEFTy491
      RYdHoRuCS5M5ppdqm9ffzEyQKYDHiKG3fsTgi698LON8NF1wfjyFzQKRRKmmPv1mZoI2JIBs
      NotaKpBIZzd0UJPaiS/MUC7maendt9Ou1B1VNzg/nqLRZ+NQpxtVE5S16gXgb2whtbyx/PWa
      A7gLmQRXrk/Q1hhA03Tcnn1YEAgh6pKEUk87d352k08btXP1rR9x+IXPIqhEfu4Gn+phRzME
      58fStARt9DQ50HWdBq+FWLpMS7C6YEyr3Um5mK/UC73n7ViNTzULYH5ujlIhQ1EP4LIold1h
      JOp6s+0mO/W0tVE7qeUo+UyK5t59d7+/0z7Vw46qCz4cS9Hd5KI9ZLv7/Sa/jblYieZAdXVL
      JVnG6Q2QSazcV/miGp9qFkD/wCDtPQVkoZHIa9gVCSEqpSrqkREmhKibHVmW69JfrqdPtdoR
      QjD05r9x9OWfx3JPIdud9KkedkqqwYfjKXpb3LSH7HevkxCCkNfGjbk8kiQjV5lxFWrpILUU
      wX9PTFQ1Pm1oDOB0OrG7vLSEgxv5ukkNpJYj5FJx2voP7rQrdaNY1vlgNMmeFtd9N/8dFFnC
      41BI5asvfBVq3dgewuYs0C5GCMHQ2z9m8MXPfWxmfgplnXOjKfa2uWkNOdZsV3PAxmKyVLXd
      YOvGdo4xBbCLSa8skokt075/cKddqQv5UuXmH+h00xK0P3Ipr9FnYzldrtq2r6GZTHy55oG4
      KYBdzNDbP+bwC5/5WAS8ZYsaH4ylONzlocm//o70dquMhEShXF25FVlRkBUFrVz9WwNMAexa
      MrElUstROj4GT/9MQeP8eIrBbg9hX3VTm5Ik0RSwsZSs7i0gAd5QE5l4bSERpgB2IXf6/oee
      /zSyUr86QjtBOl+5+Y/2+Gjw1lZkoSVgJ5qsclVYkghuYOMMUwC7kFwyTiwyS9fAsZ12ZVMk
      cyoXJlKc3OMj6Kl9LzKvU6FQ0tGN6tYXQhsIiTAFsMu48/Q//PxnHpvd21cjnlG5PJnh5B4/
      PtfGN+ILeqzEs2pVfxtobCFZY0iEKYBdRi4ZZ2V+iu5DJ3balQ0hhCCWKXN1Ks2pPT58ro13
      4SRJojloJ5qobhzg8ocoZtM1bZxhCmCXcf2df+fgs596bJ/+K2mVoakMT+8L4HFufvwS9lpJ
      ZFWMKsYBsixjd3ko5tJV2zcFsIvIJeMsz96i5/DJnXZlQ0STJW7MZjm9L4DLXqdCyYqMwyaT
      LVQ3HVprZKgpgF3E9Xd/woEzLz92m1cLIVhMlhmdz/H0Pj/OOt38d2jy21hMVTe/X+sWqqYA
      dgmFbJrorRF6Bk/ttCs1UygbjCwUKje/rf5dtya/jeVUuarp0Fq3UDUFsBsQgms/e42BZz6J
      xfp4FSQWQnBtOsOBdicO69aMW1x2BU2vLknGG2wkk6h+C9WaBZCOLzM2MU0mucLUXNQsoFsH
      CrkMC+M36Dt2ZqddqZnFZBlJqjyltwpJkghXGRtkd7nRymU0tbqZo5qH6TablXQyiaQInJJB
      SRNYzS2SNmXn+js/Ye/JFxDwyO2MttOnqr5rCG7OZznR69ny69boVZheLtLiX/+WdQdCpJYX
      8TQ0rfu3NQsgl89jqCXUcpFcUaO5S0I2t0jasJ1CNs3C2HVe/cP/peZj7PTWRmNzWdpDDnxu
      O5qmbel1C/kUrs3mK0Fv61zTUEsH6ZUo/qbWdX2q2eNguIXjDc0osoRhgCJBnTIPn0iGz77B
      vqdeeOz6/tmCxnKqzHMD25MUJUvgc1lIZlVC68QUhVo6WJmfpvPg8fXt1uyILGNRFCRJRlHM
      MfRmKOazzI0Msef4MzvtSk0IIRiayXKw04OyTZvESZJ0Ozhu/b59sLWTRJV1gsw7eIcQQnDz
      /Z+y5/gzdzd6eFxYSJSwWSQavNu7XlHtdKjL66eQSVXVNTEFsEOopSJTQ+fZd+r5nXalJsqa
      wdh8jkOdni1J00yViuTKqz/lrRYZqyKRLz96gkOx2pBkGbWK5BhTADvE8Nk36D/x3GP39B+d
      z9HV5MRR5wUv3TD4YG6ab1w6zz/fGFrzKV9Jknn0jS1JEoHmdhKL62+gZwpgBygX8kxe/ZD9
      pz+x067URCqnksypdDfWdy+yZKHAt65cYD6V4vdOnUYCJuKrL2Y1+e0spcrr9m5CLR0kTQHs
      TkY+fJs9x05jta2fG7tbEEJwrc4DXyEElxbm+MalD3m6o5tfPDiIw2LlM3v38/r4KNoqawJe
      p0KxbKDqj+4GBVtNAexKysU8k1c+YP/Tj9fTfy5WxONQNpTZtRqpYpFvXbnIeGyF33vqGfY3
      Nt0dUzS6PXQHQpyfn3noe5IkEfJaiWcenSQTbOlgcXKUcvHRlaZNAWwzY+ffofvwSWxO1067
      UjVCCJZSZQbqMPAVQnA1usD/d+lDjrW280uHj+K0PiyqT/Tu4cPZGfKrhDQ0B+zr1gxyuDzs
      P/Myb/3D11EfIQJTANuIppYZv3T2sev7RxIl3HYFm2Vzt0uuXObbQ5e5vhjlt088zaHmljUF
      5bLZON3Zw08nxh8aEAc9FhI5dd3p0H1PvUjHgSO8+Q9fXzM2yBTANiGEYOTcm3QfPIHD5dmU
      rWojI+uBqhmMLuTobtr4wFcIwfXFKH9z/n0ONDbzlaMn8NrXH/+c6uhkJpVgOXd/GX6rIuOy
      K6SrKJ144PRLdOw/wk+/+Wdoq0yvmgLYYoQQrMxN8ubf/wULY9cZePaTm7JnCMGlW2nOjqSI
      ZcpbHo07upCjM+zccJx/vlzmu9evcjkyz2+deIqjrW1Vb+4kSxKf6d/Pa2MjD6VEVrpB668K
      S5LEgTMv0bb3EG9/+y8fKpxlCmCLEIbB0vQE//GNP+XST77HgdOf4Oe++seb2tlRCMF4JI/d
      KnNyj5cbs1luRfN1KwP/IOm8Rjyr0rOBp78QgtGVJf7mwjl6gyF+9egJ/I7a7fSFGrDIMmMr
      y/d93uy33Z4OXb/tkiRx8NlP0di1h59952/u6w5Jog5n785GBPWIBt3qqMKt9kkIQWTiJkNv
      /wjFYuXIS6/S2NmHJEmbbls0WWIikufM/gDC0EFSGJrOoBuCo71erBuIzVrLJyEE791MMtDh
      Xjf47EE7JU3jR6PDpIoFvjhwmGANA/7VrttKLsd3rl3m9546g0VW7vr3zo0ET+8LYLeu3u4H
      2yaE4NrbP2Z5bpJPfOX3URSLKYB6+WToOvNj17n29o9xev0MfuIVQq2d9x1/M23L3i4veHp/
      AKdNuWtLCMH0cpHp5QLHe2svQ7KWT7MrBWIZlaM93qrO4Z3zfSse40ejwzzd2cWp9q51Q5fv
      IISgWMgTmZ0hEGog1Nh03//7yfgIHpudZ7p67vpzcy6L26HQGV79zbJa24QQDL31I+KRGV74
      8tdqF0ByJcpcNEm4wU0iq3Kgvw94cgWgaxqzN69w493X8YbCHH7xcwSa2lY97kbbpukG791M
      cqjLc7e84IO2ElmVq1MZ9rSuXnO/lraVVIP3biZ49kBwzafrg+RLRd6YnGA5l+ULBw7T4HJV
      5YOuacSWF4nMzqCpKqGmZpYW5jn57AtY7pkeLagqf/nhWb526gxum+1umyeieU71r74/8KPe
      blfe+AHp2FLtAtDVErNzUYQi4ZIFvpYubLczwupRxVjX9boIyTCMulVVXs0nw9CZvnaRm2f/
      g2BLBwef+zS+e3YnqdbOeggBV6ayBD0Wuhs/ihtazVZZM7gylcPjUNjf7qzq6buaneuzObwO
      ha7G6uKUZlNJfjg6zJHmVk53dqNUcdxcNsPi3CzxlWX8oQZa2jvx+v0YhsHc1C0MXadn7/77
      vnMpMs9CJs3P7xsAKufmnZspnt3vW3V1+pHnWwguv/GD2gUwNTZMTlPwOC2kcyqHDu5HeoLe
      AJpa5tblc9x8/6c09fQz+OIruP3VJYVspG1jCzlyRZ1jfb6qbAkhGF3IsZJWOd7nW7c+z2pv
      khuzWZ45EFhXQGVd542JUWZTSb6w7yAt/kfv1K6WyyxFF4jOziArCm2d3TS2tN5XBEzTNCRJ
      4uLZdzh49Dhu70ftFkLw9Q/P8sWBw7Te/vzSrTSdYceqVafXO99CCHMMUK0tQ1OZuHSWsQvv
      0NZ/iIPPfgqn11+T/VrbtpgsMR7Jc3pfAIty/3EeZevOyu3wbJZDXV7CPuuaft5rxxCC94aT
      HO72EHCvHfIghGA+neJfb15noKmZ57r7wDBW9ccwDNLJBAsz02TTKcLNLbR2dOFYo4t057ol
      YytMTYxx7Oln7vu7yUSMn03e4jeOn0KWJCLxIrGMyuFu7yPbthaPd+3tLUYIgVoqMvz+T5ke
      Ok/nwFE+/dU/xun23rcd51aQK+oMz2Z5epWbfz0kSaI5YMfjtHBpIk0yZ2NPq+uRT3QhBDPL
      RfxuC/5HDKRVXeftqQnGYyv8wsFBWjyVQfK9gWtCCMqlEtG5WZYi8zhcLto6uzkweLTqko+B
      hjC22RmWIvM0t3Xc/bwnEOIDywwjy0sMNDXT4LUxFqlMBW/kYWe+AdaglM9x8/2fMjn0Ib1H
      nubAmZexbzJ+p9q2abrgvZsJDnauvaFEtbZ0o1K3p6wZHO31PRTOcMfOnYHv8wNBrGuEPEQy
      ab4/fI09oTAv9e25OyV5x44sy8SXl1iYmaJULNLc3kFLeye2KlZ977Vz57qVSkUunX2Xk8+9
      iPWeAXE8n+fvr17kD556BouicHYkyeEuD94HapFWc45MATxAPpNi+L3/YG50iP4Tz7Hv1PNI
      iqVuPq1nR9xe6Q24rfQ2Ox/yXwjBRHyFeD7P4eZWXLb15+iFEMzFikxECxzr9d7Xvblzni5P
      Zmj02WhvcDz0chNCcH5+lvPzs3zxwCHafPd3/QzDYHJ0hJXFCL5gkPauHrz+wIYePvdeNyEE
      89OT5HNZ9h4cvG8r1TcmxrBZFJ7v7mNysYAA9rS4HrJlCqCaiyAE2VSCG+/+hMWpMfadeoG+
      Y2ew3n5y1dOn9QZltxYLpPMax3rvn38XQCyX4yfjI2iGQaPLzUQiRovHy6n2Tjr8AZRHzHoJ
      IJ2r1OzvbXbSGXbcXZxL5g3GFnKc2f/wTZtXy7w2ehNJknh1/0FsD1xjTVW5cfkidqeTvv0H
      sG6yusWD180wDC6dfYe9h47gCwTu/l1J0/j6B2f56smnkYTC0FSGZw4EH7JlCmCdfm8uGWfo
      7R+xPDvJwWc/Rc/gqYdKlGyXAFbSZYbnsjyzP4Dl9qquAFRd481b44zHVvjknr3sDzdVClHJ
      MpPxGOfnZ4kX8hxpbuV4Wwdum23Ndpc1gyuTaWwWmcPdXnRd49xohqMPLKJV3jSVRa0znd2c
      bO98aAxRKhYYuvAhrR2dNLd3btl1S8Zj3BoZ5viZ5+77/NLCHNPJBF8cOMzb1xM8P/DRebtj
      yxTAKjeCEILUcpRrb/+Y5NICh57/DD2HTyKt8QTdDgFUthBN3lda3BAGVyMR3p6a4GR7J6c7
      u7Hc9vFBW7lymSuReS5H5vE7HJxs76S/IXxfP/0OQggmonki8RJ+l4LFonCw86MI1aKm8u9j
      I8TyOX7x4OCqoQzZdJrrl87TP3CIhqbmLb9uN69exhcI0NbVc187/ur8+7y6/yCJpEzIY6Ut
      5LjPlimAe7sRQpCIzDL0s9fIpxIceuEzdOw7vO5GdFstAE0XvD+SZH+7m0a/rdJnTyX59/ER
      Qk43n+rfi++B5Pm1bBnCYCGd5vz8LPOpJHvDjRxv6yDscj90LmIZldH5HE/t82NVZIQQTCbi
      /Hh0mONtHTzd0fVQt0oIQWJlmbEb1zh47ASe2+OBrRZAuVTi4tl3OPnsC1jvGfdMJxO8MTHK
      5/uPMRcrcfye9RJzGvQ2Qghi89NcffPfUEsFDr/wWVr7D+6K/XcrubYZWoI2wj4r6VKR18dH
      SRTyfHbvAdp9ta01yJJMhz9Ahz9AQVW5ubzI94evISFxvK2dg00t2G7fYGGfjYBLxqLIlHWN
      18dHiWTSfHnwGI3uh3MWhBBE52aYn57i6FNncLi2L6vNZrfTtaefiZs32D949O456fIH8Nrs
      RApxkjkbuiFqyln+2L8BlqbHuPrmjxBCcOSlV2ju2Vfz7MRWvgEmF/PEMypHej2cnZniSnSB
      F3v6ONKyejzRRnwSQrCSz3Fxfo6RlSW6A0FOtnfS7vOj6zoL2Qz/evM6gy1tPIDChcQAABc2
      SURBVNvVs+pgWgjB5OhN0skkh06cfGiwu11d14tn36F/4BD+YOju58lCgb+7fJ6ToUMMdHw0
      y/VEd4GWZia49JN/wWp3MPiJVwl39Gx4TWCrBBDLlLk+kyXYUObtqXEOhJt4vqcP+6NmigyD
      ZCKOpmmEm5prapMQAl0IxlaWuTA/S7ZcosHpIlkq8sWBwzS5V8/5FUJwa2QYtVxi3+EjyKuM
      K7Zr8iKTSjJy7Sonzjx3d1FNCMGbk+MsxEqcbO3hQIenap8+lgJYmZvkne/+Lc9/6bdpaN/4
      jV9Pnx60UyzrvD60xFx5hoDLyqf37ifkXD084O7K6vwsS5EF7A4Hhm5gGDpde/YSCjfW3J0T
      QpAuFZlOxBloasG6xrWrzPHfRNc09h4aXPNcbpcAhBCM37iGw+Wis3fP3c/Lus6fnz3LYOAA
      Lx1qqHpc8rETQHJxgbf+8es8/0tfI9Tase0JMdXYKaoa50ZTTOXmeH5PO32hhtVvfMMgvrLM
      /MwUxUKBlrYOmtvbsTucaJpGIZ9jZnyMQj5Hd/9ews2tde3eGbrO8NVLKBYr+w4Nri4yISBf
      wBi6iaxWt5/vozCEQOrtQupoXTPcRC2XuXj2HY6dfha746PJgauRBYYmC/ynkz2VXWWeNAGk
      Y0v89Jt/xvNf+ir+5vYdyQh7FCVV5epihNG5AoNtzRzu9D80ty6EoJDLEZmbYWUxgjdQWVn1
      BYJrJtfkc1mmxkbJZdJ09u6hqa296jfCWm1Ty2WGLnxAQ1MzXX39q59HVYMbozA9hz6wFyX0
      6GjQatDLKvLFa0gDe6Gva82/W1yYZzka4dDxk/etEP9waJrDLU30NLmeLAHk0wle/8afcvrz
      X6G5Z++OpUSuhhCCxWyG7w9fQ9HcDDZ2c6r//ptfU1VWlqJEZmcQhkFLZxeNLW1YLJaqkmvu
      ZFTNTIyTSsbp6O6jua0dZR2/V2tbPpfl+sXzdPX109TW/vDxDQNm5mHoJnR3wMBeNKmOG5to
      OtJbZ6GvG/b2rvp3QgiufHCW7j17CYYb736+mCowNJPik4ebMXS9/gLIJGMspwrYxO0w1MMD
      yDucD1DMZXj9b/+E4z/3Rdr3HoLb/b/dIADdMHh3epLri1HOtO0hk7FxZn8Am6Uy755Np1iY
      mSYZjxFqbKK1owu3d/00xEflA5SKBWYnJ0isrNDW1U1rZxfKGmsdD9pJJeLcvHqZfYePEGwI
      P2gcEim4cBUcdjh+GDzuR/pTHaKS3G5o6GoZxWpH0gS8eRZ6OysiWOV85LIZbly6wIlnX7h7
      7xmG4LUri3S2woFweGveAAvz86i6jmMXZISViwXe/OZ/48CZT9J16KMdQbY6I6waVvI5vn/z
      Om1ePz2uNhaTOqf2eLHJeuUVHpnHZrfT3N5JqLGpJn+r8alcLhGZmWY5GqGprZ32rp6H3gj3
      2llZjDA9McbA0RO4HlwHKJWQLt9ATmcwjh1CNDZU748QiFIKkY9XfnIrGPllRG4F8jEoxEDN
      A7e3GzLKSN0vYOl/BevVBYy2ZsSB/lVNT42NICsKXX0f/f+hmRzvR0b4rROD2FepOncvG8oJ
      npyL0tLUSLqgsa+vm53KCdbKJd74u/9G79Gn6T/x7EN95J16A+iGwbnZaS4uzPFUy16KORtB
      FzTai8QW58lnszS2ttHW0YXN4dhw1GS1PqlqmbmpSZYW5itC6O7BZvso0E9RFOambrEUWWDw
      5NP3hy8LAQuLMDQM/b2Vfvkqq8Pq3AWk9BxGbgWRW678lLKgFRBaCcnuRXKFkJwhJHcY2d2I
      5A4j3flt84IsoxsCWS+hT7yBOvyvICSs2U4sJ76ANHjkoTeBpmlcfO9nDJ56Gqer8jaKJkv8
      8No4HU0yn9l74JHn97EdA+iaylv/8Je09O1n4JlPPtTInRCAEIJ4Ic/3h69hk+x02NvJrCzi
      FzEcFnB7vbR2dOEPhjb9dtpIl0NTVRZmponOz9LQ1ExHbx+yLDM1OkKxWGDg6ImPbAoBmSxc
      GAIEnDoK3odXh418gvI7/wd6Po6168ztm7pyg2P3IlmcYLEjrbJ2sFa7PgqHNjDik2jDP0Ab
      fRul8zjWo19GDu+9z95yNEJkbobBk08jSRKqZvDWjRgL6iQeh4PP7TuAa40o1cdSAIau8+4/
      /S3ehkaOvvz5R6bWbYcAhBCUy2UuRRd4a3yMDmszLd5m2twlwl4r3kAQu8OBXsWgrF4+rffd
      OyENkiQRDIfZc+DQR6JU1coAdz4KJw5DW8tDT14hBPrUO5TO/im247+J1P/Z+6o4rMWDt5ta
      KFPM5ClmCpQyBQrpPG2HuvGE78+BFuUC+tvfRh39ISLsxLL/VawHXgFbJRVy6Pw52rt7aWhq
      RgjB+6MpDrQ5GE8t8f7MFK/sP8ieVaabHzsBGIbBuR98C4vNzqnP/dIjF2a2SgBCCAr5POlE
      nERshWgixsVCAburmV5XOwe7gnQ3PVyVoV7TqfWyZRgGqUSCQChUOU+GAbdm4PpIZeB5oP+h
      7g6AKKYpvfN/IgoJ7C//r8ieprv+CCHQSirlfIlyvkQpW7h7cxdv/6jFMoZmIAwDi92Kw+vE
      7nXi8Dqxuew07+/A7l6lIoUh4L0PMbQ0qmsabeJ15GAv1kO/iBo8wNUL5zn13IsoFguTi3lU
      zWBfu4dkocA/37hKg8vNZ/r347hHqI+VAIQQXPjxd1HLRU5/4VdXXZK/1069BFAul1FLJZKJ
      GMnYCrlMBqvNji8YZLpc4tJKhnZnBwdbGtjf7qm6UtlmqOvinKLAchwuXgW/D44dBOfDxaaE
      EOgz71N670+wHfkyyv7Pk0vkWR6PsDyxgFpU0csaitWCzWXD6rLj8Djvu8HtXhc2hw3ZIiMr
      CpJcY9fVMODcJZAlxMnD6NEh1Bv/ghG/xbKtD8u+V2g/9AyFssG7wwlagna8Tgtuh8z15Xmu
      Ly3wyv4BeoMV0T82ArhT0SuxOM/zX/qdqua3NyIAIQTCMMjnsiRiKyTjMfLZLA6nE3+ogWBD
      GLfXS17TeW1klGRa4WC4lcPdXvyuR3cB6nXTCiHQtRKKxYYkbWIsIQRaJovl6jDkC3BiEBqC
      q045inKe0rv/F+rKNPm+r7G8CPGZFeweO419zQTbQ7gbAlicduRNbJ9b1XUzDDh/BTQdzpwA
      WcIoJNHGXyd7+Z9w+BqxHvoFCs2nKepWMgWddEEjX9JJ5Iukynn6w0EavY7HQwBCVLYUXRi7
      zku/9p/Xvfnv2KlWAIauk0mnSMZWSMRilIoFnG43wVCYQEMDDpf7blK2EILri4t8cGuFNmcj
      R7v9tASrq8RWt6d2forc5P+NJIGkuJGsIWRrCNkWRLaGkKxBZGsAyeKv/P87vmkaJNMQT0Is
      AYkkQtORBgegp2P1G18Y6LEpSq//b0SGdRLafkS2hM9rwe8BuaRhFFPomTSK149sDyAHAlgC
      ld9KIIASDKD4/cg+H4rPh/SIc1D1dROiMkAvFOHZU3BbdPHlJWYv/Dv7nQsgWXC8+D898DVB
      UTW4uRjj3cmZx0MAYxfeZfLqh7z86/+56n211jqRQgg0TSWbTpOIrZCKxyiXSnh8PgKhMMGG
      8N2aNXe+e8enbKnEuxML5LIWDneE2NPsQqmhZEl93wBlFEVCaBkMNY6hJjDKcYQar/w7u4TI
      LCIoI9k9SFiRkhpyyYZkb0Bu7EUO96HlfYh0EiOVQU9l0GOL6Ok8ejqBmo5hkxZw9hbQlNPg
      7EPxOVGCjSjBIIrPjRJqQna60XQdRdLRMlNoy5OoyxNoy1No8WWMdBFRsCKVfYiiHdkWQLI7
      kB2OijCCt4USCIDPi2hvxuWuIg9CCLh8HdIZeO5psCgIIbhx+QLh5lYampqwWFZ/KwshWMpl
      d7cAhBDM3LjEjff+g0/+xh/VVFr8jgCgMv2XTiZIxFZIJxPomobH5yfQECYQDGF3Oh85Lalq
      GnPJHFen03T4fRzs9OBcp+Laem3bLHdtGQaUypBMVZ7q8SSks5UnoteDCAeg0Yvw2DD0LFp8
      msLV9yheuYqIe7G07sMS8mK4vKQzBitLSUqGHVfIRnPxezQcOoT9+T/GcPjQDR1D6OiGgW7o
      lLQiRa1AUS2SK+VQjfLdf1d+58kXV8hnJynm51AFaJIH1XBQLuQRhRwhzUKzCNIkhWk0vIR1
      B681x0iEbBxqOcKx9hO0eNuwrJW1J0RlxioWhxfOgEWhWChw5YOzDwXLrcauFYAQlTLjF177
      Lj/32/8Vp8e3/pfvIZNKEpmdIZWIgyTh8wcINoTxBYPYHauXG7mDISoFYotlg6KqM7mUoaRK
      HO3xEfLaqt7gYa22bYg7/hWKlJYSLEwuIqcyldCEbA5sVvB5IRQAnwfumelwlLPYotOUb1wn
      NbtEuaEV5fBBCgdCLBoxliNRFmcjFMp5HE0ungkY9My/y/fsPpbDe1ENDVmSUWQFWVJQJBlF
      tmC3OHBYHTgsTuyKHZfddfczp8WJw+rEYXFgtzqxKzasFhs2xYZVAkWLIxUn0XIT6IUphJ5D
      tjUiO/pwNH2GWNngevQql+cvEsstsye8l2PtJznYMohNeSDpX4hKUF5kCV56BiwWZm6Nk4zH
      KqUXZQVFUZDlysC78u/bg/DdKoDFqTHO/eDv+bnf/q+4fIH1v/gA6WSCcqmEP9SA1WpFNwSq
      ZlDWBCXNoFjWKaoGpbJR+a0a6IbAMARI4LAq2K0yDpuM3SroafJUXep7vbZVhWFAJle5weOJ
      ytO9UASblaI/wJxmQV7j9W7kc5RGRtFHhnGX04gOP4vNXoYpMq3HydnzuBo8dDZ00+JsJegN
      4bA6sKsF7Of+gq5QL6XTf4jiCuGwOLA+eMNttm2rIISBUYqiZseweg+g2D8qNKzqKiNLw1ye
      v8DI4g18Tj9H2o4z2HqMVt/tzDkhYGSiEqT30jMIq4XZyUqRXcOohOoYhn43j8LQdXTd2J0C
      SC3O8+4/f4OXfvUP8DU0rf+lVVhKFplaKqLqAk2vBFtZLTI2i1y5se/e3JXfDquCIle25ZEk
      6lbX/17eHHudSHqBgCtIwPnRj8vixF42sMUyyLEkJFOIQh5sEsJjQ7hlhF1DGBlEMYGRjSK0
      MrK/Hfl2OAEWH6XRGXIXh4jMjjPqKzHb7iDZ7MHh9tHqb6cn1EdPqI9mbysOqwNZkm93FWX0
      W29ROvcX2E79Dpa9n655dmm7EmJ0Q2c5u8jVhUsMRa6QKabpb9zHsfaT9DXsxTkVRZqcgZee
      RVPkxy8cOh6d52ff+Ste/PLXCLZ0rP+FNSiUVDRDwqpIWBQZRWbDawL1uriLqQjRxBSJxWmS
      88PEk7dIGSt40WnRoNWQaZKtuBUJTVFJ6SWSahFh9xAM7yMY3ofT34nF24wolilf+5DihXco
      ixSRJh2Hy0qr4iGnZ8gLDZunmVBDPy5/x92Ym7sxOM4AyBa0Qhr97J8gSlnsL/3PyJ6NPXB+
      9P1/Yt+RQTy+NvxuC0vRKE67QVkK09roplxWsVotaOoKExM6vX1BbDYb5bKK3W5lZniEhn39
      WDQDh6P6/Q2ypQxjyyNcnr/ArdgEYXeYwWKIo1oTvpc+hdX96HHjhgWQXImynFHp7+2EOglA
      CMGbf/8XDL74OcIdPZuytVvCoe+l9OafoN36KTgcSE4/sqcRyXVPQJg7jGbzkJFkVtQCiUKC
      5AM/Ja1Ec0rwyQ/ziK421AM9iP4emhq7afI0o8hKJfpSzSMKidsRmCu3g9QqgWpGbhmKqcqa
      h5rHfvKrWAY+v6k1hWsX3mN8JoosBJcnlji2r4merjam5leQdZmLw6M8e/oInV0NLI/n+el7
      r3PmuecppNKE9rSSnFzC7jMoyE184ZNnNnTdDGEwl5zh6sJlhuYv0m1v4dc+8UeP/M6GBTA9
      M41dEgTaerDL9ROApqpYrGuX866W3SgArVxCUWSQlQ3dbEIIxO3IW0PTsNqqf1KuZguho2ta
      Jf5+k+dpYW6O2MoCisVFJJ6lp8lNUbLR2trEynSUmZUYe/b20t3qY/TaPLORWdp7+mgLuIlm
      4sxPxejqCbKSgTPHD23aHyEEqlq+G/W6FhsWwMytUeJZjcHBgzueELOWnV0ngN0aCrHL7Gzn
      dduwx119++ji/unDOgwn6mqnnrZ2m5162tptduppaz07dXkcGYaBcc8GCZvhzoB6t9ipp62P
      s0+7zU61tjYtAEmSkGX57u962auHnXvDGXaLT/VK09xtPj2u160u06AmJo8rdSuOm0vFmJhe
      IBT0s7ScpLevnVSmSNBlIVWS6GpbY35ZK3JjdAKXy0MqEae5vZNkKk1XS5DJySna9x4h4Kxi
      cC0E07fGKEtWtHwGV7CJUjpGZ28/M7fG8TS00N7csL4dIJ9JMHFrDl/QSyyWobe3jVSmRGdL
      kMvXJzh57HB1J0UrMTw6jtPtIRX/qG3dTS5uTMU4fOgQ9iqvwMriPJGlNF6PhXxZptEl0L3t
      FJansPmaqm5bIZNg/HbbVlbS9N2+Tk5FZ3J+hadPHa9uxVsrMTw2jtNVaVtTeyepVIrWgJuZ
      SITOaq8blQmVorBiFLM4/GHUbJyWzi6mb03T1NZJU0N19YYK2STjE7P4Al5isTRdXc1EIot4
      vT7SuSKHD+5/qG11K49sd7nxB/yUdMFAux/VEcKqgD/YgCI94iWj2An6PFhljY7+AVS1jNdt
      x+504fWFcNmqd9Hn9+N3WnA3doJWoqEhAIoNu1XGqOE9Z3e48AX8aDocaPOhORqwKoKJ0THK
      5TJ6tS9NxUbA58UmabT3H0Qtl/C67Rg6WCSdkqpX7ZPb7SUQCiAplQSPhnAI3VBJJLJkMxmq
      bZ7NWblOqs7t69SAVYGmljZam5uq73ooNoI+L3ZJo73/EGqpiNftwNBV1LKKXsMJ9/n8BNw2
      XA1tSHqZcEMAgYIswfLKStV2bA5XpW0GDHQEKClufP4QQpJp8LsqYS4PUDcBJJYXyWTyeJ02
      RpbyWLJLRKJLRCIRIpGlNW8ao5RibimFYvewMDmCw2YjuhBhZmqGZC6HqlV3kwhgfn6OomGh
      lFjA4nASmYsQjcxRUMV9O4es25aVRdLZHG6HjbGlPEp2kUh0mca2LhpDgaqD4YxSmrmlJLLd
      Q3TyJna7nehChGTRwCJLyDWU8V6MLpDP51HQKWgQjS6xvLRCU1Oopunn5MoiqUwOj8PG6FIe
      y+22ZVIpQk0ttbVtMYFk9xCdHMbhcBBdiJApGdgdDiw1dOHn5+coaBLl5CIWu4OF+SjxZAaL
      Aq1tbVXbScWWSGWyeBw2Rhaz6KkouXweuwKpnLpq2XRzDGDyRLPzO0SYmOwgpgBMnmhMAXws
      0bjy4TmuDk+s/RfFHMlMkcXFRTKpGIU1BuTzM9OoeqWXXM6nmZqLVu2Frt9vM7U8z0q6WPX3
      t4MnYo+wJw8LXreC0tDIubPv0NTSTiydI+z3IKMTW1rG5bSRt7Zgy04xvlzgxEA3KxkNn01D
      lRyk4sscPv40U7NzlA1BW4OLs+++gyXYyVIsgVPPgsOHlk3g9gdZSmbpaG/BIkvkEsskSwYT
      Vy9y/ORpNAXcLj8yOgsTNwifObHTJ+gupgA+xghDI6fJTI9cYWguxbE9TVgUO2cv3uCZk4dx
      NLZw8PBels4vcuncexi+TtT4JGWLm+b2Ptx2AInI5AjJRCuBxlYcFtD8QWaGp5DLsxjuMM7M
      DEI1uJ5LYWgCr8OGDDR3tJNbXqDt9Ke4+G/fYvDFVzG0yA6flfsxZ4E+pmhquZLwoqkIrUxJ
      B6dVQbLayacTWB1urFYbNgsUywayUMkUVKySgWy1Y7FYcNhtXL54nn0HDqJYbUhCR0ICxUIh
      k2JqNkJPZwsWm4NCScVtV8irApe9UodT6GU0Q8LlcXDh/Uv09zSyorrY17WxpJutwBSAyRPN
      /w9Jtrv99etRSgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Frq city (3)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Line Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
      wHRBEDq8rgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Map Cross Tab' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Non vs Poto' width='192'>
      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
      2q8Bstaq/AMjryIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Ph_ by Month' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Photo Activity' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Rating pie' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA' width='192'>
      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
      zQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA Positve Cities' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA Type of visit_' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA countries' width='192'>
      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
      qeNQAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SIA countries (2)' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy913NdSZ7n9znnem9w7wUuvCfoQVe+qqu6t3tqetzOKFYzkmZWig0p9LAP
      etPz/A+KkCIUoVlpJYVmZ2anZ6a7usvTFC0IEiThvbnA9d4ef/TAIqvZBXZ1VRFAFYnPG647
      mXnwO5n5zW/+UjBN0+SQQ15QxIMuwCGHHCTPXQBomnbQRTjke8RzFwCVSuWgi3DI94jnLgBe
      XEyajTrNlszhrO535zAAnhta/L9/8ze890//mUSp9aV3t9bW+ezmNQxdZWMrcQDl+25iPegC
      HPJsEUWRjQefcS1Xw9vWzvrNTzjz7l9Q2pxjcWsNfyDG1uYqU7cniPpd5ApZbt5d4E//3f/E
      K2Pxgy7+vnPYAzxHhNp7+P0//lM6PBZCkSi6JnH0+DGmp+cwEejtiODzOAGBjqCD9ZpJ0OXk
      7d/7Kb1R70EX/0AQnrd1gEKhQFtb20EX4wAwaDZl3G4Xhq5RLBTxhcI0ygUsLj820QRDRcWG
      3SJgE6GlC7isUChVCYbbcNgsB12JfecwAF4QDMMAHg6RDvmCw9Z4QZAkCUmSDroY3zkOA+CQ
      F5oXMgASC7e5PZ9gY3qG+lM+oysylz7+FZ9evs7ayjIt/cn3C4UcmmZ8zSvXWV3NfPnVdJpM
      vU5uY5r0rxVoemaWWjmPrAPorK5ufM3rfUuUOpcuXeTSJ5eZ29hAUZ5shEYmQ+MbjKDXVle/
      /GJli9W8Qia5Sqb4hYy7ODdNpVKmpWhP/+634IWcA6QTK2TLMqKs4Yq4yKYKBGI9VLfnUAUP
      g6MD2CxONtfmMQUnPqdBvtIi2j1IJbWOhAuHUcbq7cZhVKhJGj3dXWwkUpg2F2GrjOmNoqSX
      WS5ZODsapVKp4493klnawnC66IsHiERD5Bp2YmKd2ytr0KzQP3aGxFYCTyCMTdAIOQTsgSDL
      yxuIziAh8kxtVHnp5CjBSBvlUp6ZqVnO/eDH9ER9T61zs9kEwO12/+6NqdS59WARm6pibwtQ
      zxfwBNtpVXLIuohHb1ILxYmZDUp1mXhvD+nNBLLgJObW0N3tyJkF1ktWzo91kK7UCLT1Utqa
      xrT6iXVEiEZDVJsW+jx1fnl3B5teY2T4CNuJbWzeEEGHjt3txmV3sr6+iW51EbHWmVwr885L
      x7F5g1QKBVYWZxgaf4PRnujvXj/A8td//dd//bW+8R2n1Wp95U2uV0uEo+3M35/HHfISCrXR
      kmTC4TY627xYvGFcVistWWJoZAxB1xga6qNSa2KYIBomnZ3tuHwhpEaFoM+L0pIQfRFMtYXf
      H2RsMM5Wqoyg6XhCftqCflRdJxjqJuqzEumKcPPGPCdPj6I3WgR7+2h3QVMBizuAKbcQLQJO
      wcAAcPqwAorcwGKx0N/Xx8LsPP0jo5hKk4YG8Wj4qXVWVRUAm832uzemrlCqKwyOjGCqCiOj
      IzQLOWTBjlswiHVEEf1t6I0KQZ8HSVOx2n0YukogEGJ0JE4iUcKma7hDfgKhEIpqEA6FiIe9
      eNraeDC1wNiJUaxKFTEySk/YgiKpGDYPpq7gsAiIVhFT1xFsXqyChqxoWE3oPzrK4v37dA2M
      YDUlyg2d7ngU4Xev4YvZA6iqjGh10KxWcHnd5LN5wtF20FVEAQSbA9E0UDUNu92OqshYrBZU
      HeR6Gd3iwu+yUijX8XvsVOoKYY/Ah598RnTwOKdHenE4bJQLeXTBTqWUwekOEmtvQ1dNBHQa
      5QzbFZMTI32YmoohiqCrmBY7lXwGVyCCBR1RANFqpZjL4/QFENQmkmHBpjfYyEmcHusjm8ni
      C8dwO56+rvmNegBTR9YMHDYbiqJgtVpRVQ2lVUPBTtjnIFOoEvK5KNVahHw2rnxyGU/nKOeP
      D2Bz2KkU8hiCnWY5i+700dnRjqkqiAJUixl2qiYnR/tAV5BNKxZTxRQsVEsF7J4gdtFEEAUs
      ooViIY/d7UfUW0i6BbdVY2E9y5lTYxTzWRzeED6343evHy9oALyIfKMAeAF4ISfBhxzyiMMA
      OOSF5rkOgLl7E9y6N8/O5hqS/uRIr15Kc+vWA2StydSl9/jZhzeoyY9kPo1crvTkb83PA1DY
      WeX6jVskMuWvXZ7M5hI3bt4ima/91s/l8rkvWZqVyg6f3pzlq0asuVwOU1MolqtP/cz26jyX
      rt8ml0pQqsu/8W6L6xevU5Mllu7d4me/+BWpwhe/lcvln/j06soSkqIj1QrcvH6dudWv7zSV
      yxk+u36DpY3kb/9cNUf1N4ur1rl+4xa11m/fCFXM59DNh0PkX+e5doPa7TbMZpNiWaJhphjt
      jzF57QaK1Y3bJqFoXixWN2dOj2FtddJILTOdKhAMBlldSXD+5XEe3LqFv/coXstDzT9blXn1
      1Zcx5QrXr13H4vDi9TkY7vSRrPkY6Hy6FFls6Lz88sso9TzXrz3A7ovgtwtEfS5Kukpqcweb
      N0w9u0Z8eJyx/iiTt6fQsBKyN5DNdkDl4i8/JH7sLHJqkY2cxImxAbLlMk67l/T2OkdPjaOZ
      IuGgf9dy2Gw2rBbI5YuohRa+48OsTE9RqjZp62yjUFcBC6PHjiO784SEOp9dn8Xr8ZFNbjEw
      dpLqzhJpxc1odwiASinH8OlXaHOZPLhzk2oLYh0hOjriJDM1xoa6ntoum6kir776ClZD5vbN
      G2hYCfoDDB7rZXNhi3w6iWH1EHBUyBpdvP3yUVYeTJKvKbS3uSnUFcDg3o1LSK4OOl0Sd+c3
      OX5mnOzGJhZfECm7SdvwOHaj8cQc8bmWQUORGKamoSgyiqrSEfORSjdxuwRCsTjd8R48LhtI
      JbKaD6GWI9QRpaVYCHo9RFwGed2F3Grgcdppj8VolrNUZDBaRepCEIfepKWpCEodSQzic4ro
      uobV+uVnS72QoaGZyPUSuqMNQ66DJtOqN1DtLnp6h7CaMh6fj3hnJw5BJlXRCdhUwrF2wl2j
      BJ0mcrNBsdlCqjXo6OrAgosjp0+iNut4PE7i0TDlhoLf48QwDARRfLxV1Gaz4Q2EsaOh6Rqa
      KuMJR8mn83RFXajuCLFgBx1RH+gK2XITt9bECHWgNhtE24LEIiHypSr1pkQk5CMQbEM0ZJLZ
      MiIG5VqDsMtKXdMwNYVyQycS9KLrGhaLBUF4Uqi0KFU2Ci1EtU5ZthKwqTQVE8GiUixLRKKd
      xHx2/JEgNk+MSMBFMpmiPehGdIdoa++mI+xBU2XS+RKGLOGPRPF5fbTFunCIOoGAj2hHJ5VS
      nlAwiGmaaIbwfKtApqEiKWDKVZqmg0jQSymXQsJJJOgBrNhsImgtGroDpyCTSGaJd3XTKGUQ
      XT4q+QL+tgh2i4DH48E0NLa3tgjEupArWXAG8YgK+ZpENBpFU1TAwOf7ck9g6ArbiSShWAf1
      YgZnIIZVq1Oqa0SiIawWK4amIhgy+bpOZ3sb5c/L2x50ogouHFaDVGILmz+K02yRq0i0R9tw
      upwokoTUqKBb3bgcdnRNRRQFnC4PsvRwdfXRw6HZamEXDbKlFvGOCFK9RKYk0dcdRZJMXC4b
      GDoNWcXjtLOztYk30olNb1CRQVQaGHYPQa8Th8OFKEAuvYPh8OMRZEoSdITdJNN5gm0xRFMH
      TLxe75cCAEwyO1tYPG1Y1NrD++OzsZ0tE20LYxEtWDAQrAKpVIHu3i7kWolsRaI7HkHRwWW3
      Us5nqGtWYkEnO8kc0Xgcm8WCqWugyxQaOkGvE9E0EG1WNGzPdwAc8gWHMujuPO6nNU17LjaU
      1+tPc/e82CiKAjwcIh7yBYc9wFMwTZPkxjKaM0yH38rKZobh0REcVpFaMU0i36K33cfq+kPP
      StQNuKN4bAZOlwdR/DoL8l+fQnqLQlNkZLAbQ6oyvbCG1elhZKCHQqlGvD1CanMFzRGmJ95G
      a096AIO1hTlEfwd9nRHQVVaXl2nrGcKp11ndLjA82M32dob+wT6kloTXs589kEkmsU5eEjk2
      3EdyYxnTE8UntsjUTEYGunaTQQ0+/OB9oMWHH3z6+FW1XiCRrTI7N/Olb0z+8kPywOzEVeZX
      F/nw8gTra5tPLVZza5JL8/mnvv9dwNCbNGULm8uzTN29j5UmMys7YGrcvTePWNpkqy4SiwZJ
      bW+yvLrD8uIcG5s7fC0zyjdCoVxRaKQWyTRBsDpob4+R2dmhVMiysrGBJpdYXM+xtjiNou3R
      M85UsTh8rM/epaVBfnOOou5g5v598oUyTrXA9ck7JNPbTD9YoCrt87PWNDAEO9LWDLNLi6yV
      dNx2gwfTq5iVDdYyrd1l0IfjRZNmU+Kf/+E/oipw5uw4KzmZ25d/haFp3Ll9m/ahccRqguUH
      W/T+9CeozRLvX73Hv/3v/1sWbt1nZeEOcr1G58lXWZ2ZpoGNEzEH24llLP02/v7vL+PwR3Eq
      eaq1MpZQDLe7h9/7wen9bahdEC0u7FaJzr4jGKV1Fle3GDrVDYh47TrLyTpnxzyIxQzDx07T
      Si6QqWokq6uUZYPXzhzdw9LZ8XsFWuYgUReIggOv0KJz+CQdnW1ki2VE0Y7ayCLbAogC6F/9
      o18fwYFcSaFYfVhFE3+sm/qNO6SrCueO9TNflTh7PMrU1DRqK8/NS0u89Qd/QsS550+Iz8tn
      wWo0SdYFOmoVatkid5p1ekJ2Vrc3iTlGd+sBBERDJZvexrD5Mawejg2EKVdr4I0zOjqEtZFB
      d8eI+UQqppvRvo6HX7W4uHBmhIWldarVGnXF5NXxIbbWlvF1HcFqNknkKpw/MUqjkMDXewK9
      nKOmiZwc7aD/5Mu0ir99MWS/UBppLl2eYmNrk3pTwiIKNOs1ktk8LVnFImo0JIVkUaI7GmDk
      2DHa43Ecgv7Yebln6HU+/vg6O9sb5NM75Ooqa6kKw91hEosPuD1xm+mVdWRFQFYUDGOPnryt
      EmuZMlKzQiGboaWBqav09A5y7dKnpJNbVDUXw31ddHdE0DUV5etuofg26AprW9tYjAa+cBxT
      EDA0AwRQNSdDA227zwHkWoE7s2ucPnuWWjGLxyFiCDYUwUU9tYQz0kd2cxFf+yA2KUu2bHLi
      /AmkYh6rx0chk8Fuc4KgE/Y6qLQU/tP/9TdokSP8dz99idVElp6R4xTXZ3C1D+FExuMU0R1B
      WpUyHR2xb1znF00FSm1uEO7px/EVa/qHKtDuHE6CXxAOA2B3Hs8BDMN4LjZNK4ry+GYf8gWy
      /JsmmkPgOTfDfRtM06RWyiFpJprcZHMzgaw+XM2sFrNsbqfRVJnE5galWotKIUOlISFJLYx9
      6FRb9Qr1lvL471qpgKQZD1ebt7ZoyiqNSoHm54Nu0zS/0kj3Tfj1awDoSpNStUGrVmI7lUXX
      FJLJNLphIEn7H4SKVKdSe/hAVKU6lbqE3Kiyncph8hQznFZe43/52wn+/f/w59gtT87YW8Ud
      CmaQ7jbPE69LmUXuFl10uSz09T/d+PR9wTRkMgsTSMM/JSKlaVYKzMkiZ0bi1Gp1chsrtMxx
      LJLE4p2beKw2cHoJeVyMjo3ucel00mtzlD0DnBnqACTW793DPf46xuZ9WvYwvrBKbmOKpv9V
      Tg14vvIXvxkayYVJWj0/4FSnE0yDubu3yQp+PGoFt91BMmWhUZcolaoE2uN0O7/ejq1vh0E6
      sUVWEjl/8ghzdy+Ttx3Bp+xgFQ00+2u7B8DsnXkGe3wkygUqawU8NJBtMhvJOjF7mTs5H28M
      2kg2PAzEbNydmufN105Skwx28jKNwjr3l7L80b/5M7zfU7+paHEyPNzHDBCJRskW6gx2R0EQ
      8dhF0hWdVyMBtqZmcXgjBC1N8g2JdC1PXRc5f2JkD0tnYWBoiJnco7+djIz2khIgUygiGWVs
      Lh/HhoeYye5hMbAyMjLIzOcP9lougeyMYJebhP0etjY3sMaPImh1mo0869dX8bz7LiH7Psmg
      iPQODFJdTVDcXkbwd2JtStg9UcZGA6xtVnYJAFNnbnMbf8DJ/XsL+FUrdblI5HgPemUZx8gg
      x9sH0EtTHBt/jdnL/4xQT5CunQR0ioUcme08rUyGisr3NgB0tc61z26z6mhQsaYpmS5c4ShN
      p5VMIoFdaLG+tkmlqdFsVnjtrXHYKFDYmt6HOYjK5I1bTBch6jqP1enizrVbFAMZznV1sLaT
      plGvcH3xDovVOMM9P9ijckhcvXKLZSFF7JVRNMVEruVYz9TpOdFFy3Tz8pFhlJwNTJXEZpKm
      CiH7HhXnS+jM3Jng9uIWF86fo15Is1N044wofPLxMmff+YMvVKBHk2DT0NhJ5+iOx0hsJ6nm
      khj2NiIhgfnlLK+/foa7dx7Q3xsnEOmilJgnWWwwODyCYgoYTRmpmqTcsnD09Cnc+xwAlUqF
      QCDwrX/n246Xv+x4fJaYjzfMpDbXCfcO4PiKyz2aBDudzj0px9MRgCc/tLdt8+s8Wb4vlUQQ
      vhwA33eeVQA8bzy6t882AL7/PH4+C4LwXDROs9l8LurxrHnUox22zZM8EQD71zXtHYIgPPMM
      yKahUywUcfmDuB02TF0lly8RbIsg10s0FZNgwENT0gl4HOiCBZtlfxXmWrmAYXHhskGp2iAU
      DtOsFjEtLoL+LzahPOu2kRpVBIcXh1XENE2a9RoOjx/RUMgXKwRDAeq1BsFQEE3VsNu/RmKu
      Z4CmSMi6gMdpp1TI4wqEQW3SkE3CIf/uKtD7H77Puz9594nXFm5cwd7Tjy/YSfT7OrP9hqQ3
      F1jerqIJFn74xkvM3btN07Syup2nlV8h2jXK9uYSyZLKqYEooZ7R/Q0ArcCVK1M43QLDw4Nk
      UwnWUu34zRqryQI/+fGP9+rCrN25iDL4E8a7XahylenPPqP77T8kd/8Gqj1EtJJkYT1DX3c/
      7nCM/o7gHpVlNwy2VhfISDbG2qzc3cghWq3YWk2sdoOu42/tvhCWzWZZvXOLX77/L3x2Z4Er
      H7zHlRt3KGYS1CWJSx99wMfX7+5jRQ4Wj8tDuZRFtDzUsAMeD+lkCpvThWiY7CRTBANBHBaD
      rWSaWzdvo+6n6cviRVBLtFSBtkiQYq5IKBTGZTcxBTtWy1717FaOHT/6eO+D3RngyGgv8DCz
      RTGzRct0YzFMKtUsD25eo6Lup/NGZHBkDI/TRrau8sqFl/E5rHjdFoq1MulU6ekrwdV8iWPn
      x8mvLZFWvZwa7qFZSpPZ2WJ5J8/0zJf3BTyv1OpVXN4AzVaNXD5HqV4jEAzRqGTwhWJYtCbe
      zlE622NE/E40pYmyJ/7jp9AsINmCYMpsbiRwB3xkMwmyeQlTlZDUvSqMzO2JKe7fv0chn6NS
      LjA5dZ97D2bpjMdxOa2olgDHRvvoDHoxDZnyvuosOovT97h/bwqLIHDpyiVqipVAKIig2+nt
      j+xuhltcWqTN6cIeC5FP15FLm2SrBiND7dh8Meam7hFojzF+9Mh+1uZ3Yi/McKZp0Gq2sDqc
      CBhYRZFGs4XT5UZXZQxEnA77wwwMGMiqidNp3/t9Mb+G3GpiilasIkiyisvlQpFbINpwOuy0
      WnuzI6xRa2CIIi6HHQHh4ZZLixW3w0ZLUnC5XZiGgSgKtFoyLpdzX2VQqdlE1Q2cbg+a3MLm
      cGFoMrppweW0H7pBXxQO3aC784Qb9HlwDKqqerjxexcebYp/HpS+Z8kTcs7z0BnsjevRRJYk
      EG047FZM00RRVOx2O7oqo5kidivImonTZsFAxLLHm+J/E6nVxDBFrBZQVA2b3YnDbkGWVeyf
      D8/g2d9jRW5hijYctoftIrVaWOwObCI0WzJOpwNFUXE6HRiGgcVyMCdRPhrG2p0uRAx0E2xW
      6xeZ4UzT/Dx7mMHExARdXVEmJh7Q1fXw8GS1XiRV0aiVc/j9T6bcW7g5ga27i+LqDFcn7qLb
      PMj1On7/F8mhcjs72Lx+9kyQ+BxZlp/5Yk8zv82VifuIDi9tAS+V3A43Jh/Q0xfn2sVLrKxt
      UKoWebCwgVeQwR3CadvfdYCPfvmPSKYTQyozO3ufZAV8ep5/+vQeJ48No3+eGW63jHXfGKPJ
      x+9fZHMnQ09/P638Gp9NzJNI52nlNlnfKWBqZSbuziAiUlNFQj7Xs7v+12BnZYaZpXV28hXM
      6g6LyRY98bbd1wGymQxgkM3k+OzT96i3TMZPHWM7V+fKx7/kT/+LPyextkSoawS1sMHUjXn+
      7JWXKORSCM4Q7T6dv/nf/44/+cv/ivzKDLI9wPrkVQbf+gOCap7tssFYn5+VRJVX33gFn2N/
      F0e+LplcFlPVKJbK0NtOMNZNX2cZ5DLBvtP0ObPMZsFpldjOZFEyDV575RzWfYsBFcEQqTdb
      nDpxBqnRIDbSy9rCCmPdTz815lvTTNN+7C382ioN2cDp9KC3qti9QbL5h/k8VULYBCiUcpRX
      14lGf4jXuv/DMI/LSa1epc0XY2B0mMbKQ5vsrrfI0DXkVg0dJ+WGSn/EQjqTpW5p48jYESis
      sJquUi+lSTZFTgx1AzBw7ALjPU4+ub3KyJGjDAUN5jbyPJheon9oiOODHVy+cQej2aKlaVTy
      WapfkdX3u0A4HMUfClKrlCiXy1QLaZZXVtkqyFS257i/nOPU+An64u343A50pYG8nzKoptDR
      N4LaKNGoFWlZg3j0BrlskrtTD6hIe9TG7hj55VtsJmsIao1KIY870oki1YjFOgj77bQIcOro
      EO0+O4IpUzig6Vm5Wica66DZKLG1tsLqygrlhry7Ga6U2mBydo3TF16lmksQclvRBActi5/K
      +l0CXSNsLc0T6TuCUU6QLei88pM3qCeWmV7a5uj4OWrb81hDnSRWVvCE2+kJW9iuCPjNCjtl
      k5G+APMrGV5+7VX8rmfXA+yJGc40qZSLWJ0+LIKBYGiUaw0cLi9Oi45sWvF7XKiqhohOXdII
      +L37KIOaVEoFsHnwuWzopoDN+nCsLcsydofj4RyGZ+8FalRLmFY3DquJYLFRKxexuf24rFCs
      NAiHQ+iais1qoVSuEgoFD2QibhoahUIRjz+E0qggqTqBUNuhG/RF4dANujtPmOEcjv3crrY3
      2Gy256Iez5pHKtBh2zzJEwFwUBLVs+R5qcez5pEL9LBtnmQXFchgcvIO58+fZnJyjvPnxwHQ
      mmVykhVBqdHREX/iG0sTk7S/dJ4AOu/9w98x/qN/TVfoSblrc3kaR2yEjsDDLvhf/u4/YIsM
      8/Ybr+Gyf3FTUsltYh1dT+roWpN0UaMjtvuJJ3tNvZjkxq376K4Q7779ClsLd5la3KRr5BRG
      bpN0qUwgEiVVlHjjWBeuzhHa3PupbElcef8SJc2kJ+InmS/QMXSaYb/EP1xa4t/9N3+0N5c1
      mvz8H3+B6Y7w7rs/xC6aLN6+yGLTx3ini8VUjTMDAT6dWOTs+DjYvQx/zYOsnxWV7BY378xg
      8QawNCpIqsmFH/90dxl0O5Hg/PnjbCeSKPUUlYbBmVNjrKVrXPzgX/jz//rfsrUyT7TvGGp+
      jRsX7/NfvnQeubBBRRGYW1wnZSmBNYDHrLJZ0gnbKqzeX+foqTOMj/aQL1U4fyLG9tIdljZz
      2GwObP4YYVuLSilHrqLQEXKztLbNYJeD//zBBn/5Fz9gYW6J4WMn2Jx/QOeRsxwdiO9WhWeK
      NxzBZxfQ/A+PA8q34I//+F9z9+4djo+fxLqaxuvUqTUVttNZ5JzE6y+f3UcZ1MHp8ydZT9bw
      izW2siZ2q8lyqsmJ/j38h2um6Dr1e/i1FRqygaHkaTraabco9I6coCw/wO704nbYyWbTVCtN
      4vEf4jkAGTQQa8ctTmMPRNCUBi05TyJV210GNXUdRW6iYyddqtMbMthJpalbIxw7fhQjs8BS
      skwuucF62eDU5xbY5dkZ6rLCzPQ062ubHD0+xvziHHPTt6nJIuPnTrM0uwCAy+unPdpGKZei
      Z6ATiyNKKZkgldxmJ7FFfOAom6tzZNbvIbk6OHbiDOtTn5GrNskVitTqNdLZPPuxdl0rlgh2
      9VEvZ6nVa3gElXvTU2iig2tXJ/H4PfSNnGS0J47T5cBUakj7KYMada5cvY/X56ZQaTI00EN+
      Z4N0cpvJO/co75XU7IpQWJ9iO1ND1Jvkc1kSGyvcnl6mkN5mO7GN7ozy0ukxYh4Rq6CQbuxN
      Ub6Kcq5ArH+QaqnA0JFRfJ4wXR3e3XoAkdcvnOTjTyZ56c03qGY3iHosqKIbn8VHqerDEj/K
      UHmOWFcfgdw6Wc2HG3BGh/ir146zNjuNYrXgsVvpjHfj7/QwGA8ztzDP2ZcuABDxe7g7Pc9I
      1xDeUBtel0Ar4sQmqog2G+1BN3JHFxZXiPb2XgornzE4/ibS/DKRcBAlH8Tnf/qBdM8Sl8eH
      w17nlZfOAxqjp86ytZWisztOKuhBMR8+0Xr6B7Gikq+pePZ1bc/B8eMjmILAyTPnSGXyDB85
      jctuodlo4nJZaTWVr/6Zr4slwPmzoxj2AA6LiWvgOH80dIyWJNOqFBgZfpgaxhfpJNLVizOc
      o+tgRrF4vH5s1RYvXziHWsszMv4KMZd46AZ9UTh0g+7OE27QR47B7zOapj0X6xnPmkcp2w/b
      5kmeGAI90oq/zxiG8VzU41mj6w8nJYdt8yS7qkCFxBK357c48/IbtAd++8rh6v1pOk6fZK+y
      T34XaJQz3Lp9HzwRfvjaWcDk+s//Tzxn/gx14x65Sp1QNEKqKPHqWCf2WD/hfZZBr358laoh
      cGyom+WVVUJdI1QSczREH+/+6O29uawp8eEv3sdwR/jRO29gNHJcvXkP3RGk3V4jWYHhgRiz
      ixucOT2OYXEy0BXZm7J8BdVcgtv35rEHYgSFBol0jvG3/2gXFcjQuHxzhh/96B181Ln88Ycs
      baeZunmND375CYVSlosffchaqsD9iat88ukNSsUkH3/wAVuF5/OERncgxoljI3S2P5QUi9sr
      +ONDCIKNE+On6OzqJeCxY7ca7KQzLM4vou/rzMrB+PlTdHV00dU3xHB/H7E2P4Ze3IsAACAA
      SURBVKJowSJ++WDqZ0YzRWzsHUY6PTRkA4cnRMhjw+3xoCkqVocdp9OJ3WohlU6xvrSAtL8N
      8xh/NIZLNHF5AsTjMUzBicchPkUG/byMheQW+WKOW/dmSSSrxK0NphfXKZczXL9+g42albH+
      DrZXV6lXU0zMJPazTvtGJb3BarpOpC2AJLVIpjNsri2zsrrI5OQ0be3tDI+d5mhvHNFuR1Cq
      7KvJ1Whxe3KeWDxKYuE+Vdx4HQYWZxSfzdy7TfGOEJXkEtlCAwsK9VqVaN8IUjVPfGCMwZCF
      khnilfGjtDkM7KLKzgE9I6ulKn1HjlLNbyPjYjDuIl1o7bIhRhCJ+S1cn7iPyx9E1U3i3T3E
      ggEi4QAWtwtdg67+EZytLHXdTldXGM2w0tHVS7zNezA1/Jy92BBjYlKvVlFNCw6rSO/gKEPD
      R+jvasdUJOqtFsFQG26Pl45IEMHuJxraRzeoodNsNmkqGsGAn0atis3dRtQv4m7rJBbyo+t7
      sCFGdOK2KQTjA7hEDSw28uk0fcNjeO0GJdXJ2EAcLHZinV1ouoWB+MG4QTE0kukcI2PHMVpl
      ZFuY0d7ooRv0ReHQDbo7T5jh7PZ9y1u9Z1it1ueiHs+aRyrQYds8yRMB8Ey7xwNCFMXnoh7P
      mkcu0MO2eZJdWsPk9qfv0/vyjylsLDF2/BgiYKgSDUWgsLNBW/8wPvuXbbWLM3MMnTi2q7Za
      y+9QUj30xvczN+SzoVFKc/3WXUR/Bz/6XAa98Yv/iPvMvyF//5eYrjixoJWVdIvXj3Vhi+6/
      DHrlg0tUTSvHBuMsLK0RHzmFpb6I4T7L+NE9kh5NhQ9//gt0Tzs//uHr6I0cV67ewXCF6XC2
      WF7dIjY4SiGd4dyF82im7eEpOwdANbfNzTsPcIZ7sNa3qGkOXv3Bv/piEvxrtWJi4iqFokom
      uYnPDRNTC9Qz8/ztL+5gMWpsbG9idYfZWZpiJVOnUc2RTmdYm1/GH7Rx/eYU/pCPe9cn2MzX
      caglPv3kUxRbiK35u2iOEGH/3izJt1qtZ77cb3N6CHgdmKKT9kiI8s4qdUWHQBfFtTm80R58
      dp18rYWgtsiVW8Q7YuxfZhQLsfYwsmzS29dFMpEg0j3A8bEOsimT9nbP45Vgm+0ZBmZzk7Lt
      KHF3Fau/A4/bQyToQjFtnB4/i64r9HaE2MkU0DSdfDZHV18P1gOYBNvdPnwuK6LNTTG1js3b
      zkBf5+4yqGAPEhCqlCSdD9//FeVCCosvyqmzF/DYRE4fHeDWjat8dP0eG6ur3Lt3h47eYSwi
      bK+vkd1a5s7cPCXJSyWxzGe3Z7hw4RSGVCWdKVAqV/e7/t+KWjbBRq7FYF8nqqaytrlFYn2V
      pcUlzrz+Y/xKGk//OcaHutCtdkSlTHOPD4t/AlNi8u4iQ6ODKLLGmfGjpNMZmo0GrVZz706t
      dASo5TYolBtYRYNmJcP8ZonRgW60Wgrd1U5Hzwg/eOkUIauCy6qyeUC3vrSzyk7NpK87wvHx
      N+n1NljNSLuvBHf39HByuIP1i4ucGD7HZlEl2tHL6tIE0YFefL4AQ8NHiLkE8HbgdnUQ8TuJ
      93QjCk0inb10RqPgd2HKAqLRZHo5Te/gEfR6EM347meC+HVEux25ssnSupXuWICzr/2Q02fO
      0cBDKbGAGDtCt0+gSjfxjgjr2Rbe/ZxrGiY2UWd2fomhzjBriQLjJ06yNDuJojiQ9J69ua61
      jeHONJr7JIJUQdVFtFaZuZVNjvV1cGzkoVtXdAUZO9PBzOwKwwck0FkdTprr66yIFmIulYq1
      i/FO16Eb9EXh0A26O0+4QTXt+/Vk3g1N054LV+uz5tEc4LBtnuSJIdDzEADPSyA/ax6tAxy2
      zZPsOgdoFlPcnJqjb+w0Qwfk3vsu0ShnmLh9H2swzpsXTpLfWeXe7AqRngHqO5s0DZGO9hBb
      eYlXxuJYQt2E9lkGvfbxVRqinZOjvcysp/nxG+e5+MH74O/gzVfO7c1lTZXLH36A5m7n7Tcu
      oMsVbl+8zvA7v0/mwRVSZY3R0W7mZtc4e+EsiirSd0D/T81yhltTs1x4/QcsTlwmX5c59+ZP
      djsoW+ODj67yoz/8KaqisrU0TbJuYTDiIlmV8dkVtlNV3HZo6xtDya5Rxk93yEpia5t4/xAW
      qwdDqdHT1/f0I2i+R7gDMc6eOcFW/qGdoK1zkBMG1DULNQwEwYKma2iaRDKZQi1qnDkxso8y
      qIMLr19gdmGLtng/8UoDU9eoNGr09IztXTlaO/j7X8enr1OTDYLOAMeP9NAwH845LEqdxS0H
      Ojqb6wlU3aSrs+1AZFB3sJ3h3hy6+XCUIAgCJrv1AKaJLtpoFdb55OYsjUyJcEcb9U2BtvM/
      YuX+p3T42xBC7dyfnsWtVbi7OsWFI50cHx1gajODVk7h9oTp6+vb94ruBY1Smp2yxomxQQCy
      W6vIjjBDMZNktptBewHbwFmigVWSpRpOtURDBd++KUEKM7MbnDp76nEmClMQeOudP2Bp7i5N
      uX/3rv7bYvPSqmTBbBH/jUwPZ1/7IZmVB8hto7RbaiTW15BEG2sVGD3ItVBDRhIDnB40yZR2
      k0FFKy8d72ZiNkHv4HHM4DqKI0zMaaMzFoKOLgIuL9ZggEZDoZqu0t/XSyQWxeMN0B4NotXW
      sA18945P+qaYhkFqfZFqvUl/PAimztL0HWoDY/QGVHJKO+cCIhU6ONkWZDnVwLufIyBNo1rK
      cuX6BMMdPlLJJKbdj72Vwh0dwOOwIMt7MPa3tdHpT6B5j6DXcpRMmFpNIWZViNrJ6AHOxnxU
      yjpHzlzg7tT8gcmgtdw2S2sp3DUrI90+lrMyrw67n70b1FCa3Jtf4/Sp41gOoKs7dIPuzqEb
      dHceB8AXB2R8vymVSoRCoYMuxneOR8dGuVwHc0DFd5Un3KDP1CdyQFgslueiHs+aPfECPQfs
      OglObSwwt1nm1VfPYbNYHueaf1FplNLcuHUXR1svb144QXlnmcuTc4yde5N+v87Pr0xxbijC
      TLLFa0e7EIJd++wG1bj76Xt4Tvwejvwc85s5jo2fJ7k0SU5y8O6P3tqby5o6lz98D83dydtv
      nEf73A1qDXTQbmuwniozNDbE8sIaF157Call0n/AblBfxyBhymzkZN585we7uEFNjZ/904f8
      +EevU81vkSyppDaXWEkW6fCLXPrsJnavn9X7k+QkEbWaYer+DG2d3SzcvkoND1I5y3Ymj1JO
      Mr9VorM9wn5NB/bKDdoeCVBrqsTbI8wsr/PO22+ztjhLpVREtVhxCxrJUhOH3qLYMOiIhffx
      gAyRuF8kqQZopZdpSBJ5SeTt185TLhTp7OzE+HxL5DPtAVqb5M0Roo4iVn8cj9tDV0eIUk1G
      UKrUJQ2X206uWEKVDCrVKj3d8QPZEml3+4iGvDSkJusLa7hCEQZ6u3aR6QUrf/KHb/FPf/93
      rG9tUy7mmd1pUNxY4h/f/4hXTnRy4/4SiWyRX33wAffvTnPqXA9//7/+b+Sd/cxdvcSlKxfx
      BoP88y8/ZO7+XerK93tu0SpnWE3XOXNiFACrrlBtVJDqJRbXtll48IDo8DleO9pDzbAhtHLU
      DshxcOLCm7x+/iQBt527dx5w9qUL2PYqS6/VjVQr0Gwq2KwCSrPE3FqeC6fHqMrw8vFuVFc3
      775xAb9QxSVILJX3pihfRT2/w1ZJ49TREULt3ZzqdzK9XNhtCKQzO7eA2x8mGApjWD3EseBo
      ibRbZS5euYnhH0JSTLq74uhSlouf3OXC77/L8swkzlgnfVadjkiQ4f4+DHc7dsv3ezlMVWRS
      G0vUWzKDnSFOnj7BlWtTnHv1HfwuG+lMmojPTl6NcSrgZXFnn2VQJC7fWqZuzxAZibO4VeDl
      Cye5ffkin3x6lbfffn1vLmuPEXNuoPkG0WtZJFUhvbPOFUnm6EAnU+t5XnnlGFKtzNi5l5iY
      mGX8gNYAFEViZ2WZZkvi2GgH95czvPpa+Ou5QbNbS9xdSPDS628S9jxc5VldWqJ3dJTvytTq
      0A26O4du0N05lEFfEA5l0N15PAQyTfOxVPZ9Rtf156Iez5pHD7fDtnmSXQbnJiszD2josLOz
      w1NTqRoKk9cu88mnF6nJX347tbPDU/sTrc5O6oBmQ98AqVbg2pVLlD9fKG/sLPJP73/ESiLL
      /ORnLCQKJJan+eDKbcqZbUr7uh8SQOPelV+xlpcBkzvXP2IzU2Xis495/+I1VH2vEuIa3Lj4
      K67ceoABKFKFGx99QkGG+ambfPjxFZLJTT54/yPylQqJZH6PyvHVNMsZrnx2lYZqMD3xGR9+
      +DFl2dg9AGZnbnDz5jRTd6eoFlPcvT9PKZem2ayzsZMjn82hCzbOvvQSlWIFG3VuT0xSlyTm
      7t1hPZnnwd0p6rUCt27dptZssrIwx4P5VZRmmds3LjI5s73/rfANcXjDjPRGUD7PMJjezuEL
      BYlFwowdPYKm69QbTRS5yU4ySSaV2ZeTa77AwukTwzRVk2p2E0lwIMtw4bW3iPid7Nmev1YC
      R8dLxD0qNcnA5vBzdKgdyYBSuYKXKg+Wt9BFk5X5VbL53N7tT/4KXIEYA51BNMNAknXcDhFZ
      MXY3CVo8cZxKhoJm8Muf/wxd8KA0ekgnm8g+H0FB5yc//iGzk58xfP4Nbn/8SxI1mYps0sht
      snVngdFYgHxyi62luyTrElpFxa9XWFoVeOvsMKnZ/W6Cb85v6tbR0WO0mQpTd+/zg/GH+22P
      nDyHa3WZVKmKvbhNvad7H92gwuM1h5npGVKFIlU1jFRQOHbyNHaryJ4cFm9xorRqSKaKxSI8
      0U7nXnmT5PI0obYRYpYaqc0NGvUGaxUYPgAl6HHZDBVFdNPTplOqKbsHgM/v59RonAcfzTPe
      209ZczMwepzZxQ95tddKyXUSU6ky8WCNnpaNzngPObNKV9jOdNZOe9SNz++hWiwTiMYR3C7s
      jiAexULAbXBvZg2P79h+1v9b0SiluT+/hT0HRm8Er81g8t4ix86cYfLOXbISdEVfxx2Kcizo
      YSnZ2OcjkiSu3l6hasvyzpu/zxmlTEOxMnvnGteuSbz55it7c1l7jKBwE83XjV5/6Aa9s7gF
      GZUjESspxcWFeIhKQWP09Bkmbs/Re0BHJNVy28wtbeGtWuhqc7BRkHlp1HmYG/RF4dANujtP
      9ADPQ9q8w9SIu3OYGnF3HreGKIrPReLUw+S4u/NIBj1smyfZNTXixuI0MwubRDo7sInfLxvD
      Xpjh5EaJ2xMT+GP9OD9/ZMzf/JCKo4vs8iQPllIIWomJ2U0iLmgJLly2/XTQajy49jFNTzdy
      ZpnPbk6Cw86D6ze4Pb1I//AQgvFQwnq2dmiDW5c+YD3boqerHU2uMXnlGq6uAXbmbnPr7gw2
      h4VbNyYJt0cpFGv4fQezEt2q5rl1+y6ReDcr929y5/48ke6B3WXQqekFTp8+jtaosr2zTS6T
      ZHp2EalZZXFpiUS6SL2cZW5xjUoxzezSxj7LfvuLzeWnryPw+PBruZKmUKlTbxZZ3igT74xR
      KddQpAbbOzsU84V9l0GPDndTk03CHV10hH3Iqo13fv/3GOzpwLVXZrjWNkLbGSL2JjXJwGpz
      M9gVpqVBvLuPkMtGoZDDtMD89DLFcuXAZFCHJ0hn1IeiCwyfOMuR7iBN+SkyqFTNcfXWXYIU
      KXuH6DQyXL5+g9z4WTJiD2bxIl5B4+yrb/Czv/1PVJoyvv/xf6Z3f86t3ndE0YLlsaHPZPLW
      LXL5LMmVdcJeH0pxFXfXWUYcm+QqNYTmMu3xjn00xAnYrFbQQTcEYtEI2/UGpa0F/D1jiHtl
      PxYt6KqEZuoIooAgilgtIjKAaCUW9tD093MyVCaf3KaUKrHWOXgg+4JFixXL5+kxNlcW8MTH
      iAesuwdAW9cQP/lXbzI7cZXO4UGWr87S19eDxWon3h6nqe3g0VvML20R64oTcwTwf1fccHtA
      o5Ti7vQqtigYA1Fe/8mfoFaS5IggJ2fZKFgZa/dRENuJhr3Mbzdw7etcU+LyjXmKtjSevhAr
      W2mOjr9EXa4w0r6H53c6OnGrl1G8PZj1LEUTJmZXMVMqg36NzVyT84MBtLrG6Olxrt+YpuuA
      TtCqZhNMz63iq4CtnKaSyGB59QeHuUFfFA7doLvzhBnuUfq87zOHqRF35zA14u48EQDPQ+LU
      w+S4u/PIBfpoPeCQh3z5mFQe5vaZn1/GYrViCFbs36NN8XtxTKrSqnL/3hTeSDcOKxRTG1y7
      OQGuAMmlB8ytJhCNJlNLO0RcAk3BidO2n/KxzuKda7RccfTyNjcmJhHcIfx2hcs3Zunt7UTX
      9uCYVEzu3bjEVlEl3tGGJlW4ee0G2bqOXNhk8sEiLpeVycl7hGMRSuU6Ps/B7EdoVfNcv3ad
      um6jllplamaJaFfvLjKoafDxr36Fw+8juXiPifuLFKtNpmceUKtW2Els0pAV0ttbZIvfr5Ne
      vikWm5NY0PX48Gt/W4y+rnYqpTKDY6fo9FlYz1TQ5AbbqRTNWm2fZVCB3niIimTgCbVz9uQR
      GvUaszNLCE83pX97pCSq5wg+ytRlE9Hq4sy5c5hKk1hnH1GPlWQ6hWCD+Zll6k2Jg5pyWp0+
      zp0/h9qs0jkwxminl0pzNzu0qVHT7Az19hDw2FDkKpc+vcXGxho3L35CKbfOp5PzXL/0Cf/H
      //ezA6jK/mOx2rH/2sKWaZpYbE4MTWF7c4VA3zFeGz9GPOimWG2wujS7v0ckIeJyOoCHEnay
      YjIYsXBvbpWF6Rkqe2IF/ZxfU1hNXWVlfZPjx48BJk6HDW+kj76OKB6zwvbKLBu1vSvKb8OQ
      66xu5zh2bIzMzgZCaJDu4G4yqGhjsN3Be7/6gJjXQVfvMNu1NbDYsFotDA70sDa5TcV0Ewl9
      v1aJvymNUpqpmYcy6LH+CIJUYW0jQf+RETZn5yBT5sIrrxKMtNMebrCYrOPY11GjxNVbCxSs
      WQiJ7JTqCLaT/NVf/gWb6xsEnFaUvQgCZyfW+iXqnm7MZo5iq8HW1g5VGaK2JtvFJqeH/Zh1
      lfb2KNlbM7QfkAhVymdJJxKoho6SSdAw0zjcrx+6QV8UDt2gu/NEDyB+z3w/uyGK4nNRj2eN
      xWLBNM3DtvkNnnCDPg9Ph0aj8VzU41ljGA/3BR+2zZPsaoYrZHZoqSbNapFCpfH4nUalupea
      wncWVa5z787E42xvcjXLh+9/SKbSYGbyOldu3CW1tczliQc0S1nKrf1uJYPle9fZLivUi0k+
      /ugTcpUmM5NXuXjjLrqxV8qLyf1bl5icXsEEdLXFg1s3qaiwszLDR59cJpNNceniZ9RaTdK5
      4h6V46tRWlXuTE7SUhRuXfmUX/z8n9kpy7sHwKfv/T/cur/F3NX3eO/mAtVSgWK5xr2PPyWv
      KWQzGZqSRKMlITebSFKDTLZALrFGqlgnn83QaD0/i1GCYCHgtjxWdmYX13jz7ddYn58iXwOf
      WWN2q4Am1djcSaHJrX13x7YHnRSbBqsrCS68dJK19S36jpzCZ1VRtT3KCiEnadoGcChZaooJ
      gkjYZaGmQiKVp7fNydLqGqIdpu8tIqnGgcmggmDF6xKRDTsvv/kOfZ2dhH323c1wttAw1FaQ
      BAduq8Fn7/8TVxYqvHtqkFYhwc/+w/9N28jreEQVn91ENKrktDBHw1aEuMbN9/4BPTLOv/+r
      n+53PfcEq92F2/mF288QRGw2O6KuIog2morK6NHj5LfWyRVLbGcmee2td/ZxX7CI3+cFGUxB
      xG6zIWCwvbFGz9BRnHYLzb3olAwdi82JVbdgGiYWuwOP20EDsFlFao0moa4xxHoGpVJk7u42
      5lv/f3tn1uTWnd7n52DfutEAuhu9N3vh2lxELdTqGc3YY8/EGmeS2OWqlCvJRW7yNVKVzE0u
      kqqkUpWKnYqdlF0ax/ZYGokSRyJFNpdusvd9BRpAY9/3s+eiRXEogxrZFogWieeGrL4AzjnA
      OTjn/f/e93mHsRb0BZttDmyWo6+7VMmi2jzYjcKTHHYClkoYg3cCQSoTKegM9XSiAtH9PfpO
      nsVksHPKXafiGmZ8ZJTA0gOyVYV8IoLFO4LD+Oxk7Cq5GPcXNllcWiYWj3H2RB9Xr17DP3kJ
      GyJV1YzP48Hn7+PUiB+jxYnlKZdBP7u9zObiDH6/h+vXZ+jv7yGwu8P8/BK1Zv0C2IfQMwtk
      ZddRGTST4O7SJosP5uhwWEmVJHxuNx63h4mpc+hY6G5RGbSYDLOwvMniyjrFfIETk0e+twZp
      UP3rzZHRZW5fv8HJK2/T+4TgeyvGYLfToI1pp0Eb89hs0IeVgm8z7dmgjWnPBm3MY2lQUWww
      4/BbhizLz8R+fNM8TMi21wEep+HREGtlUunsP6h/U5ZEpCfec+rUqrW/92u2Gk2uMXP7M0KJ
      AgCVbIwbn90iVxHZWX7AvblV0rEg9xY3qRczzc3e/BqysQCfTc9Qrkusz99jZmmziX24OpsL
      d1neDqEDmiKxubhwVAXaWeHTm3fIZtPcuTNDVRRJZVo3D1aRqqyuLCMqOpG9dW5Mz1BX9AYn
      gKbw8QcfEg7sk6uIqKqKJCvIssTu7i6BhbtsRfPUa1UqlSqqqnzxryiKBFZm2YzlqVYqSIqK
      LIlUq1U0TaNWzfPR1Zst2P1/HNHQPgOTF4ke7ACwvrXHhQun2Fx5QLwAnVqexUAaRSwSjiYw
      6WrLhgTs7Ec4M9rNxl6QgfFzmOUicrP6nKQkeb0foRSlIutouopDUCgq4O0/wajbyMbODiar
      wMrSFqpgalkZVFVUTAaVuqrj9A5wptdIrKA0KIMKBsZG+tgKx9CkChXBSDhaoLfThiRW8Ch5
      UgULepfIh9ObTA1bmJ5Z5dW33iRaNPLisB1qOf70v/8FDL/CIEl0DHQODJMtFClWv31dZ4oO
      HXYHD9siLl04x8L6JuVSHYdNJ1OROXPmFLFQkEQqReAwyVvffRtHC2ZQTZ09ycrKGmpHP4lo
      kIGxM1hNQnNmg6p1LPYObGoGVdUx2ex0dtipAMhVMmWZvhOnKKfCIOeYm/6Ui9//McMt6Au2
      Ojpw2syAgVohSdU6xKTP3LgfQNINWNQ8tp4+lua26HMoGLx+AE5MjCPoOlsry0ycncJocfH2
      j37MeI+dcy+8RJfDTCkRwjlyAadJwWJ3M3X6BFJNQkf4ojP/28RgXx8Ldz/B0tlPPBGnWiqQ
      yxSYeullDJpEXRVwe3z0+PsYH+rBbHHwVPthfoVyMUexrnNyrIedjT1W1jaaNx7dNowYnyVe
      taDX0uSySe4tbbI0v0Bgb4d8uYLN7qTX62Ps9EkwWHFbm7Mpv45SKsLC8iZLqytsb2wT2Fkn
      VRIbpEF1HUmqo2gCdpsVSZQwGgUwmNA1FZPRQE2UENDQNAGbzUK9LmKxWBAMRgQ0dAQkUcRo
      MmMQwGAQ0BGQxTqC0YLN2rwVonYatDHtNGhjHjsBnoXqSfsEaMzDz9ZqbdEl+JjyWBr0WagR
      V6vVZ2I/vmkePny2j83jNHxMU2QJUVKxO2xPniqm68iKitn87E8b1lSJna0thk9ewGEGVSxy
      c3qeF994ndDqA0qGLs4Nd7AVq3F5vJeauQO3rTXHJZ84YHE7zssvnOTe9AyixcVvN0uTis72
      0iySa4ipiUFQZRZm7+Edv0AhuEQ0U+bk+UskI1FefOUylVIFn7dFntSHKDWmp29Tqilc+e4P
      GpdBP/jrv+LBzCz5+ldUbOQ87394u4lbenyQxToo1S/i0CtLq7z46iXWV9YZO3sZWyXKzHYc
      pV4gGI3jfKqDcR9nbSvI5TMDbIXz/NaPfkRfpxVDswoPUpJk3YOcDlCRdQrxXcz+0xzubnDx
      ync5Oz5EORvDajewML8OliZOqfu6mOy89fZvMtjrxWkzNi6DDvi9BHNl9u5/xrLRTCCcx+8y
      kQ2tshgU+YPf/w7BgxhVyckf/+efshaFN78zgaVSwzzxJj98ebIFe9Y8rI5Oujoe3TooRgud
      TjdGFHKHuxR1GxcmB9ndCRA7DLOxG+IHv/M7LSmDnj99gpmZecx9JynHtrH3ncLYrEyWUsXW
      4cOh5pEVHU2RcHR2UUsbAIlkSePFi+e4P7eAjSK/fO//8eaP/5AhV2srgWIli2bzYTM0WgnW
      dSwdXTikFCafn/kHm/Q5ZAzeXgwOH7/3zg9AlvB292Axgtndx0/e+T4mk53XX38ZRX52+gAe
      UsnFuHd/hfnFozToZJ+bv33vfbp6+tmPJqjVaji7/AwMDDA21IvN7sTUos+4UqkgY+bcqXEi
      eZUzQ00sCNhHqIRvc1gwQjWF0T3E7r2raFYPxWiEoVNnMVmdjAz0Mzo5gdXqxHEMZshm4ilO
      TI4BjdKguk65mKemCPi8nZQKZWxWI5rRiiBXKVRkfJ4Ocvk8NnsHRiRKNZUOlw2r2YSkCtib
      WOb8dbTToI1pp0Eb81ga9FmYk5vNZvF6va3ejGNHOw3amMfSoM/CWBRZlp+J/fimebgO0Ioe
      jeNMOxv7ddAUFmfvkiwcXUWVao6bt+5SkzV2Vh9w/eY9sukoC+sBlGqRoti6NGi1kOTW9D0q
      ksLG4gx7h5mmvl9wc4GdcAoAXdc42NmiqkAssMlndx9Qq5Z4MLeErKrkC60bpalrCns720gq
      pA/3uDWziKo3PAE0fvan/4OP33uXazO7X/z1o/fe51eDzMGDYNM3+rgQDW7ROTjB7saR3Xtu
      cY1XXjrL0vI6ZcnA27/xKgcHUcRqhmAk1jwl0ddgY22bsycHWV64TZl+cpFtRKVJt7ZymmjR
      QTm6TUXRUaQKUi5LTgZX9yCTXQIzC0uYzCqLCxsohtbFMGqlApVqiZqioRicnPYpBNJPEGUD
      SLJKt03hj//bf6Eo+Jgc7mJ/YZqdWBZB6MUqZAiEwlwZ72Itq7FwZwNMCTW9lgAAFYFJREFU
      FTosJn7wz/6IHte3Z6L0r0PSoKuzi6wlBMD5MxPcnZlDxkaPReLqh1eZunieg4Mw8XiU7WCU
      733/e0/ZEnNEZ4eVhaV1Bk+eR0zusxFOM3VZoyk3PnIZu7uXDrWCrOg4bR30dHccpUHrBbYP
      84ydmyIW3MNurHDr41/w2o9+Qr/j6d+GOdw+PK4YYMCo10jpPZzpftJUCLuLU6dPsLEbRLf7
      eOP8BVKJMJlMgeGJIQ7WK8hmGWOlwG6wjOLyMzB+HlUMMNplRJRV4Nk5AfzdPm5OX8M3cpZ4
      Io5NqyPV65y+dJHU/jpGkwVPzwBSXcKsltiKlmlV6FXTNHSO2lslUWRwaAyr2YDUjJiXfZBi
      8CNyzj58fWlyVbg3t4LSLzNmqyDLIprRwehgHxargVCs0LKUbCkV4cH8Cp68jhTZQXB20dPX
      12g2qE42GSNfFukfGqGeT1JWjLhdNuRilL/64DpnX/khFyd8GDSJYk3B3eVGVQTQJczGo1HU
      ZmNrvgHtMFxj2mnQxrSH4z4ntNOgjXksDfosLJI0Q5T9LNE+No/TLoN+HXSF9aV5MqWjX0il
      VmBmdp66ohHeXWP7IE6tkGRtJ4xaK1MWW9f2Wc0nebCwiqQorC/eZysYa2p/cmRvjUD0qNSq
      6ypbq4sk8lWS4V1m5lao1yqsrKwjqyrFUovsGI+hEdxaYX7taJ5pw4fgP3/3z7lycpCw7OOF
      iW7C8Swnhr3cnd3khUuXsJlVbB0eLMbn4/yJBbbQHR5WlhZ5+63X2FxbpV6tcXv6JlJNQq5u
      ctjnJ1+SMJSdCF0jnB7rb07l5dewsb5KoVRnbsOCU9GIhwOcGOprzpvJaXZjMlZthd6e7yKn
      dynRSXRpgdPDPrRSiqW1ColkFl2VKcpm3nj5bPPE3V8HXUORNWrJfZJjk41/AWRJRq1mkM0d
      JIJb3Lj6PrObhyiqzvTN69y7O0OTCmvHElnVcLu9WD9PuJ0+f5mJsWGM5k5ev3KZbreNU1Mv
      cm7IR6Yqk4nuUnmqiqRHTF16hbHhPgRNY3B0DKOuNi/ioolYHR5cTguqDroi43R7sVmMdPp6
      6fU6cXSP89K5SfRqBrUUZb/VWjldoHtgELfDTF1WGp8ATqcT//AYiYNdotEkAyMjWIwG7DYn
      470GlI5RbC2q8rSCwZExAmuz9A5PEovHqBZSrG0f8sLlcwR31jH7TzHgttLh83NurB/M7pas
      AQAU0ofsJ6qcm+hnfWUJo72reRU56wAOOYBk86OXk5i8Y+T25vAOjHEY3GEvWWWw243Z5uLU
      pRdQNHPLTPFfoKvsba2TFK30Oo1/f1P8nRvXOP/a9+hsUcfTr6OdBm1MOw3amMfSoM+CKb49
      G7Qx7TRoY9qm+OeEtim+MX/HFK9rKrubqxzGEmi6EaPFgvlL1R5FrFAStS+EA18ml81itdtb
      8pjcDFO8Ui8yfesmorEDn9tJIRli+u59DHYPgbUZNvfjGLXKkSneIVDlaZviH5EMbXPvwTJ2
      t4/dlRkimToD/m5UtfmmeFWqsDzzAJt/GJtRZ+b2TWx2GzOz8y03xYuVPAtLK3h7+9ldnmVp
      M4B/qJEpXhDwOiVWtvOkt1dY2NghX66RS8aIxNPEdjcJBTdZ3D0kGY0QT+cpFnIchg6oySrp
      +CFXP/qEZ+kaHI2EOXXxdfLJozBcPJZkcGiAbCZFoSxy+swpCvnPTfHRVpjiH5FMZfH3eEgk
      9jE6TmDRSojNEmR82RRvtNDvcVBRIXWwRb6ukk6njoUp3mix4+20ImkCgyMn8JgViqL2d9cB
      BMGAz+ej023DZk6RqmS4cTNNlxbnk/kI77xxHudgF2gSs9N3mDusc2nMwym/i6W9EGJdRW+a
      lO14oAkCBsGALNYYG58gtPGAwanXMET3yRYrpPJruD1vPUVF0iN0BEwGqEgy9qdxtyPAw7Pd
      YDRjtZpQgHszM+QqIj3DpxntM1FOJ4nspjB5+1uiSDKZrVhMBtB1dASsdgtSXX7CSrBgwGwy
      YjBZGR4dxYZMLF9nuM+HYDJhMBoR5CpZ0Yjf14HZ5mJsdAiD2UqtkKYmP1urBANDw2wv38Pj
      HyWeiOPv8REJR/D19JBLJ5DMXvweF13dfk6N+DFYXE/ZFP+Ibm8nh4ksAwOTqNUgstGNtVn9
      CbYBTOUtyoIHvZoil00yu7bH6sIC7/zBv+KHP/whp0f7cDo7mZiaQsPcMlN8KRVhZX2PlbU1
      gvu7JIsqHpe5HYZ7XminQRvTNsU/J7RN8Y1pm+KfE9qm+MY0vBxUi1kCB4coz/jD7NdFFcvc
      un6N3chR6rGcOeTjj68RTuaOiSn+EenIHteufUoim+feZ7/k9txqUxVJTzLFZ+Ihljf3qJfS
      x8sUr0Boe4lPb91HadgUr8l88P5VqoUMhXKVdCpFuSZRKeZIZfMUE/uEkgVy2Qy5QrkFu/L0
      OQwFGJu6QipyNCQgsB9i8tQ40dDesTHFPyQciTE63Es8nefk2fNIpQzNqoJ+lSne6uxCkysU
      MvHjZYpX6kQzOhcGDOwlxUazQU2cPzvG4vom9WKSUNGIKFYYtJT5m2ub/Jt//TpFOcfWQRxN
      LPNv/+gPW7A7TxdNB6vZjPD55cJit5DP5ECTEQzaMTDFP8JkNlIsFDG6XdQrBTBZ+Xri538A
      X2GKd3V0YhCgZ3CSTHnzGJniNQxGExarAVXWGs0GVckWiuj1ApmySCYZx2Q2EYwWOD3Qw8OU
      b+/QGB6X5anuRKsYHBxiZfY6Hb4RYvEYns4Okqk0Hb6BY2KKf4Tb5SCVK+Ky6mztBFF1Q/Om
      Q3+FKX57aYbNjU2C6doxM8UH6bKWubtRZGLQ3ng26MM/pALrlOzDjPd1PPGFj9uksXYatDHt
      NGhjHgvDfdkU7xs9gw++VQb5ZyXV+k3z8DNsH5vHaZvinxPapvjGNDwamiKSTKaQmqXX/Jbx
      ZVN8rZDk+qfXiecqrM3f4frNe8Sjx8MUn0+EuHHjFtlync3FGVa2Q017Bv4qU3wqssf1G9Ok
      M6ljZoqHTCzAbjgBNBRkaNy4+gsCwV2uXr/7uem9Tjm5x+0HOyiK/LkZXkWSRGTl2f9J/bIp
      fndrj7MXzhAKBKlIAq9deZF47HiY4gOBMJNjA+zvr1OlG6UYa96F7CtM8Wanl4snvKxvHzdT
      PBhNJmqVo2eiBieAQlG28eqV11HzceamP+Q//vSnLG3ts7y8zsHOMv/pp/+ez2Ye8Cf/510S
      +crT3penjqKD41dM8U63i+B2AKPFSKfdzJ2bn+AdHMEqQCKV4vadu7RqLczusBAKHyIYwWpx
      YLaYadoj3ENTvNV8ZIo3H5niAdRanoTi4o2XLmM1GrFpR6b4SIu+Lo9M8dDl8X4R1my4DuCx
      iXz6yVVUVx+R2CYvnx+l0z+KM7jOzl6AK1cuI4kiI6fOM9TdgqLuU2awr4/Pbn9C7/gl4ok4
      douZUrVMf7efYr6CbnLR092NJtaxaGW2IuWWzcC0mU2Uq3V6R0+T2l9CtfdhNQvNmQ1qG0aM
      f0TFOURP7Wg26MzSJlpMxislKClGOru89Hp9ODv6iaRXWm6K78ob8KopNiMFuv3+xmlQXVOo
      VooEIzlOjg+iamCxWpDqdUxmE7KsYraYAQGz6Xi12LXToI1pp0Eb0zbFPye0Z4M2pm2Kf05o
      m+Ib0/BOtdFUBV1Tv7LiI8tyE8ttrUVXRWZvf8Zh+mi2pVTO8MkvPyVVrJMM73Dz9jzZZIiZ
      pS2kUq6lZdBS+pBPr9+kUJWI7K2QKDZzRJ3O9tIMq3uH6ICuyszfvUUwkSd9uMf1m/coFnPc
      uTNLXZbJZFtXBn2EzsHWEtP3V56kSIK/ePcv/s7faqktPr2798SXvfbe+8jP6AlwGNimZ+xo
      ChzAyuIaL712ma3VRdb3srxx5SJ7weNhit/c2OXC2RPs7B9gMdZIpJs4nuArTPGbO2HODTiY
      XVw+XqZ4rUYgLjJoyBGtPmE4LsDCRz9nQ++kM7fLrYUA//Rf/C7g48/+63/gQBrglWETeV3A
      2z1CJBShWnuW5kA8jqxBp6uT5OdHy9fr4f70DN6+LgLhKB98EOXcxReJRsItN8V3dtpYWFxj
      4PQL9PYYiSea+GZfYYq3mQQWt0OcOP8S2cje8THFawJmvcR2QuTSafWrxqNbeP3N1zFZ7Pzm
      j/4JA11WkFOUhSH6nCYEq4tXX3sRpVDA5OzCZX92k6H9/l5mb32EyeknFo9hREfRdQRrL5Oj
      Hiw2F919g8fCFG9AQNF0BE3i1s0HrCzOUGtWQ8BXmOIBVB2sdtfxMsULBtA0VB3MBqHxbNBy
      pYzFYMRgtaHLNbL5Ml1dbjRdoFbOY7Q4sJgMmC1mFEWnVs6D2U5XZwetDoe206CNaadBG9M2
      xT8ntGeDNqZtin9OaJviG9POxn4dvmSKV8Uin924Sb4mE9pZYX5tj0rumJniRYnFmVus7ISb
      Gsx73BSvsjo3QzR71Cse2NumWjkepvjH0BS2to/6uxuG4T7865/x8dVrZBskuqRsiOVgmoXp
      D4jkHlV+Zm+8x//+y6uo1Qx/9uc/I/e5IiV8EOTbnqr+sil+eW6ZS69cYH3xPgcJhY56jFtr
      x8sUv7l7wOTUSxRiu0hPyRRfjO9B1yjBrTXK6TDzKxsEAnvHwhT/q8SDO8xv7QMNy6AGvJ5O
      0qKJTGCZG9sh7J5eXJqJbkTKriK3VmVeHpDZu/4BvuGTfO+VKVJFHZ+xQjCwQzxf5drP38U7
      MYWQjRMP7ZAUrYz7TPzi6g2+/y//HS+Ofntm+H/ZFO/r7WLu9n28A4NUUnGCVZ2pqVGCweNj
      ih86fYl4YA3JeNSc3pTQ+pdM8bos4uzyIeYj3Lk7gxkd7D5qiVDLTfEPUcUis8vbIInkK2Kj
      XwAdj38IhxhjLZimp38AqVqmlE9ycBhnYHSCfr8fq83O5ZdeQq4V0WpRAgdJ8pkUBc3J1IWL
      uF0dvHHlBRRZplIRGRoe4iAQ5tzZUbL5agt2/R+Ov9vH/elrYPUST8TRVRVNAE3TUVUNTddw
      efvp9/sZ9nswmc0tN8XL1TzhRIF6vQLNugmyD1IM3iaU1dCraYSOfnZmPkYydvDy67/B8OAA
      Hm83o4N9DI0OYTSaW5aSfYhgcvDGG68xONCPzWxskAbVdXLpOCXJwFCfl+hhlK7efqRihrpi
      pLffRyISw+XuwGZzIMkyTjNUVDN2g0xd1tEEA4Iq4+zspFIsYrOaiCYydHU4KNdE3J4eXPbm
      FITbYbjGtNOgjWkPx31OaKdBG9M2xT9ntI/N47TLoF+HL5niNbHEzL1ZinWFVGSXzUD02Jji
      g1vLTE9PcxDLsLUyx+ziWlOrcI+b4jUOA/vUVCjn4sw+WKJaLR8LU7yuqxwE9pFVqBbSRFM5
      oOEJoLPw2Yf8zXsfcJh98sPq+7/4+Rf/D878nP/57i94971P+apjnQksc2c5DMAvr/6cWPiQ
      3LcgRPfQFL+2sgzA0twiI+ODLM/PshHIUY9tc2slQDp5SCAUbp6X92vQPzrJCX8nlWqNbF1n
      6tR48x7IlQy7UYnE/ipVRUcWy+QjITIiFEsigx0Kdx7MU6kVWFrcoKq2LghUK2RJpRNUZMhl
      k8QTR4N6v5DkfYEmc3N2g9//57+Hmg/zp//rTxANFt77y3fZz8iEV28TK+oc7i+xvb6BZ+w8
      cmwD0XOKei5JObrOX/7NR1gNMn97Y46DgyjZRBRBLnAQTbOyusFuOIFFq6HLMoVKnls37+Hw
      9uHp+Mcv0zfjFiidTtDtH6OYjzM4MIhULbC6tk1nlxNLxyDDXTKq1UutmKdSyrO5G2JkbIxW
      LAeYjEZ298OcOT3BweYiG8Ek4+Mn0D6X5JnN3+CXsBYno/TjsZSxuvtx2W2Y5SJyhx+3UCWU
      17l0ZoxIKIpZqLKyuIRv/Cwu89O/QJhtTuRqDpvbT6/HTipXxd/jadQUb8RpFNk7CCFU8zj7
      ztJvE1npGuLkaC/BtTCXxwZJxwY547dSqiqYgXxsH5vbTzS2wLlLl+kwq3T1jaLnwpT0CmGt
      goqJgZFxipkoOEAS61TlGj0jJ/F1Ht+MSo/Hw40bH+AdPkssHkOWRXTBgGLoQD5cYkax8Vu/
      8wJBQcGsFtmMtG5qdi2fxNkzjFGQQLeAQPN0VY4hMtvvk3L14etPka3C9MwcyqCMu7RP3XSU
      kh0bGcBi1jn4fLx8Kygmw9ybmcOXM9CrxpnbTdPt72ucBlWlChub+3h9XSSSaYbHJikkQpg7
      ++gw1kmVdbxuGw6zAWxdGOpZVFs31WwMm81CMByn11rhg7US73zvdQy1NNmajr+7k8PQId1D
      Y5jUGkajCbPdTjS4h7v/BN2d//grdzsN2ph2GrQxDU+AbzPtE6Ax7ROgMV/cAj0r6wCSJH3x
      Ybd5xLPw2TaDdhn066CrBHe3KVSPKlaZeIjl5WXC8QzJwwDhRBaxnCMQSaKKVWpy68qgsdAe
      y8vLxLMl0GWisVRT3y95GCCWPkp56rpGeH+HXLlOMRNneXmVQqnM3n4QRdOoHJMLU/IwyMrq
      JqLaMAyn8f7P/i+CxUnfqVd46ezw3+vF5UKMW9tZvv/K1De0ua0nGdolX9eIrKzy1qsvYne5
      8ZbzHEYC1CQzXYZD9rCgqxrUPPSdmGzZtrrcHsrFHJlClVpsm6VojZ/09zTnzZQ8G7tpLMZD
      ul5/EzkTJJqXkeIruC0K3sEJiskA8WSJSrlOz9AIzpbfgekEQmFOTJzBKDypKd7m5nff+RE/
      +6u/Jr99l0gJzg56Sasizo5+Ehs7iCYFl83Ipdd+g7mbN+gcPUc1vMCJyXPEgofcMRh446Wz
      T3nnmkNVURgdPcX+7goADpebYEXhwoULbC3MEolGGDjzMsVMgmg8xm4kxXe+81ZLZNkdnV3s
      SwKTJ4zMzsnYtHrzZIdiDvfAKTqUfURJR69X8I+dIxdcxCoIrC4+YOLcBVQpg2zMcP/mLm/8
      8HfptrWyKUfHqEoszM/z6tu/3fgWSFcVUoe7WJwe9kMZJsaHEcs1Lr15hVIsgaNrCJ/bzbmT
      /exvraI4fMQODzDYu5iaGKKYTSELhpZNSP6m8XV2cvfmR4i6g3giDmoFUXBhtxoR0DG4Bjh/
      ZoK+nh78HieyLNMqwWatkMTqGcBiMOHzOCiVKijNqnM4+kluXmc3VkWrptEc3axPf0hRtoBg
      QNA0DDY34yMDDPT6UFUZudW9IZqCwWgBRUbW9EZhOJ3QzjqJMrxw8SzZ6D6RrMhoXzeu7i4K
      qQJgQhBkHHYTsm4guH9IT383ZgF6vG7SJRGlXqN/oL95Negn0A7DNaadBm3M/wflSJ2WCLEU
      kAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA type' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Seasonality of Traffic by Month' width='192'>
      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
      9ERXkpkHk/x/5CdCQgRonJsAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 15' width='192'>
      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
    </thumbnail>
    <thumbnail height='79' name='Sheet 16' width='192'>
      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
      pDQGgJT2N6Vk4A31ajxQAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 20' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 23' width='192'>
      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
      ovkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Stat' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='X-SIA Type of visit' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAe90lEQVR4nO3dWWwcd57Y8W9VdfV9d7N53xQpifQhybMe2XNtdjI7BoIJ8pALCSZ7AHkI
      kACDJJsAu0gQIC8B8hIgwD4kASaDDYLFZIOd2Z3FBphMPN6xd22PZcvWQUkkxZt9sO+rquvK
      g0RalEhZ3SLFo/+fF5LNqn//qqt+Xcf/V/+SHMdxEIQuJR93AIJwnEQCCF1NJMBJ5NhYlt3e
      LI6DrjXR9NYRBXU2uY47AGEf2hbvXKsxOeCmd2iYzMYagWCApuGw+NnHTM7NgeTB0moEI2Fq
      1QZDw4O8+2d/jDU0y+sXJpBsk1KpQCjeT7OcJZQYIOhTj3vJThyRACdUbnker2eEd//ibaau
      fA1z9TM+uLPO7EACl93g2l+9S2TsHG//8Ed8/UszBJP9TIyfwxke5aMP3kWR3dRssMu/JF2o
      cOHSVd68Mnvci3XiSOIq0AlkVLh3v0Aus8rQ+CTrq6sE/F7KusN40ocuuXErCsvLK3jCccZS
      IUI9I+j5LYgk+PhnP2Hqylf4+c9+ypff+CqFrRX6xi8w2p887iU7cQ41ARzHQZKkw2pO6ITj
      oOk6Ho8b07JRXWIn/zSHmgCWZaEoymE1JwhHrq2vh8z6MumyzlAiQLZqkgjIpItN5i5Og+Pg
      OA623d7VC0E4Tm0lQCzZQ90ssJVJI6khKi0vw1E3FQPCrgeHQOKUQjhN2kgAh3vzt8EbJRaL
      k9su4VJllopNXhmQkCUJx3HEIZBwqohzAKGriZ5goauJBBC6mkgAoasdSQI4joNpmjiOja7r
      u1eHdE3Ddhx0Xce2bVqGIS6bCsfqSLoJG+Ucv/j4DhdTfq4tLDPz2jcZDrR4//33kdQgtXoF
      JDeGJDMzMcrshZmjCEMQvtCRJEAgmmKwNwsquBQJHBuPx0OkdxSPY3Hp8gVu392gVi6yvHgL
      3XFx+eLkUYQiCE91JIdAlew6d+fvUrNUVHeQkGqwsrZFemONUDLOB+9/xvnZWV5+eY6J4SHi
      sehRhCEIX0j0Awhd7UgOgX5843/zwcp7bc3zr37t3xDyho8iHEE4UFsJkF5fZjld5vLsOH91
      7TajfVFyxSavXHkV9ZEq6O1alqX8QluBWI7V1vSCcBjaSgB/IMjwUIDbN29htDQ0Ukz0u6kb
      DiHFxrKsjgviLNPCNM225xOE59FWMVwum0F3PFx45Qr57RyqZLNZ0pgdkJCkB8f+iqJ0dFOM
      4lJwiZs3hBesjS1OYnLm83tK+/sHAEj2HXZIgvDiiFIIoauJBBC6mkgAoauJBBC6mkgAoauJ
      BBC6mkgAoauJBBC6mkgAoat1MDJci4G4j61cjVQyQLbYZO7iDLIYElQ4hdpKgHgyRd3ME0v0
      UGtaNAz7wchwLYeQSxTDCadPW8Vwd27fBG+Mu3duYckBAl6JpbzGywMSiiiGE06htorh5i59
      6egiEYRjIE6Cha4mEkDoaiIBhK4mEkDoaiIBhK4mEkDoaiIBhK4mEkDoaiIBhK7WfjFcpUV/
      1EumpNMX87BV1Ji7MC2K4YRTqb1iuJ4UNXObpmHTF3CR1WyGI6oohhNOrfaK4W49KIYLui1W
      yy0SUQ9LmaMphivlNrh2Z42ZHhfvzed46623CLgM/ucf/IDXX7/KZwsbDCWDZKoGE0N9XDg/
      3fZ7CkLHxXBjj/08bNGeQVK5IqpPxSevU6rrLN5+m2y5ySc37hMIOZj04LIbLN39DDkQY2a4
      54iiEc6qE1t/nFtb5NbNW0hzL6G6PGDWmbr0DWIDk/gDQT766BPGps9hNfvYun8Lv9d93CEL
      p9CJTYCe4Un+zvCDxybNXriw+3pgbAqAX//2tx+8EAswOCAGKBU6c2IT4I8//SF3c/NtzfMv
      /9rvdXT+IXSvE5sA9wuLfLLx0XGHIZxxoiNM6Gondg9wGLIbyyxulRhNePngk5t87dt/i9zd
      j7i3uMyXvvUd/uSP/hdfnpsgpykM9SU5Nzlx3CELL9iZ3gOkBscI+V3EE0kkyYUiOUg4tEyb
      j//yHTTDRFb9tOol7tz4mLV847hDFl6wM70HWF+4xWc3bmMZBqrXS76Qx+314w/6Of/SZSKh
      MOPTM4Sice7f+RSXcqa/D4R9nOkEGJq6yN+fugjAK6/svJpibGYOgLG+BADDI8MMjwwfQ4TC
      cWsrARrVIrrjwWXVyVZa9Mf8ZMoaY8P9nMSLj390/Q9JVzafeXq/O8Bvvv6PjzAi4aRpbw+g
      ONTyDVrNHNWaiWlphCSbmuHgl21s2wborBjOsrCsz58V3EkbO++/4/rGNRa27zzz/BFvlO++
      9tttv69werWVADJQrzeQcHBJFqZp0bAtYjLIsozjOMiy3FFnlCzLyPKjx+CdtfGoTvrEHm9D
      ONv2TYAf/OAHfPe7333ida1pEgiqJOIj1BomsZCHSsPEpzzY0iRJ6rgn9vF5O+3Qfd6eYNGT
      3F32/brL5XL86Ec/euL1aCLF8FA/fn+IVDKG6vGTiIWPPEhBOCoH7u8XFhb4/ve//wJDEYQX
      b99DoO9973svOg5BOBb77gFkWaJUyPLxJzdo/1qMIJweBxwC2bz/0//DymaR1ouNRxBeqH0P
      gRzbYfbqN1Fs82wXCwldb9/tu5hZ4+23/x/3NnMoLzoiQXiB9k2AeP8I/fEQHpcLe78JBOGM
      OKAnWMI2dYrV6ouN5gQytBpVHeRWhWzN5tz4EBKQzWawtDqbhRrDfUkUfxSfCn6f/7hDFtpw
      wCG+Q2Fjm5bR4tGhqmzLwrRsHNuiqenYloneOtunycVikdX1VUzLZnH+UzTDoZJb509/9i7h
      WIJGaZub8/f45MN3WVnP0UEJk3CMDkgAhUtfuUIoGObRwUZKxQ1W17dZWbpHOpdnZWmB+Zu3
      0c/wcVKqtx+XIiNhI7nc2LbNh7/8gFJuC8OxCcQGuDx3jqDHxY1r77BcMI47ZKENBxwCWdxf
      3iAxNIXN51kST6ZoaDXK5TpaoYIn1sNAQkUzHVzK4Q6N6NidVZQ+qpNv48eHZ7w//ykrm0Vc
      VpJQNEmlXODrf/07zF0poJoWUzMT+GWTqYuXcXtD9IUkMcTjKXJgNajq9hAM+PfUZKbXN9ne
      1hgbHSGdrdAb95MtaUy7JSQOd2hEqYPRdh9/707q2h5/VvG5ucucm3tyut5U6pG/3CTikIi/
      1v4bCsfqwJPgeCzEVibH9IWp3Vf7hiboG3rwezT2YBjCWOKoQzxev/Pjf0aulnnm6UdiY/y7
      t/7DEUYkHKYDEsBhe7tIbECMktAydXRTb2P6s31R4Kw5sKPXtu0n7rAShLPmgASQSCYiNHXx
      bSacbQceAhWKNRpmU/QEC2favnuAWrXB8OggwVgU9UVHJAgv0L4J8OnH15iavYTPNhDdOsJZ
      tm8CzM1O894v/oLE6CTisRPCWbZvAnj8Afy+EHqpIG6IEc60fROgpTUolYp4IuIcQDjb9k2A
      UKwHl61T2C7waHVNPrPK6mYBy2jy4UefsLW6xMfXb2KJCkjhlDr4fgDLeKLUOdGborleY3V5
      BcUl07Rlxnr8VI/gOcEnpRiu3WVxHEcUw50iB/YD5O5vEjofxXpkovT6OuvrdcbGeihU0yiO
      xcq2zkv9h/+c4JNSDNfuskiS9EQbwsl1wJqSeenLr7DVVPdcBeobmtothuvrGwBg9GjjE4Qj
      deCwKBtbOSJ+D9b+EwjCmfDUYrhOjuUF4TTZNwG0RhOPV2U7XxIjwwln2r7nAJZh4AtGUQxZ
      JIBwpu2/B6gX+OTTeZqWLUaGE860ffcAiYExLkwO4vKLMW6Es+3AG2Js28ISd4QJZ9yBA2Ol
      F9aoag1xGVQ40/ZNAMOwePlXZjFteU9HmG1bWJaNbVnoLQPbtmgZottfOL32PQf48P0PsfQG
      iibTAjwPXy/lNyjWvUR8JiuraYJRP82qzoVXX8EjzpaFU2jfBBgfTpHXBxnzKXv2APGeFA29
      hqqqDIyOojUqxHvO9shwohjubNs3AWRPkJRXJdWb3PP6zshwRkSlqdmkkhG2KzozZ3hkOFEM
      d7btu6Ya5QzvvHedofFpvv6Nq7sTPToy3I5kzxFHeEZk1xZZLZpceXmGxVsfc/d+mouzM6xs
      5pnsD2O440T9LmKx2HGH2lX2PwSaeZn1tQyVRkP0BB+S+bt3yW2XGJs6x9TFS9S0a0SCfrTt
      m9zSqxj6EqFQkjffeA1FPKz7hTnw1NXn9+EL+ERP8CF56ZVLhKMRsFvo1W1cwTimaeL3wIVX
      X2cklaS6eYvlkjh/eJEOPFjtHZrgtZGhg/4ttEmWJOYuX8UrmUhqkJmJOFo1T//MqwxF3PTM
      vkqid4C+qDh/eJEO/LTXFm+zspHly1cvHzyR8Eyy1QyO20FGp27r1HfuNHVBKKGSrecBUMIK
      uVoGj+Ih6hfnAi/Cgdt2YT1L+FxcDI14CH7nx/+UlvXsA8y8PHCJf/3Nf3uEEQk7DrwpPtYT
      IlOuiW//E2Rx/jrrBZOvXr3C1vI8y1mNvriPpuOmntvg3OwcLo+fsE8MZ/as9j3HdRybpi3j
      1jVRC3SC3F+4RyQaRQI21jfIZ7bIVrZQ7AarGyt88OFnLK9uHneYp8q+CbA0f4MWMt5wSFwF
      OkHOXXiJ1cXbFKs1NNPCLRm4Q70srWX41q9+g6DHZHll5bjDPFX2PcKZvDDH8tIKsizuCDtJ
      enr7+EpyAL/Hxeuvv0FVs/CrEucGxvB5XFx9I0m1IYYzbseBh/imbZMIBvY8JC+fWaVhBVHM
      EpmSTm/MQ6ao8fJLF1FE382RsW2bleL93b/Ltc//V905t37kKU7FfIaeYC9BT/DFBHiKHXgS
      HPD70HVjzx5gZ2Q4w5EZjnjJmDJjSZ8YGe6x6Z+3GO7xNppGg9/9yT9vq41/8ub3+PLom88V
      Rzc4cA+QSPawuJbfkwDp9XXW1usM9gdZK7dIRT0sb2u8LEaG2zP98xbDPd6GYrffniLLoijv
      GTz1E/L6vHsOgR4dGW7k4WuDI4/PJQinx74Xee5+do3l9XXu3FsWHWHCmbZvAtQrJbLFOl/9
      2tWHVf6CcDbtewg0Oj1HbFBDVjyIizvCWbZvAsR7+oiLG12ELiA6eoWuJhJA6GoiAYSuJhJA
      6GoiAYSu1lFfeSG7Sbas05/wky5qTE+OisulwqnUUQKUSiXqFYOsC2KqTbXlEBAjw+1Of9jF
      cJbVfnuWbT8Zh2Pz7s9/ysD0Fcb7Qrz7zi8IpgapptcI9aTY2sgwN3ueeP8w/i4pI+poMQ3T
      QnYMDEMnXW4xMyShyKIYbmf6k1oMZ9bXWN5okpo0cak+Ls7OUGjI+JMRis06umlw994CPQ2L
      S7NTz7UMp0VHa2pq+jwt08ajKg9+ijOJU0H2JkjFVDLpLVIBkz/5s59x+bUr5AtVHE+Uq5fn
      WN/cZHs7B4gEOJDiUvE9nNMrioVODVnx89Z3vrP792/99m8+/O3l3dcGRiZecFTHq0uO9IT1
      0hoL23famufVwStEfWd7fCKRAF3ixtZ1fvDhf21rnt/71r/fJwEcFm59SnRwmmTER72URVdC
      pJdu0T9xnvTGBhMjA0ieAO5TcJ+sSAChLZXcCvc2Krw5KuM4Np+89zOUkTnKm2U2N/+czbqf
      WqXCzOwc7oD3uMP9QuL0VWiLY9tI2Fy7/in1zAJ31wvcX7oPbjfuyBCXJ5MUKkWuf/rpU9vZ
      Tq9R120c2+Ta++9R0UxK2XUKlSo35xdo1KqYHVwKb5fYAwhtCafGGIxn6Z+YpqW4+Ee/8RtU
      DYmFzz5i+PxLeGWTwYESFTtwYBu22eTae28z8ubfZiJs0Dc4yML8HVobH5EOXKBZLtCqFTk3
      +wrBIx7lTiSA8Mwcx8EBZi//yp7XQypcev2NR14IEgFsx0ZCeqIvZeXuDdKFEq50jrFAkHS+
      Tl/Y4p1rJdTpIBeHJXKlItqNm1z90qUjXSaRAMIz+8OP/4Af3/ijtub5j3/zPzMQ2TvM/vjF
      LzE0fp6mYVOqNdjOrBNLXuLv/sPfomL5kM0G/eUcTqD3MMPfl0gA4YUybRPHscHtwecGX8DH
      r/7aNx78D/ArFrg9eP0PksawWrhktaPqgmfRUQJYhs52qUY87KfSMEjEwocdl3BG/be//H1+
      vvh/25rnv/y9/0HAffA5xfPoKAHuLy0SiPWytraGZZj4wxfwynRcCAf7zNvhBYBO3/+g+dtv
      rfPP4OA4Ooni+ds4jGVxnEOI4zm2qy/SUQK0WjrVlUXkcIIer4Rpg42N4zi7FaHtsm17TzWn
      08EHdRjVoI+30e4Kc/Ztoz07n+MO22p/dCbnsc/T7uCS4hPr5DDWawfr5PE2DlNHCTA+Ps5G
      tkJ/MvjgvgD1EJ4TrDxWDdphG4deDdrmnQ4Sh18NKtvtF1zJj1WDynL7XT6yfBjrRH7uNuTH
      tg0Aq1Hgz9/+JW98/Rs41S3ev3aT2StXURo53KEoG5kKo4MJYtGnl3J0tKZ8wShTwSgA4+Lw
      XzgGucXbSIl+Ql4VV2CUl6frSJLJ9U8+gtg4zXqRZmGT2dfeIOw7eDMXPcHCqeTpm6C3lebG
      8haGZZGu6DRzK2wX8gQSA1wYG6ZpNLkzP//UdsRlUOFUCkci+JKjTA6EMU2L8+cvEvB7GJ2a
      xVI8WIZOTyKKN9r31HZEAginTkUrY1gGvSNxarYGtgaAVq8+mMCsAyCFvOhWiVYd4oHkvm2J
      BBBOnd9/9z9xfePaM0+vKir//R/8cN//iXMAoauJBBC6mkgAoauJBBC6WscJUK1WMfUmhVLl
      MOMRhBeqo6tA9VKO6/OrDCRDmC0TX0gUwz06hyiGe6SFoyiG66iJ/WfqIAEclpaW0eoVtFiE
      mF8VxXCPTX3YxXDWmSqG62C9Pu+24Ry8TjpIAImXLn+JsWoFxTHJlHX6RDHcnukPf2jEs1QM
      134cz71tSE+u1x0dr6lQ6EEVnCiGE04zcRVI6GoiAYSuJhJA6GoiAYSuJhJA6GoiAYSuJhJA
      6GoiAYSuJhJA6God9QTnttZYXc8TTfopFTVeufQyrpP/MBBBeEJHCRAIhkj2u3CsFhO9KrWW
      Q8glnhO8M/1JfE6wbbdfUGdZj6+T52/DdjpowzQx5efYNpwn1+uOjhIgvbVB03IRC/tYKxvM
      DUjIknhO8M70J/E5wZ0Uwz1RhHYIbcidFMO5XM+3bRx2MdzE9Ozu7wODnbQgCCeDOAkWuppI
      AKFrma2GSAChe92+cUMkgNC9bEcSCSB0rwsXpkUCCN3L7Y883+C4pqFT10wioaN5gJkgHJXf
      /cm/YKWw9Hx7gNWVZTZXltHa79wThGPlODa2Yz/nIZCsEgt6MI7m+WWCcOSeKwFS8TB1yUdQ
      PaxwBOHFeq5zgGA0STD6cCQz294tuLrY+xKq7G4vEEndLaaTJIlLA6+R9KfaamPn/XfauDr6
      FaYSM888v0/17RnZTpIkvj75TWp69ZnbiPnje5YD4Ndn/gam/ewFbQPhwT1tyEi8df47zzw/
      QG+wf08bI9GxttuIemN72phOnm+7DZ/Lv6eNub5X8KvtnTPKyHvaeG3odQZCQ888vyIru4WS
      O228OfY1LqTmkJxDfAKxZVkoSvujmB1mG47jYNv2c7Wxk0idFJDtsCwLWZY7Kgx8tI3j/jzP
      Uhv7bRuHehlUURQss0W9qaPp+jMGZbG1lcZ6WOJqGia21aLebKE/rQ3HJpfb3v1d0w3gwbe2
      oiiUCzky28XdUSSfNR54sOHLsozZatLUTXRde+Z5W5qOw97K1FI+S6lSf2Ja0zSeOmbngxVl
      s7W+Rqna2Ps+rdZT46hXSjQ0Y3dlW6aBZTvo2rN/Do/GUalUcIByudz2/DttABRy6T3r5VGO
      bdAyD76i8uiG65g6KysrNFvPvmeVJAm9UWVldW33fQ79GWFarcLNpU3ikQBhn4ole7i/uMD4
      uRniYT8NzURrNpAsDTXUQ1ips7aexRuJEfN7aBTTFDQJ3WoRUN1YeoNwLM7te/eZmxmnojlE
      fTKFzBoLJYXpSpFwIkG+pDM11r8bR7FcpWW08CgOhUoTy9QI+/34vC62Cg0ifg8+t0Sp6RCP
      BJFxqFWL4InQm4gAUKtss7SpEQlIBDwubMXL/aUFhkcniIX9bGVL9PeE2UgXGOyLkS408Fgt
      +qcm2TktapVzZCo68YibzdUl1GASRy/j8gS4u7DI+akptstVkhEfuWKdRNhDw3Yz1Jt42IJO
      odjAqTYxoj4MJYDLrLGRr9OfjGFbJqFomM2tPOfOjbO9uYrt8jH/6XVeev1N/N4HkVTLOXQn
      QCm/TTjso9Wsoyhu1raLTA+laNgqIY9DrVTG3zvM9sYGk9OT7Gxyy3duMnRuhmvX7/L6lVlw
      JBqVPJIvSquSJxCN4fb4sVt1NjN5XIpEPNlLLr3J+Llp1IclzPlCEb1l4pYtKk0Tv2zQkv14
      nCampbGy1eL8+VG205v09qbYzBaZmhjj8Qpou56lbHmJazXurBYZ6E1SbzRoVkrYsotQNE4l
      n2Vw/Bw+9fPvebfHh1bfoF4NsFqqH8FD8iSZ/kSQ5UwFKwCZisHo0DBGo0zBqJLOa0yM9PLx
      J3fpH5KQgwoul0m1XCPm9xCMxbnz6T0SIRU14CWbLlJpuRkdHmDp3j1kX4SGR2V6eBAl6ae4
      fpdcuUI0PrAnjGa1RKFh06yW0SQv0VCAer1Bte6AbVFrmJTKBh4F1uo1VNtEcjnQkncTQJJd
      JIIKmUqTVqNCoeEwNDwMdou1tRLJoIuFzRIDXpWNUpH1hXXGx4f3xGEaBqpbZWsrjWJUqWTK
      xMJ+3C6dkeEBlu7dwVA8WHYYv9tNpVKlabtxehO7w/K29BYet598uYZMHRSFWNhPvVYkv5Um
      khqgXmvSsi0KFQ2JJpPnz5MI+R7ZYiy2t7OYpo1Sr9JqNgiEexkd6idXLCJL0HAg5XexsbnB
      wMDgnmGBo8kUi3cWGeiPk85kMA0Tj2xj1aqsbZXojxfxJoZpFVZxxUZxyRbFzDrNWpWa5hDz
      Sw8/jxbIKnfm53EHIjRdDpnSFn3JCBNDYTQpwsbtz8i0JEwLKpqOZdvIymMHKw7ozSbFYp30
      2iq6rjM1OYzWaCLholHK0WjWqNY0fDH/59tFrUysb4RcdpOQRzr8BPD4AvT6w7i9eRyjSSAZ
      xGNr4ApTLJUZGx0mHA5wbmIIxR8hFFQJ1w3C/gcnzaonwOTEKF6XhOoPodUbxJIpKqUcY5OT
      lOomfak4ilsmqbqww1FC8Thut5darQyOSjDkZ3TqPOOORVPXyRZq9PcmkJHYvH+LhVyLr73+
      Kk6rTrEJKZdJVZfwKQaSN7S7LL5AFH84hTefx9LrRHvD0Krh8sfoicdZyxSYGUnhkkDV6ygT
      KqlUgkePUv2JftwrSyR7UthNN4lAlLDfi2y3WN4qMHNhhrV0kYG+XlyyRKNSwuV4HmlBJRhQ
      CMRiuO0GhhIArYztDpKMx/F6ffiCESSliFtSiIe92O7w7ue5G0c4yXTMg95s4GBTyGaIJWLk
      cxl64mGatpt42I+KxYSisrGyQWR6cnf+ZG8/wUgM1a2i18pUDQW/3ELyRfGoHvzRHsr5LD2D
      43h8IWTZwQp6MR2FoOfzVAqHgjQdD8P9SXIVnaDqEIj78Ek6hYZCKhHFCb+Eur5KoieBVKyg
      7HMDjOxPMDftR9JLaIZEb28Pfq+PVG8KkHHsFqblEAp69synaRrZYp6Bvh6K1ebhngQLwmlz
      6LVAtUoFo1llu9KgWq1iGBqVSuPh/4pU6w0Mw2B16T7Pd+fss2s1q8zP36Wp6ZiW1dHDIpbu
      3mItvb3ntXq93tF9x52qVCoUcln0lk69+eDE3DTb64V0HIvlxbvkilUMw8B8zod5nEqOQ2Zj
      leX19OEfAun1EusVA9XjIDsevH6Lellha30Jy7bxxRJIjSr310tIKtiyn9HB3sMOY49iPoeF
      QmN7m0x9G4sYYVcTNRSjlMkyNnMev/vpH4XbF6JeyrPSKKAGkzQKaWzVSyQYwNBqyL4YA6n4
      kS5HPp/H0YpsV+oEAwGW79+n2dAZGhmknN8mmkxQqWqcmxg5sA3HaJAr1omkYPP+AvfTZS7M
      jFCuGfjkFq5gkv6e2JEux3Ez9QZ13cSWjmAPEA6HKdbqtMol/OEQuq5htOqgBFAVGbCxJJVz
      UxMszt8ily/SarW+8LLe8whFEvjkFulMgVA8QSTk4/bNWxSKZcqFDOX6F793dnOVaE+KzbV1
      FpeWUb1+3LZGtlBBa9TJ5vJHFv/ucigmTW8fhc11MOusLi/Rst2YtW0WVzbIbRfo7x94eiOy
      h6GBHrY2NzFx05dKsrp4l81MlmajRjZfOPLlOG6SrKDpOrquHcE5gGPT1FrIkoNL9WDbJo4j
      Ua9V8PoDuBTlYW+cjKE3MBwF78NvX4/H8wWNd8ZsaRQrDaLhIJIiUas2USQLSfWiN+pEYnFc
      j19leIxhGKiqSrlUwOXx43YpSDwoqtI0DcnlIej3Hkn8O2yzRcuWcSwDj6pQrNQffHayi2aj
      RjAUwe1WkZ/S+eY4NsV8Hn84igw06zXcXg+NZguPC1B9BH1Hsx5Okkatgm7J/H8NPngahuWl
      pgAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
