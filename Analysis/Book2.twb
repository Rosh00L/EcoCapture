<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1211.0901                               -->
<workbook original-version='18.1' source-build='2024.3.2 (20243.24.1211.0901)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <CascadingFiltersHamburgerUI />
    <CustomReferenceLineTooltips />
    <_.fcp.IndividualControlFormatting.true...IndividualControlFormatting />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <ParameterDefaultValues />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
        <calculation class='tableau' formula='20.199999999999999' />
      </column>
      <column caption='Non_Photo_min_perDiff2023' datatype='real' datatype-customized='true' name='[Non_Photo_max_perDiff2018 (copy)_1510957715805691906]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[PerDff]' type='quantitative' value='-19.399999999999999'>
        <calculation class='tableau' formula='-19.399999999999999' />
      </column>
      <column caption='Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Non_Photo_max_perDiff2018 (copy)_1510957715806212099]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='2.6000000000000001'>
        <calculation class='tableau' formula='2.6000000000000001' />
      </column>
      <column caption='Photo_min_perDiff2023' datatype='real' datatype-customized='true' name='[Non_Photo_min_perDiff2023 (copy)_1510957715806420996]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[PerDff]' type='quantitative' value='-2.3999999999999999'>
        <calculation class='tableau' formula='-2.3999999999999999' />
      </column>
      <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
        <calculation class='tableau' formula='2020.' />
      </column>
    </datasource>
    <datasource caption='v_countrydate+ (ecocapture)' inline='true' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='mysql.040164612je0re1ch3d4c10oumvj'>
            <connection class='mysql' dbname='ecocapture' odbc-native-protocol='' one-time-sql='' port='3306' server='localhost' source-charset='' username='root' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatsdiff' table='[v_twocatsdiff]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatstats' table='[v_twocatstats]' type='table' />
          <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
        </relation>
        <cols>
          <map key='[City]' value='[v_photovisit_rating].[City]' />
          <map key='[CountryCount]' value='[v_frqcountry].[CountryCount]' />
          <map key='[InputID (v_photovisit_rating)]' value='[v_photovisit_rating].[InputID]' />
          <map key='[InputID]' value='[v_photographyvsnonall].[InputID]' />
          <map key='[PerDff]' value='[v_twocatsdiff].[PerDff]' />
          <map key='[Percent2018]' value='[v_twocatsdiff].[Percent2018]' />
          <map key='[Percent2023]' value='[v_twocatsdiff].[Percent2023]' />
          <map key='[Photography (v_frqcountry)]' value='[v_frqcountry].[Photography]' />
          <map key='[Photography (v_twocatsdiff)]' value='[v_twocatsdiff].[Photography]' />
          <map key='[Photography (v_twocatstats)]' value='[v_twocatstats].[Photography]' />
          <map key='[Photography]' value='[v_photographyvsnonall].[Photography]' />
          <map key='[TravelMax]' value='[v_twocatstats].[TravelMax]' />
          <map key='[TravelMean]' value='[v_twocatstats].[TravelMean]' />
          <map key='[TravelMin]' value='[v_twocatstats].[TravelMin]' />
          <map key='[Travel_Date]' value='[v_countrydate].[Travel_Date]' />
          <map key='[Travel_Month]' value='[v_countrydate].[Travel_Month]' />
          <map key='[Travel_Year (v_frqcountry)]' value='[v_frqcountry].[Travel_Year]' />
          <map key='[Travel_Year (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Travel_Year]' />
          <map key='[Travel_Year (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_Year]' />
          <map key='[Travel_Year (v_twocatstats)]' value='[v_twocatstats].[Travel_Year]' />
          <map key='[Travel_Year]' value='[v_countrydate].[Travel_Year]' />
          <map key='[Travel_month (v_photovisit_rating)]' value='[v_photovisit_rating].[Travel_month]' />
          <map key='[Travel_month]' value='[v_photographyvsnonall].[Travel_month]' />
          <map key='[Traveller_Country (v_frqcountry)]' value='[v_frqcountry].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_Country]' />
          <map key='[Traveller_Country (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_Country]' />
          <map key='[Traveller_Country]' value='[v_countrydate].[Traveller_Country]' />
          <map key='[Traveller_ID (v_photographyvsnonall)]' value='[v_photographyvsnonall].[Traveller_ID]' />
          <map key='[Traveller_ID (v_photovisit_rating)]' value='[v_photovisit_rating].[Traveller_ID]' />
          <map key='[Traveller_ID]' value='[v_countrydate].[Traveller_ID]' />
          <map key='[_allcount]' value='[v_twocatsdiff].[_allcount]' />
          <map key='[activity]' value='[v_photovisit_rating].[activity]' />
          <map key='[inputID]' value='[v_countrydate].[inputID]' />
          <map key='[location_Type (v_photographyvsnonall)]' value='[v_photographyvsnonall].[location_Type]' />
          <map key='[location_Type]' value='[v_photovisit_rating].[location_Type]' />
          <map key='[month (v_photographyvsnonall)]' value='[v_photographyvsnonall].[month]' />
          <map key='[month (v_photovisit_rating)]' value='[v_photovisit_rating].[month]' />
          <map key='[month]' value='[v_countrydate].[month]' />
          <map key='[rating (v_photographyvsnonall)]' value='[v_photographyvsnonall].[rating]' />
          <map key='[rating]' value='[v_photovisit_rating].[rating]' />
          <map key='[sentiment_comments (v_frqcountry)]' value='[v_frqcountry].[sentiment_comments]' />
          <map key='[sentiment_comments (v_photographyvsnonall)]' value='[v_photographyvsnonall].[sentiment_comments]' />
          <map key='[sentiment_comments]' value='[v_photovisit_rating].[sentiment_comments]' />
          <map key='[tot2018]' value='[v_twocatsdiff].[tot2018]' />
          <map key='[tot2023]' value='[v_twocatsdiff].[tot2023]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>inputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[inputID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>inputID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Date</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Travel_Date]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Date</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>Travel_Month</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[v_countrydate]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_countrydate_98771871190540D39E6CEF22D122B18C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_photographyvsnonall)]</local-name>
            <parent-name>[v_photographyvsnonall]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_frqcountry)]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CountryCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CountryCount]</local-name>
            <parent-name>[v_frqcountry]</parent-name>
            <remote-alias>CountryCount</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_twocatsdiff)]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tot2018</remote-name>
            <remote-type>20</remote-type>
            <local-name>[tot2018]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>tot2018</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tot2023</remote-name>
            <remote-type>20</remote-type>
            <local-name>[tot2023]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>tot2023</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_allcount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[_allcount]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>_allcount</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Percent2018</remote-name>
            <remote-type>131</remote-type>
            <local-name>[Percent2018]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Percent2018</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>5</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Percent2023</remote-name>
            <remote-type>131</remote-type>
            <local-name>[Percent2023]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>Percent2023</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>5</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PerDff</remote-name>
            <remote-type>131</remote-type>
            <local-name>[PerDff]</local-name>
            <parent-name>[v_twocatsdiff]</parent-name>
            <remote-alias>PerDff</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>6</precision>
            <scale>1</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Photography</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Photography (v_twocatstats)]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>Photography</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>15</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_twocatstats)]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMean</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMean]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMean</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMax</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMax]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMax</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TravelMin</remote-name>
            <remote-type>131</remote-type>
            <local-name>[TravelMin]</local-name>
            <parent-name>[v_twocatstats]</parent-name>
            <remote-alias>TravelMin</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>9</precision>
            <scale>4</scale>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DECIMAL&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_NUMERIC&quot;</attribute>
            </attributes>
            <object-id>[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>InputID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[InputID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>InputID</remote-alias>
            <ordinal>40</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_ID</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Traveller_ID (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_ID</remote-alias>
            <ordinal>41</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>activity</remote-name>
            <remote-type>130</remote-type>
            <local-name>[activity]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>activity</remote-alias>
            <ordinal>42</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>18</width>
            <contains-null>false</contains-null>
            <collation charset='296' flag='3' name='LROOT_S1' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Traveller_Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Traveller_Country (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Traveller_Country</remote-alias>
            <ordinal>43</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>200</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>44</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location_Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location_Type]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>location_Type</remote-alias>
            <ordinal>45</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_Year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_Year (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_Year</remote-alias>
            <ordinal>46</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Travel_month</remote-name>
            <remote-type>3</remote-type>
            <local-name>[Travel_month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>Travel_month</remote-alias>
            <ordinal>47</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>130</remote-type>
            <local-name>[month (v_photovisit_rating)]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>48</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>262140</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rating</remote-name>
            <remote-type>3</remote-type>
            <local-name>[rating]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>rating</remote-alias>
            <ordinal>49</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>sentiment_comments</remote-name>
            <remote-type>130</remote-type>
            <local-name>[sentiment_comments]</local-name>
            <parent-name>[v_photovisit_rating]</parent-name>
            <remote-alias>sentiment_comments</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>10</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='perDiff2018' datatype='real' name='[Calculation_1510957715795554304]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='If [Per Dff] NOT NULL then #pDiff2018' />
      </column>
      <column caption='Pdiff2018' datatype='boolean' name='[Calculation_1510957715796783105]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Photography (v_twocatsdiff)]=&apos;No photography&apos;&#13;&#10;    then [Parameters].[Covid 19 Year (copy)]=[PerDff]&#13;&#10;END' />
      </column>
      <column caption='Z-scor' datatype='real' name='[Calculation_3191363324673548296]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(SUM([rating (v_photographyvsnonall)])-WINDOW_AVG(SUM([rating (v_photographyvsnonall)])))/WINDOW_STDEV(SUM([rating (v_photographyvsnonall)]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
      <column caption='InputID (v photovisit rating)' datatype='integer' name='[InputID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Input ID1' datatype='integer' name='[InputID]' role='dimension' type='ordinal' />
      <column caption='Per Dff' datatype='real' name='[PerDff]' role='measure' type='quantitative' />
      <column caption='Photography (v frqcountry)' datatype='string' name='[Photography (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Photography (v twocatsdiff)' datatype='string' name='[Photography (v_twocatsdiff)]' role='dimension' type='nominal' />
      <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
      <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
          <alias key='&quot;photography&quot;' value='Photography Holiday' />
          <alias key='&quot;Photography&quot;' value='Photography Holidays' />
        </aliases>
      </column>
      <column datatype='real' name='[TravelMax]' role='measure' type='quantitative' />
      <column datatype='real' name='[TravelMean]' role='measure' type='quantitative' />
      <column datatype='real' name='[TravelMin]' role='measure' type='quantitative' />
      <column caption='Travel Date' datatype='string' name='[Travel_Date]' role='dimension' type='nominal' />
      <column caption='Travel Month' datatype='integer' name='[Travel_Month]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v photovisit rating)' datatype='integer' name='[Travel_Year (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
      <column caption='Travel Year' datatype='integer' name='[Travel_Year]' role='dimension' type='quantitative' />
      <column caption='Travel month (v photovisit rating)' datatype='integer' name='[Travel_month (v_photovisit_rating)]' role='dimension' type='quantitative' />
      <column caption='Travel month' datatype='integer' name='[Travel_month]' role='dimension' type='quantitative' />
      <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Traveller Country' datatype='string' name='[Traveller_Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Afghanistan&quot;' value='&quot;Afghanistan&quot;' />
          <semantic-value key='&quot;Australia&quot;' value='&quot;Australia&quot;' />
          <semantic-value key='&quot;Austria&quot;' value='&quot;Austria&quot;' />
          <semantic-value key='&quot;Bahrain&quot;' value='&quot;Bahrain&quot;' />
          <semantic-value key='&quot;Bangladesh&quot;' value='&quot;Bangladesh&quot;' />
          <semantic-value key='&quot;Belarus&quot;' value='&quot;Belarus&quot;' />
          <semantic-value key='&quot;Belgium&quot;' value='&quot;Belgium&quot;' />
          <semantic-value key='&quot;Brazil&quot;' value='&quot;Brazil&quot;' />
          <semantic-value key='&quot;Bulgaria&quot;' value='&quot;Bulgaria&quot;' />
          <semantic-value key='&quot;Cambodia&quot;' value='&quot;Cambodia&quot;' />
          <semantic-value key='&quot;Canada&quot;' value='&quot;Canada&quot;' />
          <semantic-value key='&quot;China&quot;' value='&quot;China&quot;' />
          <semantic-value key='&quot;Croatia&quot;' value='&quot;Croatia&quot;' />
          <semantic-value key='&quot;Cyprus&quot;' value='&quot;Cyprus&quot;' />
          <semantic-value key='&quot;Czech Republic&quot;' value='&quot;Czechia&quot;' />
          <semantic-value key='&quot;Denmark&quot;' value='&quot;Denmark&quot;' />
          <semantic-value key='&quot;Egypt&quot;' value='&quot;Egypt&quot;' />
          <semantic-value key='&quot;Ethiopia&quot;' value='&quot;Ethiopia&quot;' />
          <semantic-value key='&quot;Finland&quot;' value='&quot;Finland&quot;' />
          <semantic-value key='&quot;France&quot;' value='&quot;France&quot;' />
          <semantic-value key='&quot;Germany&quot;' value='&quot;Germany&quot;' />
          <semantic-value key='&quot;Greece&quot;' value='&quot;Greece&quot;' />
          <semantic-value key='&quot;Hong Kong&quot;' value='&quot;Hong Kong&quot;' />
          <semantic-value key='&quot;Hungary&quot;' value='&quot;Hungary&quot;' />
          <semantic-value key='&quot;India&quot;' value='&quot;India&quot;' />
          <semantic-value key='&quot;Indonesia&quot;' value='&quot;Indonesia&quot;' />
          <semantic-value key='&quot;Ireland&quot;' value='&quot;Ireland&quot;' />
          <semantic-value key='&quot;Jordan&quot;' value='&quot;Jordan&quot;' />
          <semantic-value key='&quot;Kuwait&quot;' value='&quot;Kuwait&quot;' />
          <semantic-value key='&quot;Lebanon&quot;' value='&quot;Lebanon&quot;' />
          <semantic-value key='&quot;Malaysia&quot;' value='&quot;Malaysia&quot;' />
          <semantic-value key='&quot;Malta&quot;' value='&quot;Malta&quot;' />
          <semantic-value key='&quot;Qatar&quot;' value='&quot;Qatar&quot;' />
          <semantic-value key='&quot;Romania&quot;' value='&quot;Romania&quot;' />
          <semantic-value key='&quot;United States&quot;' value='&quot;USA&quot;' />
        </semantic-values>
      </column>
      <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
      <column caption='Traveller ID' datatype='integer' name='[Traveller_ID]' role='dimension' type='ordinal' />
      <column caption='v_countrydate' datatype='table' name='[__tableau_internal_object_id__].[v_countrydate_98771871190540D39E6CEF22D122B18C]' role='measure' type='quantitative' />
      <column caption='v_frqcountry' datatype='table' name='[__tableau_internal_object_id__].[v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837]' role='measure' type='quantitative' />
      <column caption='v_photographyvsnonall' datatype='table' name='[__tableau_internal_object_id__].[v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696]' role='measure' type='quantitative' />
      <column caption='v_photovisit_rating' datatype='table' name='[__tableau_internal_object_id__].[v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342]' role='measure' type='quantitative' />
      <column caption='v_twocatsdiff' datatype='table' name='[__tableau_internal_object_id__].[v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450]' role='measure' type='quantitative' />
      <column caption='v_twocatstats' datatype='table' name='[__tableau_internal_object_id__].[v_twocatstats_75CA33B722EC46A3B140AAD50ED57027]' role='measure' type='quantitative' />
      <column caption='_Allcount' datatype='integer' name='[_allcount]' role='measure' type='quantitative' />
      <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
          <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
          <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
          <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
          <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
          <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
        </aliases>
      </column>
      <column caption='Input ID' datatype='integer' name='[inputID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
      <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
      <column caption='Month (V Photovisit Rating)' datatype='string' name='[month (v_photovisit_rating)]' role='dimension' type='nominal' />
      <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
      <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
      <column datatype='string' name='[sentiment_comments (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
      <column caption='Tot2018' datatype='integer' name='[tot2018]' role='measure' type='quantitative' />
      <column caption='Tot2023' datatype='integer' name='[tot2023]' role='measure' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Avg' name='[avg:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Avg' name='[avg:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='Avg' name='[avg:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryCount]' derivation='Count' name='[cnt:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Photography]' derivation='Count' name='[cnt:Photography:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Count' name='[cnt:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Count' name='[cnt:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
      <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
      <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='Count' name='[cnt:location_Type (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
      <column-instance column='[CountryCount]' derivation='CountD' name='[ctd:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Sum' name='[cum:sum:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[CountryCount]' derivation='None' name='[none:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
      <column-instance column='[TravelMax]' derivation='None' name='[none:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='None' name='[none:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='None' name='[none:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_Country]' derivation='None' name='[none:Traveller_Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
      <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
      <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
      <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Avg' name='[pcdf:avg:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:4]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:6]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:8]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Photography]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>2</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:9]' pivot='key' type='quantitative'>
        <table-calc diff-options='Fixed' ordering-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Photography]' ordering-type='Field' type='PctDiff'>
          <address>
            <value>&quot;No photography&quot;</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Photography]' derivation='Count' name='[pcto:cnt:Photography:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMax]' derivation='Sum' name='[sum:TravelMax:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMean]' derivation='Sum' name='[sum:TravelMean:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TravelMin]' derivation='Sum' name='[sum:TravelMin:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rating]' derivation='Sum' name='[sum:rating:ok]' pivot='key' type='ordinal' />
      <column-instance column='[TravelMean]' derivation='Sum' name='[win:sum:TravelMean:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Avg' from='-2' ordering-type='Rows' to='0' type='WindowTotal' window-options='IncludeCurrent' />
      </column-instance>
      <layout common-percentage='0.907133' dim-ordering='alphabetic' measure-ordering='alphabetic' parameter-percentage='0.0928668' show-structure='true' user-set-layout-v2='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:location_Type (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[ctd:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMax:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cum:sum:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:avg:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:2]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:4]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:6]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:8]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk:9]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcdf:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Photography:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMin:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[avg:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photography_rating):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:TravelMean:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[win:sum:TravelMean:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Pays-Bas&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niederlande&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Reunion Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:City:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Beruwala&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Polonnaruwa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Katukitula&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nuwara Eliya&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nilaveli&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sigiriya&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Colombo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Galle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tissamaharama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ampara&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Deniyaya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kalutara&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ahangama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Koslanda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ella&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Weligatta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arugam Bay&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Peradeniya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kalametiya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trincomalee&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Haputale&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Unawatuna&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kalkudah&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Habarana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saliyapura&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Anuradhapura&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bentota&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pinnawala&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kandy&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mirissa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hikkaduwa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jaffna&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Embilipitiya&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Pussellawa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ambalangoda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Negombo&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[sum:rating:ok]' type='palette'>
            <map to='#499894'>
              <bucket>12</bucket>
            </map>
            <map to='#499894'>
              <bucket>51</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>2</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>30</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>207</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>6249</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>8</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>41</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>1977</bucket>
            </map>
            <map to='#79706e'>
              <bucket>16</bucket>
            </map>
            <map to='#79706e'>
              <bucket>72</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>13</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>52</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>9</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>44</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>24</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>164</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>3</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>34</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>477</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>21</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>114</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>10</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>45</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>18</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>77</bucket>
            </map>
            <map to='#d37295'>
              <bucket>19</bucket>
            </map>
            <map to='#d37295'>
              <bucket>79</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>22</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>126</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>27</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>194</bucket>
            </map>
            <map to='#e15759'>
              <bucket>14</bucket>
            </map>
            <map to='#e15759'>
              <bucket>60</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>11</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>48</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>4</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>35</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>683</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>20</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>93</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>15</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>61</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>5</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>38</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>691</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:rating:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>4</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:activity:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Beach_Water_Sports&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Relaxing&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Historical_Sites&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;wildlife_nature&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Romantic_holiday&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hiking_climbing&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Religious&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Biking_cycling&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Sightseeing&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:sentiment_comments:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Neutral&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Positive&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Negative&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Republic of Ireland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Stewart Island&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestinian Territories&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Isle of Skye&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldvies&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cayman Island&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mariana Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Schweiz&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Near Prague&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eswatini (Swaziland)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Photography:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;No photography&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Photography&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;photography&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Traveller_Country (v_frqcountry):nk]' palette='tableau-20' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turkiye&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;France&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location_Type (v_photographyvsnonall):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Religious Sites&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Beaches&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Historic Sites&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Waterfalls&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Museums&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bodies of Water&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;National Parks&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zoological Gardens&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nature &amp; Wildlife Areas&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Farms&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gardens&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='Photography (v_twocatsdiff)' />
        <field-sort-custom-order field='Travel_Year (v_twocatsdiff)' />
        <field-sort-custom-order field='tot2018' />
        <field-sort-custom-order field='tot2023' />
        <field-sort-custom-order field='_allcount' />
        <field-sort-custom-order field='Percent2018' />
        <field-sort-custom-order field='Percent2023' />
        <field-sort-custom-order field='PerDff' />
      </field-sort-info>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
          <calculation class='tableau' formula='20.199999999999999' />
        </column>
      </datasource-dependencies>
      <object-graph>
        <objects>
          <object caption='v_countrydate' id='v_countrydate_98771871190540D39E6CEF22D122B18C'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_countrydate' table='[v_countrydate]' type='table' />
            </properties>
          </object>
          <object caption='v_frqcountry' id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_frqcountry' table='[v_frqcountry]' type='table' />
            </properties>
          </object>
          <object caption='v_photographyvsnonall' id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photographyvsnonall' table='[v_photographyvsnonall]' type='table' />
            </properties>
          </object>
          <object caption='v_photovisit_rating' id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_photovisit_rating' table='[v_photovisit_rating]' type='table' />
            </properties>
          </object>
          <object caption='v_twocatsdiff' id='v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatsdiff' table='[v_twocatsdiff]' type='table' />
            </properties>
          </object>
          <object caption='v_twocatstats' id='v_twocatstats_75CA33B722EC46A3B140AAD50ED57027'>
            <properties context=''>
              <relation connection='mysql.040164612je0re1ch3d4c10oumvj' name='v_twocatstats' table='[v_twocatstats]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_frqcountry)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_frqcountry_7CF9E0B5DBD94D7C8C079B931C72D837' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[inputID]' />
              <expression op='[InputID (v_photovisit_rating)]' />
            </expression>
            <first-end-point object-id='v_countrydate_98771871190540D39E6CEF22D122B18C' />
            <second-end-point object-id='v_photovisit_rating_06A19DDDDE3946EA8CCB885B354A1342' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_twocatsdiff)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_twocatsdiff_CD9B3BB2EBF344FD8F6124496659A450' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Photography]' />
              <expression op='[Photography (v_twocatstats)]' />
            </expression>
            <first-end-point object-id='v_photographyvsnonall_8E5696C1B9BC49C781BBD47A9549C696' />
            <second-end-point object-id='v_twocatstats_75CA33B722EC46A3B140AAD50ED57027' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_2075C5A994FF4C969707987DA2B9EC36]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Frq city' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Frq city' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action2_B85DF04D49BF485CA7C60155D3FFA2F9]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 3' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Traveller Country (v frqcountry)' />
        <param name='target' value='Dashboard 3' />
      </command>
    </action>
    <action caption='Highlight 3 (generated)' name='[Action3_0BBC4CBEFC7F4DCD93F57ACCFEB6DF54]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Photo Activity' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Activity' />
        <param name='target' value='Photo Activity' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='5* Cities'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' scope='rows' value='Number of Rating' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{8AE6B6A8-396E-4D3F-B028-7BC3FEFD306B}' />
    </worksheet>
    <worksheet name='Frq city'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([CountryCount])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_frqcountry):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='font-size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='8' />
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</cols>
      </table>
      <simple-id uuid='{93E7BE5A-2D49-47E4-89D8-19A9C636E294}' />
    </worksheet>
    <worksheet name='Frq city (3)'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v frqcountry)' datatype='integer' name='[Travel_Year (v_frqcountry)]' role='dimension' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):ok]' pivot='key' type='ordinal' />
            <column-instance column='[Travel_Year (v_frqcountry)]' derivation='None' name='[none:Travel_Year (v_frqcountry):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([CountryCount])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_frqcountry):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' shelf='rows'>
              <sort-filter-info>
                <sort-filter level-name='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):ok]' member-value='2023' />
              </sort-filter-info>
            </shelf-sort-v2>
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='text-orientation' id='refline0' value='0' />
            <format attr='text-align' id='refline0' value='right' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='font-size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='8' />
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='right' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):ok]</cols>
      </table>
      <simple-id uuid='{E86721F7-2EE1-466B-966C-FC16EA0E8D75}' />
    </worksheet>
    <worksheet name='Line Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays vs Non-Photography Holidays by Year </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Non_Photo_max_perDiff2018' datatype='real' datatype-customized='true' name='[Covid 19 Year (copy)]' param-domain-type='list' role='measure' source-field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Percent2018]' type='quantitative' value='20.199999999999999'>
              <calculation class='tableau' formula='20.199999999999999' />
            </column>
            <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
              <calculation class='tableau' formula='2020.' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='real' name='[Percent2018]' role='measure' type='quantitative' />
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Travel Year (v photographyvsnonall)' datatype='integer' name='[Travel_Year (v_photographyvsnonall)]' role='dimension' type='quantitative' />
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_photographyvsnonall)]' derivation='None' name='[none:Travel_Year (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Holidaymakers ' />
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' scope='cols' value='Year' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' field-type='quantitative' max='2024' min='2010' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[Parameters].[Covid 19 Year (copy)]' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dotted' />
            <format attr='stroke-color' id='refline0' value='#ff00004b' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' value='Holiday Makers Type'>
              <formatted-text>
                <run bold='true' fontalignment='1'>Holiday Makers Type</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label='Covid 19' label-type='custom' probability='95' scope='per-table' tooltip='Covid 19' tooltip-type='custom' value-column='[Parameters].[Parameter 1]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</cols>
      </table>
      <simple-id uuid='{A58EDB08-AD47-409E-AD1E-DC0A82A0F9E9}' />
    </worksheet>
    <worksheet name='Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#000000'>Top Ten International Tourist  Arrivals by Countries - Year 2010 to 2023</run>
            <run fontalignment='1'>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([activity])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' using='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]' />
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]' field-type='quantitative' max='30844281.911059216' min='-1909607.794413897' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]' field-type='quantitative' max='13253385.098458683' min='-10239273.619251298' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' field-type='quantitative' max='419' max-size='1' min='0' min-size='0' type='quantsize' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Latitude (generated)]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{DB828CB9-B2E3-4F74-A932-614B90B54ACE}' />
    </worksheet>
    <worksheet name='Map Cross Tab'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#000000'>Top Ten International Tourist  Arrivals by Countries -2010 to 2023</run>
            <run fontalignment='1'>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='Count' name='[cnt:activity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([activity])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cayman Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Channel Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Eswatini (Swaziland)&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Isle of Skye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldvies&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mariana Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Palestinian Territories&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Republic of Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Schweiz&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South America&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Stewart Island&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' using='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:activity:qk]' />
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='113' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' field-type='quantitative' max='419' max-size='1' min='0' min-size='0' type='quantsize' />
          </style-rule>
          <style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' id='legend-color' value='right' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{1FC0B189-DC7D-4F5F-AB97-00FE6023ED82}' />
    </worksheet>
    <worksheet name='Non vs Poto'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Overall Photography Holidays vs Non-Photography Holidays - Year 2010  to 2023</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Holiday Makers' />
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' value='93' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' value='148' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='17' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</cols>
      </table>
      <simple-id uuid='{6A50E07A-6C64-4E2D-A8D6-C7B847FDFC3F}' />
    </worksheet>
    <worksheet name='Ph_ by Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Seasonality of Traffic by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column caption='Month (V Photovisit Rating)' datatype='string' name='[month (v_photovisit_rating)]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[month (v_photovisit_rating)]' derivation='None' name='[none:month (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#ffbe7d' />
                <format attr='mark-transparency' value='239' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</cols>
        <annotations>
          <annotation class='point' id='0' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.633333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='197.52454417952313'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='140' y='-56' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{CA2E3D86-7E9B-4B80-80DC-286F1F4CC814}' />
    </worksheet>
    <worksheet name='Photo Activity'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Distribution of Photography Holiday Activities  (Percentage) </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' scope='rows' value='Number of Holiday Makers ' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='65' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='-90' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <_.fcp.IndividualControlFormatting.true...style-rule element='legend-title'>
            <_.fcp.IndividualControlFormatting.true...format attr='text-align' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' id='legend-color' value='center' />
          </_.fcp.IndividualControlFormatting.true...style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' value='Photography Holiday Makers&apos; Activity'>
              <formatted-text>
                <run fontcolor='#000000' fontname='Segoe UI' fontsize='15'>Photography Holiday Makers&apos; Activity</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</cols>
      </table>
      <simple-id uuid='{8ACD1209-7334-4E56-857C-B5BB9F8D0C52}' />
    </worksheet>
    <worksheet name='Rating pie'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Distribution of 5 star Rating Given for Photography Holidays (percentage)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[rating]' derivation='None' name='[none:rating:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rating]' derivation='Count' name='[pcto:cnt:rating:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column aggregation='Sum' caption='Rating' datatype='integer' name='[rating]' role='dimension' type='ordinal' />
            <column-instance column='[rating]' derivation='Sum' name='[sum:rating:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]'>
            <groupfilter function='member' level='[none:rating:ok]' member='5' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:rating:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7AB4EE68-1BAC-4E59-B2E4-2B1F6D160702}' />
    </worksheet>
    <worksheet name='SIA'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidaymakers&apos; Sentiment Comments (Percentage)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{2E56FC8B-EDFB-414D-AB93-5A9226D14142}' />
    </worksheet>
    <worksheet name='SIA Positve Cities'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays Sentiment Positive Comments Received by Cities</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]'>
            <groupfilter function='level-members' level='[none:City:nk]' />
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Negative&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Neutral&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='field-labels-decoration'>
            <format attr='vertical-align' value='center' />
            <format attr='wrap' value='off' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#59a14f' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='565' />
                <format attr='maxheight' value='565' />
                <format attr='minwidth' value='720' />
                <format attr='maxwidth' value='720' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</cols>
      </table>
      <simple-id uuid='{AA5E5BF6-9CC4-48A1-A971-6D7CB28B6C6D}' />
    </worksheet>
    <worksheet name='SIA Type of visit_'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Photography Holidays Sentiment Comments by Location Types</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Activity' datatype='string' name='[activity]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Beach_Water_Sports&quot;' value='Beach,Water &amp; Sports' />
                <alias key='&quot;Biking_cycling&quot;' value='Biking &amp; cycling' />
                <alias key='&quot;Hiking_climbing&quot;' value='Hiking &amp; climbing' />
                <alias key='&quot;Historical_Sites&quot;' value='Historical &amp; Sites' />
                <alias key='&quot;Romantic_holiday&quot;' value='Romantic  holiday' />
                <alias key='&quot;wildlife_nature&quot;' value='Wildlife &amp; nature' />
              </aliases>
            </column>
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[activity]' derivation='None' name='[none:activity:nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[pcto:cnt:sentiment_comments:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Beach_Water_Sports&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Biking_cycling&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Hiking_climbing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Historical_Sites&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Relaxing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Religious&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Romantic_holiday&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;Sightseeing&quot;' />
              <groupfilter function='member' level='[none:activity:nk]' member='&quot;wildlife_nature&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Negative&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Neutral&quot;' />
              <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' scope='rows' value='Number of Sentiment Comments' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{E93BA932-D0FA-49D4-9649-22E03DD52C36}' />
    </worksheet>
    <worksheet name='SIA countries'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Top Ten by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([Traveller_ID (v_photovisit_rating)])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Traveller_Country (v_photovisit_rating):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-color' value='#ffbe7d' />
                <format attr='mark-transparency' value='239' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</cols>
      </table>
      <simple-id uuid='{4DE53B2F-6305-4D8B-BC96-67ABFB2EFBDE}' />
    </worksheet>
    <worksheet name='SIA countries (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Sentiment Positive Comments Received by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column datatype='string' name='[Traveller_Country (v_photographyvsnonall)]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_Country (v_photographyvsnonall)]' derivation='None' name='[none:Traveller_Country (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='None' name='[none:sentiment_comments (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk:4]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Field' type='PctTotal'>
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' />
                <order field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]' />
              </table-calc>
            </column-instance>
            <column caption='Rating (V Photographyvsnonall)' datatype='integer' name='[rating (v_photographyvsnonall)]' role='measure' type='quantitative' />
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk:4]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;No photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' />
              <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]'>
            <groupfilter count='35' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([rating (v_photographyvsnonall)])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='%null%' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;England&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Europe&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Turkiye&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Traveller_Country (v_photographyvsnonall):nk]' member='&quot;Vietnam&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]'>
            <groupfilter function='member' level='[none:sentiment_comments (v_photographyvsnonall):nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' scope='rows' value='Number of Sentiment Comments' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]' value='100' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</rows>
        <cols>([federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk] / ([federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk] / [federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]))</cols>
      </table>
      <simple-id uuid='{06C83C76-08ED-4260-AF18-C77EA28F7C3C}' />
    </worksheet>
    <worksheet name='SIA type'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;photography&quot;' user:ui-domain='cascading' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <wedge-size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <size column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{38D1FCF9-5FD7-4A6E-83D8-A3BD7B8DFDAA}' />
    </worksheet>
    <worksheet name='Seasonality of Traffic by Month'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontcolor='#000000' fontname='Segoe UI'>Seasonality of Traffic by Month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column datatype='string' name='[Photography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;No photography&quot;' value=' Non-Photography Holidays' />
                <alias key='&quot;photography&quot;' value='Photography Holiday' />
                <alias key='&quot;Photography&quot;' value='Photography Holidays' />
              </aliases>
            </column>
            <column caption='Traveller ID (v photographyvsnonall)' datatype='integer' name='[Traveller_ID (v_photographyvsnonall)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative' />
            <column caption='Month (V Photographyvsnonall)' datatype='string' name='[month (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column-instance column='[Photography]' derivation='None' name='[none:Photography:nk]' pivot='key' type='nominal' />
            <column-instance column='[month (v_photographyvsnonall)]' derivation='None' name='[none:month (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[Traveller_ID (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]'>
            <groupfilter function='member' level='[none:Photography:nk]' member='&quot;Photography&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' scope='rows' value='Number of Photography Holiday Markers' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='stroke-color' scope='cols' value='#f9a655' />
            <format attr='line-pattern-only' scope='cols' value='solid' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='legend-title'>
            <format attr='text-align' value='left' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' />
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='false' y-axis='true' />
            <reference-line axis-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</cols>
        <annotations>
          <annotation class='point' id='3' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.683333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1388.6975476839239'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='135' y='13' />
          </annotation>
          <annotation class='point' id='4' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.433333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;January&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1420.8433242506812'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='208' y='-33' />
          </annotation>
          <annotation class='point' id='5' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.7'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;March&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1037.2370572207085'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='77' y='-97' />
          </annotation>
          <annotation class='point' id='6' mark-position='1' pullback='0' text-width='171'>
            <formatted-text>
              <run bold='true' fontalignment='0'>European winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.3'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;December&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='1167.9632152588554'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-46' y='-139' />
          </annotation>
          <annotation class='point' id='7' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.493827'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;January&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='164.02179836512261'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='287' y='-100' />
          </annotation>
          <annotation class='point' id='8' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.333333'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;February&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='164.02179836512261'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='219' y='-47' />
          </annotation>
          <annotation class='point' id='9' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.469136'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;December&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='142.55585831062669'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-152' y='-167' />
          </annotation>
          <annotation class='point' id='10' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontalignment='0'>Europian winter month</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.580247'>
                  <node-reference>
                    <fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
                    </fields>
                    <multibucket>
                      <bucket>&quot;March&quot;</bucket>
                    </multibucket>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='134.57493188010901'>
                  <node-reference>
                    <axis>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='115' y='-107' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{926ADA61-A842-4E77-9E74-95CFABBF94A5}' />
    </worksheet>
    <worksheet name='Sheet 15'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Country Count' datatype='integer' name='[CountryCount]' role='measure' type='quantitative' />
            <column caption='Traveller Country (v frqcountry)' datatype='string' name='[Traveller_Country (v_frqcountry)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Traveller_Country (v_frqcountry)]' derivation='None' name='[none:Traveller_Country (v_frqcountry):nk]' pivot='key' type='nominal' />
            <column-instance column='[CountryCount]' derivation='Sum' name='[sum:CountryCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='180' />
                <format attr='maxwidth' value='180' />
                <format attr='minheight' value='622' />
                <format attr='maxheight' value='622' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:CountryCount:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</cols>
      </table>
      <simple-id uuid='{AEF26B1E-1002-4FD2-BDF8-B3507923DA6F}' />
    </worksheet>
    <worksheet name='Sheet 16'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
            <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
            <column-instance column='[Photography (v_twocatstats)]' derivation='None' name='[none:Photography (v_twocatstats):nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_twocatstats)]' derivation='None' name='[none:Travel_Year (v_twocatstats):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='302' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</cols>
      </table>
      <simple-id uuid='{226A9F59-9FAB-49BA-82E6-2AE8BAD8A0C1}' />
    </worksheet>
    <worksheet name='Sheet 20'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller ID (v photovisit rating)' datatype='integer' name='[Traveller_ID (v_photovisit_rating)]' role='dimension' type='ordinal' />
            <column-instance column='[Traveller_ID (v_photovisit_rating)]' derivation='Count' name='[cnt:Traveller_ID (v_photovisit_rating):qk]' pivot='key' type='quantitative' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photovisit_rating):qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{7740638F-84ED-4B3F-A1E7-F71BDE528CFB}' />
    </worksheet>
    <worksheet name='Stat'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Photography (v twocatstats)' datatype='string' name='[Photography (v_twocatstats)]' role='dimension' type='nominal' />
            <column datatype='real' name='[TravelMean]' role='measure' type='quantitative' />
            <column caption='Travel Year (v twocatstats)' datatype='integer' name='[Travel_Year (v_twocatstats)]' role='dimension' type='quantitative' />
            <column-instance column='[TravelMean]' derivation='Count' name='[cnt:TravelMean:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Photography (v_twocatstats)]' derivation='None' name='[none:Photography (v_twocatstats):nk]' pivot='key' type='nominal' />
            <column-instance column='[Travel_Year (v_twocatstats)]' derivation='None' name='[none:Travel_Year (v_twocatstats):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:TravelMean:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</cols>
      </table>
      <simple-id uuid='{B4F9E845-590C-4317-AE30-26D0E4BFAC9D}' />
    </worksheet>
    <worksheet name='X-SIA Type of visit'>
      <table>
        <view>
          <datasources>
            <datasource caption='v_countrydate+ (ecocapture)' name='federated.0dw3bjc0btffts1gejoz00gd0l6h' />
          </datasources>
          <datasource-dependencies datasource='federated.0dw3bjc0btffts1gejoz00gd0l6h'>
            <column caption='Traveller Country (v photovisit rating)' datatype='string' name='[Traveller_Country (v_photovisit_rating)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='Count' name='[cnt:sentiment_comments:qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[location_Type (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='location Type' datatype='string' name='[location_Type]' role='dimension' type='nominal' />
            <column-instance column='[Traveller_Country (v_photovisit_rating)]' derivation='None' name='[none:Traveller_Country (v_photovisit_rating):nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type (v_photographyvsnonall)]' derivation='None' name='[none:location_Type (v_photographyvsnonall):nk]' pivot='key' type='nominal' />
            <column-instance column='[location_Type]' derivation='None' name='[none:location_Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments]' derivation='None' name='[none:sentiment_comments:nk]' pivot='key' type='nominal' />
            <column-instance column='[sentiment_comments (v_photographyvsnonall)]' derivation='Count' name='[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column datatype='string' name='[sentiment_comments (v_photographyvsnonall)]' role='dimension' type='nominal' />
            <column caption='Sentiment Comments' datatype='string' name='[sentiment_comments]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Czech Republic&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Egypt&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Europe&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hong Kong&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Russia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovakia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkey&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Traveller_Country (v_photovisit_rating):nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Beaches&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Bodies of Water&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Farms&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Gardens&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Historic Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Museums&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;National Parks&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Nature &amp; Wildlife Areas&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Religious Sites&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Waterfalls&quot;' />
              <groupfilter function='member' level='[none:location_Type (v_photographyvsnonall):nk]' member='&quot;Zoological Gardens&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]'>
            <groupfilter function='member' level='[none:sentiment_comments:nk]' member='&quot;Positive&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</column>
            <column>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' scope='rows' value='Number of Sentiment Comments' />
            <format attr='width' field='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' value='60' />
          </style-rule>
          <style-rule element='field-labels-decoration'>
            <format attr='vertical-align' value='center' />
            <format attr='wrap' value='off' />
            <format attr='text-align' value='center' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:sentiment_comments (v_photographyvsnonall):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#59a14f' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='615' />
                <format attr='maxheight' value='615' />
                <format attr='minwidth' value='660' />
                <format attr='maxwidth' value='660' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]</rows>
        <cols>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</cols>
      </table>
      <simple-id uuid='{EF528593-29D6-41CC-B9C9-46FD7FABCCC7}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='86414' x='584' y='967'>
              <zone h='49031' id='48' name='Map' w='45800' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49035' id='56' name='Photo Activity' w='45800' x='584' y='49998'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='79' name='Rating pie' w='40614' x='46384' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49033' id='91' name='Line Chart' w='40614' x='46384' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='170' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='12418' x='86998' y='967'>
              <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='15235' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='22489'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='26118' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='49816'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='75934'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='7980' id='92' name='Line Chart' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='12418' x='86998' y='81496'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1600' minheight='1600' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='122' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98066' id='121' param='vert' type-v2='layout-flow' w='98832' x='584' y='967'>
                <zone fixed-size='280' h='49031' id='48' is-fixed='true' name='Map' w='45800' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='15235' id='49' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]' type-v2='size' w='12418' x='86998' y='7254'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27327' id='50' name='Map' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type-v2='color' w='12418' x='86998' y='22489'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='91' is-fixed='true' name='Line Chart' w='40614' x='46384' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='7980' id='92' name='Line Chart' pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='12418' x='86998' y='81496'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6287' id='9' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='12418' x='86998' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49035' id='56' is-fixed='true' name='Photo Activity' w='45800' x='584' y='49998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='26118' id='57' name='Photo Activity' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type-v2='color' w='12418' x='86998' y='49816'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49033' id='79' is-fixed='true' name='Rating pie' w='40614' x='46384' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='80' name='Rating pie' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type-v2='size' w='12418' x='86998' y='75934'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{8CCA8090-640E-4B2E-82F7-02AE726BECC5}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='827' maxwidth='1369' minheight='827' minwidth='1369' preset-index='16' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98066' id='7' param='horz' type-v2='layout-flow' w='98832' x='584' y='967'>
            <zone h='98066' id='5' type-v2='layout-basic' w='87948' x='584' y='967'>
              <zone h='59315' id='55' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='38751' id='56' name='SIA' w='34697' x='584' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='59315' id='59' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='38751' id='100' name='SIA Type of visit_' w='53251' x='35281' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='149' h='98066' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='10884' x='88532' y='967'>
              <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='967'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='11366'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1300' minheight='1300' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='118' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98066' id='117' param='vert' type-v2='layout-flow' w='98832' x='584' y='967'>
                <zone fixed-size='280' h='38751' id='56' is-fixed='true' name='SIA' w='34697' x='584' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='10399' id='57' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type-v2='color' w='10884' x='88532' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5562' id='58' name='SIA' pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type-v2='size' w='10884' x='88532' y='11366'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='38751' id='100' is-fixed='true' name='SIA Type of visit_' w='53251' x='35281' y='967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='55' is-fixed='true' name='SIA Positve Cities' w='61505' x='584' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='59315' id='59' is-fixed='true' is-scaled='1' param='C:/Github_proj/EcoCapture-Analytics/Analysis/Screenshot 2025-01-18 231438.jpg' type-v2='bitmap' w='26443' x='62089' y='39718'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{148B74DC-060A-48C0-8A9E-8CA4F401E31E}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 3'>
      <style />
      <size maxheight='800' maxwidth='1400' minheight='800' minwidth='1400' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Covid 19 Year' datatype='real' name='[Parameter 1]' param-domain-type='any' role='measure' type='quantitative' value='2020.'>
          <calculation class='tableau' formula='2020.' />
        </column>
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='9' param='horz' type-v2='layout-flow' w='98858' x='571' y='1000'>
            <zone h='98000' id='7' type-v2='layout-basic' w='87429' x='571' y='1000'>
              <zone h='50659' id='5' name='Non vs Poto' w='43715' x='571' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='47341' id='32' name='SIA countries' w='87429' x='571' y='51659'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='50659' id='74' name='Ph_ by Month' w='43714' x='44286' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='8' is-fixed='true' param='vert' type-v2='layout-flow' w='11429' x='88000' y='1000'>
              <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='2750' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='11429' x='88000' y='7500'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1000' minheight='1000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='78' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='77' param='vert' type-v2='layout-flow' w='98858' x='571' y='1000'>
                <zone fixed-size='280' h='50659' id='5' is-fixed='true' name='Non vs Poto' w='43715' x='571' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='50659' id='74' is-fixed='true' name='Ph_ by Month' w='43714' x='44286' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6500' id='12' mode='type_in' param='[Parameters].[Parameter 1]' type-v2='paramctrl' w='11429' x='88000' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47341' id='32' is-fixed='true' name='SIA countries' w='87429' x='571' y='51659'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2750' id='33' name='SIA countries' pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type-v2='color' w='11429' x='88000' y='7500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{1A80F195-FFE0-4D70-9B23-D0F132D84CF2}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Line Chart'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
                    <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[pcto:cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>2379</value>
                  <value>&quot;No photography&quot;</value>
                  <value>2018</value>
                  <value>0.2101961477292808</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Photo Activity'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Rating pie'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='79' />
      <simple-id uuid='{46844394-C8DC-47C5-8AB6-F61F276BEB8A}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='SIA'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Positve Cities'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA Type of visit_'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='59' />
      <simple-id uuid='{79E10B69-7BD1-4F8B-8BCB-3874D47C0A61}' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='Non vs Poto'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Ph_ by Month'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='SIA countries'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='32' />
      <simple-id uuid='{91E32204-93F8-4CFF-AAD0-18D32233E187}' />
    </window>
    <window class='worksheet' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:Traveller_ID (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{352790A8-0E1E-4075-9D85-3F7C13DD202D}' />
    </window>
    <window class='worksheet' name='Map Cross Tab'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0E82B045-3354-4369-864E-2D81875A5B32}' />
    </window>
    <window class='worksheet' name='Line Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='243'>
            <card mode='compact' param='[Parameters].[Covid 19 Year (copy)]' type='parameter' />
            <card pane-specification-id='2' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E9C45F67-31E5-48DA-9189-8EFE85F6B4FF}' />
    </window>
    <window class='worksheet' name='Photo Activity'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='256'>
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{614D0002-C6CC-45DD-B3C3-55C172326677}' />
    </window>
    <window class='worksheet' name='Rating pie'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:InputID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F11A9256-BDCD-4620-9D17-A973F9712E45}' />
    </window>
    <window class='worksheet' name='SIA'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='222'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CDDD4D80-DDFD-40AB-ABC9-B13F899C78B8}' />
    </window>
    <window class='worksheet' name='SIA Type of visit_'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F7D445F7-A2F7-4F8B-B70F-673383488A10}' />
    </window>
    <window class='worksheet' name='SIA Positve Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
      </viewpoint>
      <simple-id uuid='{B208DBA9-1D01-42F0-91B9-4290B0E2FB9D}' />
    </window>
    <window class='worksheet' name='Non vs Poto'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='208'>
            <card AVG='true' KURTOSIS='false' MAX='true' MEDIAN='true' MIN='true' QUART1='false' QUART3='false' SKEWNESS='false' STDEV='false' SUM='true' type='summary' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5B892FE8-53E8-4FB3-909E-CFD8384703C4}' />
    </window>
    <window class='worksheet' name='Seasonality of Traffic by Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='231'>
            <card param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='filter' />
            <card pane-specification-id='1' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_month:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photography_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5ED166A1-4843-4683-888B-4722DFCC388E}' />
    </window>
    <window class='worksheet' name='SIA countries'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6C880C5F-A5AF-4AAF-85F2-6516170E3278}' />
    </window>
    <window class='worksheet' name='Ph_ by Month'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:month (v_photovisit_rating):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{68F71B14-8D42-45C1-9DE1-1661A8511167}' />
    </window>
    <window class='worksheet' name='SIA countries (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{944969AD-46F7-441E-91D3-073854003760}' />
    </window>
    <window class='worksheet' name='Frq city'>
      <cards>
        <edge name='left'>
          <strip size='194'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='150'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C85E0752-E638-4646-8B76-A812B7EC5E38}' />
    </window>
    <window class='worksheet' maximized='true' name='Frq city (3)'>
      <cards>
        <edge name='left'>
          <strip size='194'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{F0BA4005-2418-41F2-8F93-A1EB2E5A40D4}' />
    </window>
    <window class='worksheet' name='SIA type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[cnt:sentiment_comments (v_photographyvsnonall):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C46270CD-548A-4EC4-8D4F-A646CCA311AA}' />
    </window>
    <window class='worksheet' name='X-SIA Type of visit'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photography_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments (v_photographyvsnonall):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{396FB502-1C76-4CC7-B7CB-7EF9A5E14013}' />
    </window>
    <window class='worksheet' name='5* Cities'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:City:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_photovisit_rating):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[sum:rating:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{90413D93-B792-4F33-BBC1-794A4C561A46}' />
    </window>
    <window class='worksheet' name='Stat'>
      <cards>
        <edge name='left'>
          <strip size='108'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[:Measure Names]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Calculation_3191363324667273216:qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_photographyvsnonall):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photographyvsnonall):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[usr:Calculation_3191363324668567554:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{95C1AC77-0FF8-46EF-A265-09594A86B84D}' />
    </window>
    <window class='worksheet' name='Sheet 15'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_Country (v_frqcountry):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1BB2767F-55E3-4617-AF12-45C1E0C45ED8}' />
    </window>
    <window class='worksheet' name='Sheet 16'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_frqcountry):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Photography (v_twocatstats):nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_frqcountry):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Travel_Year (v_twocatstats):qk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:rating:ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:sentiment_comments:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3B9E3B7E-AC37-4F11-99FC-F4783A09C476}' />
    </window>
    <window class='worksheet' name='Sheet 20'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:Traveller_ID (v_photovisit_rating):ok]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:activity:nk]</field>
            <field>[federated.0dw3bjc0btffts1gejoz00gd0l6h].[none:location_Type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E6376252-0223-4DEF-9317-BA83DB2D4779}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='5* Cities' width='192'>
      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
      1wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
      wndhQPeIKwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
      l5/+9Ke4zFBfWcpvnnwSW0Xtor+dXa/w/AsHyQCfnTzGyIQHWVH46t4GegJq7EYDpSU2xsfG
      APjqN/+CO/a03cBjuI4oNxHdp48r//ff/kV5/rXDeT9/+tln8x4/9s4ryhvvn1oVG04efV15
      7fCJValrNXn39ZeUf/rHf1BOdo/l/bzQvfntv/53pWciuCo2HPj3f1LOXfKuSl03CypFEa4Q
      gq2LmAYVbGkWDYJ//+qrtOxo581Dr9O6fTuqa5z88dFDvPHWYSKyicjERV46eAijq5aYZ4Df
      vvI2d92+l/Mn31s4XllqB+anSbFVY9Iurs831s/TL7zMuf5RdtQ4ePyJpxjzx3AbsgvHywxZ
      Xnz195wfmGDvrvZVvh2CmxVZllGprvVEXj+L3gD726t59qnfoi9tov/MMX71q19xqnuEj975
      Pf/8z/+HMV+Ul575NQff+mC+/D0P8e1HvsHYpUFOdg3x93//c06+/zYV9dux63MAi45f4dDL
      z/D4488wMd7Pv/zLv/LSoXcBcFQ28Hd/81eEZ2f48O23+bMf/5zE5BCGLxyv276T23fvIp2I
      rfrNENy8FKunvkgAte13Egz4eejunRw71cndd9/J1HAfssbA7iY3Fwcn8IbS/Pm3HgCgr/ME
      750e5q9+8BeXDZw30mazfcnwxcbv3NnB9x77EaePHuPRn/2coGcEACke4P898RyP/fgnoCgo
      l8/78nGVWk0mFifP+ppAcF0s6gIBzM3N0dbWhpEMJ05foK55B9ND55mNpNnWvBOHUUVzczMA
      bx96jWQySSAu0V5t5cWDb3HPNx6h/7P36OodYi6lYledc+H4lS6QQavmlVfe4o++dS8vP3+A
      stpWdm5vouvTDxieCTN8aYxvPvwgLz39DM667ahC4wvHtVKEU2e7MZW42b+r/ZrdNMHmQFEU
      1OrVH7KKWSDBhkCSJDQazbLLT01NEYlEcDqdjIyMcNttt/HRRx+hVquJRCJUVlai1+vRXrsq
      gaA4RENBommJqgr3st7kp0+fpqWlhaGhIdxuN/X19bz66qu0trYSDAaRJImSkhI6Ojqoqakh
      FApx5MgR9Ho9d999N263m1wux65du+jq6sLv9wsBCNYH3/Q43lACq15F91yEW3Y0X/Ocuro6
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Frq city' width='192'>
      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
      ewahMTuOBtUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Frq city (3)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Line Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Map Cross Tab' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Non vs Poto' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Ph_ by Month' width='192'>
      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
      YgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Photo Activity' width='192'>
      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
      z/8HgowGtZ8C0rEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Rating pie' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA' width='192'>
      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
      twAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SIA Positve Cities' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA Type of visit_' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAY+UlEQVR4nO2dSYwkWZrXf7b4vkaEe6yZGZmVnVm5VFXXMsVU97RmacRhgAsS97mhucEc
      OLYGIcRxJC7cOcBoGDgA3QeERmJgQEM3TW1ZlXssGZt7uIfvbmZu2+MQUQmZ7pEVke4e4RH+
      /aRSRZq5/vbZM/ub2Xv22fc0pZRCEKYU/bwDEITzZGgDKKUIgmAUsQjCmSN3AGGqEQMIU40Y
      QJhqxADCVHMyAyhFo17D831qtRpB4NNotsccmiCMH/MkPwoDH6vToFwu0+o4xBNxEqZGNPUu
      cV2hlCIMw3HHKggj50R3ABX61FoO+WwSQ9fwgwB5fSZcBrSTvAkOA596vU4ilaHn2GSzGbqW
      QzaTfnn1NwwDgF71L0YQlk6s8Hsj0BGEN3MiA7yJ1w1Q++XvjyAqk9lP/9PwOoLwPcgokDDV
      nKgTPAzNtsdepce7N1KsbVkk4gYvdm3y2QiaBkvFGNl0ZNxhCMJAxn4HWN+2cNwAz1c83ezy
      f75pcudmmnrL5esnLT7/tondk1wi4XwYuwE0DUqVHu2uz+pygrmZCNslm7/xwQwf3s3RtQPK
      1d64wxCEgUgnWJhqpBMsTDViAGGqGfko0H949MOhNXTd4A8+HUEwgvA9nCwXyPdYW3tKPJWn
      2WxRnM1Sqja5f/9u3y3kP26uDB+UYfAHQ6sIwvdzIgNohkEqlUH5XXp+yF6tzY1CiranyBgh
      YRjyXV86sTp8KoSpm/j+PxhaRxC+jxMZIHBtao0mC0vLpO198rN5dhpd7ixofNeN+G4UaGSB
      mWN/RycIJzOAGUtx//57ABRmZwGYnz9cJ1mhwkVGRoGEqUYMIEw1YgBhqhEDCFONGECYasQA
      wlQjBhCmGjGAMNWcrCyKCtnaWMfqedSrFRzHYnN7D3kHJlx0TvQmWIUhqVSceq1GZWuDeHGR
      GTOk7SpSr+UCjQrf9wcu7z7+xxAO/wVZ6s6fgCbpFtPOybJBPYfHz16wsjRPz+1h9HrsNRzu
      rWjo2tnmAgX2JoT20PqGYaDpYoBp52S5QPE0P/rRbwJw7fqNV9addy7Qsxdd1rctfvqbBb58
      3CIR0ylXeyQTBgcNl7s3M1xfSZ5vkMLEcuEvgZYdcH05gdM7/Lg+GTdIxA32ay7RiMajtQ66
      pnFtOXHeoQoTyIU3wFIxxvq2RXE2xp13UnSsAN9XfPpeHl2HSs0llRzt45lwebjwBijOxijO
      xgDIZ/sLbH23ThAGceEM8C/++qf0XG9onX/2iX7xdl4YORfuHHhUXcRxBw+Rnobz7rwLk8GF
      M0B85a9Q3ggqyWl/f+Bi31qDcHiDGambaJr0PSadC2cAI1XC9J0RKA2+BbQf/wzl1YZWz3/0
      Z2iR7NA6wniRXCBhqhEDCFPNiQtjPX/2mEgyT7dZw4jGcWyHex98QEQbd4hny//cuoljF4bW
      +bs/NJAB2MnnZIWxNI14KkehMEtV1wkDj7lUFMdXGGecDDcqgiBAU/3u/fNvPqbeHr6P8dPf
      1zCM8e6DMDwnnya126EZMel02iwtzlNvWRSiGqiLWRjLMAxMY3zbMAxDintdAE50hIxonHfv
      3AVgcXEJgHx+BjhuLOXiklj9LzhWY2gdzfg7IA9BE49col5Di1jo0e4IlC7bpeFyIqNAwlQj
      BhCmGjGAMNWIAYSpRgwgTDViAGGqEQMIU82JDBD6Hs+ePKJaq/Po4SOajRoPn67LSLdw4Tnh
      JHkmszM5WrUKhaVlnm5scGsxT9PtnyRvVJxXLtAo9ce9D8LwnGySvF6Xja0Sy0sL7GxuMj+b
      Z7PS4d6Chn5BJ8mTXCABTlEY6+OPPwJgcWkZgGtH6+TbWuEiI51gYaoRAwhTjRhAmGr6DNBs
      NgmC4DxiEYQzp88AP//5zymXy2ICYSoY+Aj0i1/8gq+++opebwQFqARhgukbBv3ss8/kBY4w
      NfQZ4ObNmyilCIIAY4wvigRhEhj4CPTk6y/5d3/2p1S+Kw+iFK7rolRIt9slDAMsexTlCQXh
      fBlwiVcYhs699z7A1A9zZVQY8Oz5OquLOb59vksimcBQIdfv3COmHb4KHnUu0Kj1BumPcxvj
      1hdGwwADBGyub+LG0ty6d7Ra10nEo/RcH9Mw8PyAdDJGqEBxeKDDMBxpYKPWe51xxHyW+sJo
      GGAAk4WFWRpBnO9Ke6gwJBoxMJJ5lpZMCnOzNNoWKVNDKZ0wDEeeDDdqvdfRdX2s2xi3vjAa
      BvZyiwtFth7u4B9dwHTDZOXKYfpbLpMGoDAbPZsIBWGMDOwE1w5KrD9aw+7JcKhwuRl4B5gr
      rHDjtksqLsOgwuVm4BleKe8zUyyga5es9vk5owILe+/fD62jm2nii39vBBEJAw0QjcXw2q4M
      440YFdg4u/9maB09uiAGGBEDDRD4Hq7ry0fvwqVnoAHCMCQWiyFPQKOl6Wv8o8fDj54VUlH+
      5MMRBCQMHgXKz+R49vSZfO87BnylDf1fIMdlZBwzDNpgZWGWjiPDoMLlps8AVm2f4s37XF1Z
      IhE5fJOpAp8nz9bwexYPHz6msl/i628ey5VIuPD09QF0Q+PrX38OYcCVW4fTImmGSTqZoNvY
      x/YCSgctVucStD0pjPUm/df3YVRf2SmUfLMxIvoMEM8V+Z2f/BhN19H0wztA6HscVMuYSyuk
      IjbZXJqthsXdBQ1NCmMdr//aPoyqjTQ0Kbo1Iga0os/P/+2fEy8U+ey3f5eZZBTdjPD+B4fD
      DvPFIgBH9bGkoyxcaAZ0gk3e//A+mWyemClVU4TLzcAz3IyYMsmhMBUMNIAKHeqVBpZkgwqX
      nIEGiEajrG1uEI3IBx3C5WagAeoHTW7fvS3ZoMKlZ6ABwlARi0UlF0i49AwwgEc0kceQXrAw
      BQwwgMba06c4PRs/kKoGwuVm4HuA23dukkpniRiHq1Xgs7axCSh2NtZoNOs8fLImL8GEC8/g
      9+maeuXk1gyTeDRKz2pRbzRpEWEla9KUXKA36ksu0OQz0ACxmIHb7eC4AcmoSeh7lEs7BMEC
      nucSDQM2KrZMkvd9+pILNPH0t6JSxBIpqvU14tHD1boZ4aOPfwOAq1evvv5zQbiw9PUBai+e
      sLZTRTc0Oo53HjEJwpnRdwfIr6wSb3j8zd/7MamkVH8TLjd9BugcVHn47bfYjsMPP55hmHn0
      cok8qWiauBlH13SeVZ9wu3iH7cYWt+fv0O61CVVI065Tsw6G2Q9BeCv6zu7s/Ao//uQe7U4X
      jeFGSZp2Aw2NeCRBIpIEoG7XycSzbDU2SUaS5ON5bszdJGJEhtqWILwN/Zd3TcPruWiBN3Q2
      6FyyQDE9j+PZWF6XVDTNQmaRiBFhOXuF59WnbNTXsT1binAJ58LAsbRrt++zetcgMuRQ24FV
      5cCqvrLswd6XAGw3XgBgeV3q8vgjnBMDH/A3H33BX/6PX2G58rJFuNwMNEBmJk/CiOD5kgsk
      XG4Gp0MHAc+fr6Hr8k2wcLnpe8hXStFqdinO53D9ADBRgc/Dp8+5feMKj5+uEY0nsLoO9z54
      75hkIkG4GPSdv67VYmtnl+29Jp8dzRKpGSb5bBZNN8nmZgjCgKvFCJanSEsy3LH6kgw3+fQZ
      IJbKsVScxY/kiByVRQl9j1ajBiqg3emyuFCg1rS4GdVASTLcsfqSDDfxHFMeHWLx6MsOgm5G
      uHPvPgDLK4fLZmfngPOtnhI1oiSjKQzdIBVN86K+wUruKi2nSSKSoOW0yMSzdHotbM8+x0iF
      SWWgAa7ceIfW47WJL36raTqZWJZ8Yob9TgkNjcXsEsloklApomaMxcwStmfxbekB6pJ/5qlU
      gNf830PraFqESO7jEUQ0+Rx7Hw18H98PIDa5t9pkJMnqzHU26xtcza9iuV10TSdmxsknZvhm
      7yv21C435m6SjKboup3zDnmsqLBH/eE/HVpHN7MUP/3TEUQ0+fSd3U6nzoOHT3j2bJ33P/ut
      84jpxNTtGn+1/pcAbDU2AfjVi7/u+81Oc2uIrWiAQtN0lArR0FAodE1/2fGflDtLzzf5w7/4
      W0PrZJNx/tWnIwjoAtBnAN/p8vnnX3D99vtTXxs0HU2znLuKpoHt2byob/DBykc4nk0+MUPL
      aRI3E5Tae+y1ds47XNADEtf+69AysVgG+MOhdS4CfQZIF67wD//oj84jlomj43bouh10TWc5
      d4Wt+iZtp4WpmzieQ6hC3MDlVvE2ltul6TTOO+SxY+/866E19NgSscJPRxDN8EzuA/4EkI3n
      yMazVDr7bNSek4gmafdadHtdFjILbDe3MTSdg+4sLad53uGeCV999Z+H1sgV3ueOGGDyaTnN
      vhPbcrsArNfWAPCAUnv3rEM7N/75f//bQ2t8dGuRfzIhfQwxgHAqIrMPh9YwMpPzrfmJDKDC
      gK3dEiuLBdbWXrC0NM9epcEP3lkdd3zChBGd/3JojUh+corOnuwOoB1W/+nUKuTmijx6vsnN
      +RwtV3KB3qR/1rlAQTCiNlPjbX81Zv3TcLI7QOBTLu2iLy6wX33BXC7Di2qHe0tSGOuN+mec
      C2SoEe2PNt7218asfxpOFIVuRvjkNw57LctXrr2yTj7lFS4y0/2mS5h6JuM+JAiAb63TefLH
      Q+sYqVtkbv3sRL8VAwiTg/II3crQMnq0cPLfDr01QbjAyB1AmGj+15d1wlDx8f08/+1XBxRn
      o5SqPcJQMZONsLwQZ3U5+db6cgcQJpp4TCceMzBNjXTKoNH2WJ6P88l7eSwn4NcPmtjO279f
      kTvAOVJIFQmVIhVNUe1WsD2L95c+pNwusZBZpOU0cAOPrtuZmmS718mkTJSCVscnaurcfSeD
      54cUZqJ8eDfH+rZFNPL213ExwDlSsw5YyCxSs6rEzDi2Z5GIJMjGsySjSbzAZS6Vwgs8Hux9
      OTEf3pwl71xNvfz7k/fyr6yby0eZyw9Xwv9UBlBKEQQBhmEQBCGmKTPJD8N8epGFzBKpaBoN
      DT/06PTa6LqB7dnstnZIRpIsZpfRNE0KCI+BUxnAapT45tkeqVSCwPW4/cH7xI7SaUZ9cM7i
      YI97G6/rv34FL7V3+1Kpvy0/eOXfLadJqb33ms5xsY9uf866bQ6XMZJCDJo6efynMkAYQjRi
      0vMCFmfS+AFE9PEkw40qcexN+mNNhguDvn0IRzbvshrYPsGo9NV4218do79hKf74cWxo/VuF
      CD9792Txn8oAqXyRmY7L0tIi1VqLdERDSWGswfr6eSTDjegYnFMynKGPKv6TFw471V7qhsnq
      6uE3AMuLxdMHJggThowCCVNDYG/TfPBqtQsxgDBdqFf7BvImWJhqxADCVCOPQMLU0HAS/Mtf
      /s4ry8QAwtTQ03t8m/z8lWViAGGKUGhm75Ul0gcQpppTGcB3bR49esxBZZ9vHj4llNws4YJz
      qkegTr2M5Ybs1Vpcm4nR8hQZKYx1rL4UxjpG/hj9IBxR/pEa3D7hgPY/lQHS+SLJgxekkjFe
      1G3uLkhhrDfqT0BhrLgZxzQidHptUtE0oQpQgOe7mEYEL3AJ1WtJdJc0F0gf0P6n2kszluLO
      vbsAXD1aJinqk00sEucHhdv8euuXZGIZFjJLKBRxM4GmwV5rlxf1jfMO89yQTvAlx/Ecdpvb
      h1M6AWsHz7A9i5pVpWYdcDV/jbnkycuIXDZkGPSSE6qQvdYucTNO3arhBj2iVoyGVUPXDaqd
      ylAz28ynF1jKrvD13hcsZ1eo2zXikQQJM4FC0e61J/p7ZjHAJccLXAAc33m57KB7WHwqCALq
      dm0o/f1O+ahvEVK3a8TMOIuZZQIVkIgkKKTm+Xrvi/5+xoQgj0DCUCSPKlokoykWMkssZpbw
      Ahc/8NltbqNpGpo2uaeZ3AGEofhuyig47F+8TrldOstwTs3kWlMQzgAxgDDViAGEqebUfYBu
      u0U0Eade7zBfnB1HTILwkuXcFTQ0dppb3CreoWZVWcgsUbcOR686vTbtXuut9U9XF8h3efLN
      A5LzKyRw6eRnSBzVBRo1464LFIYhAePbRhiGffswqlwXdUxdoEG5Lm+5gXOpCzToPMonZmg5
      TTQ0cvHcUUpHip7vkI3nCMJ5Hux9+eowqzqmfQbon8oA7cYBtuuiOQ5B6FHUQdcPn6K++/+o
      GLVen76mjXUbmt6vr49sOHBw7Nqo9kc7g/YfGH9/cmLLaZKNZWlEU7ScFqloCtuzaTlNur0O
      12auY+om7tH7jkOhwfr6AP1TGSBXWOKzn8wDGq7nETf+X71KTRttZuWo9QZsYKzb0OjXH9X2
      tGO0Rrk/Y20b7Zj46V+23Xjx8u8nlf5Jul8vG/lSaWD8QxoAQD/K2IvHhi9hJwjnjYwCCVON
      GECYasQAwlQjBhCmGjGAMNWIAYSpRgwgTDViAGGqOdWLML/X5cmzDeKJBO2Ozf337yPzRAoX
      mVNOkRQlk83iBYrVYoaOFMZ6o74UxjpG/qIWxnLtNq22xeL8LOVGl9tLGsgkecfrT0BhrLfc
      gBTGGkQ8M8v9e4ffAMwVDifJk7pYwkVGOsHCVCMGEKYaMYAw1YgBhKlGDCBMNWIAYap5KwO0
      avs8+PYxgYyBChectzJA0+pxbTZBxxt1OIJwtryVAWbSCbYaPTKRUYcjCGfLW73vTucL3M8X
      UEoRhq8Wxvqt6789dFC6ZhybN/PZ6k9e1rwfBhWqgYWxPr36Iyy3M7S+Tv8+GJo5kvbJxLID
      20dTo2n/uJk4tv1HoX81vzpQPxlJjUR/IbM8UD9mxPr0NTVkFptSCqXU2AopBUGArutjq1MT
      huFRDfvx6cP4Ck2Nu/3P4viOOo/sNPpD75V2TIU1127T6jp0uof149+UMdpt1dkuVQauMwwD
      TdPY391ip1w9yj0K6Xa6+MHhyRUE/jFzFisqpR32a0183x94VRhkrm63S61Ww7GsQ12lCIJX
      y+q1Gwc0u87R7zsv93OQvq7rNGoH9Ho97J57FHNAGPgEAwP36XZ61KtlNrZ2X5mI0LbtV355
      XPujFAflXUqV/hlgXtd4E5qmYbUbPHm29sqgh23bx2aMhr7LXrnysh1tyzo8bgPa8f8/OW3b
      ptvtvNQNw+DVSRiVwveDoz9DtjbWaHdtfO+44z84AdHrWdSbXerV8vgmyLDaFrvNNokIbDxt
      o8WixCMJ8oVZHNvGsVx8p0V+8Rpht07H1QlVAf2YK3HPD7A7dbasOr4Rx3C6kMrRrtfIZzNg
      GliOz1wujQp9yuV9fnDnPgfVA/ILcbZfrFOudZjPxTFiSeoth/fv3x64vYODCs1qlfjsAklt
      D9v1qdZtlufTeFqc0GnTaLVZmJ9nezskHdNRyme95fDue/eIGv0nZKtVp7JfJZqIU2t00EOb
      4twMQSRLu9Egk4rQCw1Mv0M0m8a1EpiGi+9YbKw/Q4vFcdsOpgnZXI7SfoV379wlYgxuL6UC
      Wu0uRBVrT74lkc7QsBVJzcXyAgLHJjc7R6PdJZuMEknmWZ4fXOy40Wjgderslsq0W21m01FK
      9S4LszkaB/skszPYnuLW6iJPn62hCNGjM3i9Do1KjWRhgYTapRdqlCtNluczBEYKv9Pknbt3
      MI+OwaMHXxBEUqzMz1KrNohGArRkAd9qksvl6AUhpqbT7Vpcv36NWqNJKpPkxeNdtMISYW2P
      zMwcbmjwgxtXBtSBO8RxbfZ26vidvfG9B9B0nWI+Sb3WpLJfwtdi6FrI+vOnVOpNinOz7O6V
      cHoutuNQ3dui94Z0cN918EMol/bo2jY6ik6njWVZdLs2nW4Xq9Nlb2eTUuWAxkGFru2SSqeo
      12oY0TjJmElpdwfLcanu7dI75rJheD1yi8vYlk21UuagbZNOxNgv7dHpWGRm5rh2dZXA6bC3
      V0I7uso3D/bo9gYXCo4m0pjKpdFoUN7eIzmTJwxcWp0unt0hMBOk41H2y2X2qzV0XUMFPjOF
      RZoH++zvl0ln51Chi2U71CplbPcNOfuajm1b2LbDfrlEpbRDrrCIZXXRQ4/dcgXLcZifn8Ox
      Hcr7B8dLaRoKRbPZxrEs2t0upmHguV12dsv0XJfS7i5ur0fPc9GjSVYWiuD1mF1awuraVPbL
      VJtdssnY4TG0bLKzMy9PfoDlqzeYn8vjeR7N+j5GPEPgOri9Ho1Gm+J8Edtq4/ohmq6TjEep
      1euksnm0wGFndx/Xddnd3XtjmrKmaUSURzQ7M3wf4DzxehbrL/a48c4NIgOuuoLwfYzMAEqp
      l895cFh9OVSHHz8opdA0HaUCFBrG0TNrEATohnHsrUoQxs3o+gBhj+2tHUr1HsvFLEmzR9PP
      09vfIswkKOSLbD1/QH7xBolEguX5Ob758tdcv/NDnHYLHZ9oKsvB/j7z83M0Oi4ri9M7gbNw
      NozMAJoeo1quUFyaR2lR2u0qBy2bpdk5mr5Fu91mYfUW7WqJVjvOXMakY7m82Nwgm8mws7HG
      XCFPrVajYfnEo4YYQBg7I+0DtNttYqaGiqRQXheFSWW/wtz8HDo6uqGjBS7lepelYh70KF7P
      wozGadX20WIprHaTTCqN7SsWZQomYcz8X2RQtaclUrmoAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='SIA countries' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA countries (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SIA type' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Seasonality of Traffic by Month' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAdZElEQVR4nO2dWW9bWbbff2cieTiJEiVRs2WXLdvXdlV16naVc9GoTpXRuN1A90PjJvch
      LwESdB7yLfIBLhIgCPKShzwGyEP64SIXSAfdaPRUg8tV5aHKs2TNEkVJHA/PuPMgibZE2qZI
      aqC4f4Bgi+JZXIdn/8/eZ++19lKEEAKJpEdRT9oBieQkaVsAQRAQBEEnfJFIjh29mTcFrs2z
      58+IxPrY2txmMN3HVqHClSuXQAjE7o9E0m00JQBF14nHEni+y8TYKC/W15nqj1H1wVQVAFRV
      jqYk3UdTAvCsCrl8gUxmmNVslqnhATa2y8yMKAghUBQFRVGO2leJpOMo7c4C7Y3/ZQ8g6Uaa
      6gEkLwmCAN/3T9qNQ6PruuylGyBv25KeRgpA0tPIIVCLWJbFH//4R65fv87AwAC+7+O6Lqqq
      ous6lmURiUTY2toiEokQi8UolUokk8naMErTNHK5HIlEAiEE3333He+99x62bRMOh/d9lqqq
      mKaJ4zgoioLv+zx8+BDf95menmZsbEwOcZrk1WGsFMAh8DwP27YxDAPXddnY2GB7e5u5uTnW
      1taIxWK1WbFyuUwsFsM0Tba3t7Esi0QiwcDAAJ7nsbKyQiKRIBqNksvliEajFAoFisUiy8vL
      RCIRfvKTn/DVV19h2zZCCKLRaM0H0zQplUr09fXx7bffEgqFGBoaOumvqOs4EgFsbW3x8OFD
      rl+/zm9+8xt++ctfcufOHQqFAoVCgXA4jK7rTE9Pc/HixaNwoaN4nkelUkFRFKLRKEEQYBgG
      6XQa0zRZWVlhbGyMqakpFhYWCIfD3Lt3jwsXLqDrOp7nkU6nGRkZwfd9otEokUgE13Xp7+8n
      lUoRCoXI5/OYpkk6nUbXddLpNOPj4zXBBUFAuVwmHo8TCoUolUr4vs/AwACGYZz019SVHNk0
      6IMHD5idnWVpaYlf/epXPHnyhL6+Pr7//nuKxWLtgt+6dYvBwcF2XDgyPM+jXC6jqiqxWAxV
      VZuaBRJCsLy8zPj4+DF5+nbkLNBL9q5huVw+mh4gm82yuLjIrVu3KBQK5PN5stls7c5569Yt
      qtUqc3NzJBKJo3ChLXzfp1QqoSgKiUTi0GsciqKcqsYvaYxt253tAURgIwK3JTuKoqJo0XZc
      aZtXG348Hm/Y8Ls1+E/TNNkD7LLXAxSLxc4KoDz3X7HX/7ElO1r0In3X/0s7rrTMXncIvLbh
      S84OchZol72HSiGEbPg9SlcIQAjB7du3uXz5Mrdv3+a9997Dsizu3r3LxMREbZZmamqKkZER
      QqHQW+2Vy2WCIJANv0fZGw52xZVXFIXBwUE0TUNVVSqVCuPj42QyGSzLwrZtKpUKd+7c4dmz
      Z6+1I4SgVCpRLBYxTZNkMikbfw+yt1ip63r39AAPHz4kl8vheR6lUol8Ps/w8DCWZbGwsMD7
      77/P4uIilmU1PL5cLuP7PvF4HE3T2vKlGx+CVVWVD8ENaC4jzHN5MjvPxFAfzxfW6euLUijZ
      XL16meP4ShVF4Wc/+1nd66lUCoCZmRkAhoeH9/19744fBAGxWAxdb1/v3SwAST1NtQhVN0jG
      o/i+h+vYFKphRvujVD1BWAlqjaKdCSWBwPO8/a85G1jz/7kFayq2NoPW92NifWO1O/5B+63S
      jemf3RjCfRw0JQDftcltZGFwCDNqMpiKkytWuaQrCLFzZ2m3i1VQ6u7QvuviFb5t2oZAwVEv
      4SsJwsH/ITHyIcYrQWWdYE/oe8FomUzmjSvZW1tb9Pf3N/X3fD5PX19f077k83mKxSKZTOat
      oRByHaAxTQlAM8Jcv/EuAKOjowAM7Y42TsPNcKfhXyBQkoSCp4SDx0fzObsNf++Z4v79+0Qi
      EbLZLFtbW1iWhWmahMNhcrkcqVQK0zSZm5vDcRy2t7e5cOEC1WqVfD5fWwX/+uuvCYVCPH78
      mA8++IDt7W2CIODixYusrq6yubmJpmmk0+nas4yiKMzOztYC4D7++GPi8fiRnPdZpisegl+H
      ABz1/G7Df44WvH4GqB08z8OyLIIgIBQK7XuI3usJhBBcu3aN2dlZNE1je3sbTdOwLItHjx4R
      j8e5cuUKm5ubtQjQjY0NhoaGahGkmUyG5eVlNjc3SaVSTExM8OTJE+LxOI7jkMvlsG2bUChE
      NBolk8mgqiqpVIpSqSQF0AJdKQABuOokvpIiFCygBrMdfxgPgoBKpYLv++i6XhcMl0gk+PnP
      f45hGExOTqLrOqqqcv78eRRF4fPPP+fmzZsAfPTRR7UpXNh5qL9y5Urt/69+pqIoeJ6HYRgo
      isLHH3+8z6+9PAJ4+UAuA91ap6sEIABPHcdT+jGCJYxgoaMNXwiBZVm1xBbTNF87dlYUhVgs
      Vvf6XuP80Y9+VHut0ezTm2ZlXh3PHzy2EzNZkpd0xbe50/DH8JQ0RrBCJLjfsYYvhMBxHGzb
      BiASiWCapryj9ginXgCuMoqnZtCDFSLBvY41/IPj+kQi0VSjV5T62SpJ93Iqr6QQYie8obQT
      Wh3xv+lIww+CAMuy8DwPTdNq4/rDIHuGs8WpEsBew99LKE/GDQpipW2b1WoVx3Fq4/poNCob
      sgQ4JQIQgCvi5PN5wuEwqVRqZ+eD+rCepu35ygDFsocuioTDYZLJZNuNfm8doNuQi2Cv50QF
      sNNQh3DVMcJagr6+vpYvlAAEURxtCkEITWyRiIUwEsnO+nwaVv4Oyd46g6SeExOAp/TjqpNo
      YouI/y16cLGliyQwcNVxfCWJKixC/iwq9u5fuy9oTXK8HGuI4M4dP0lVu0agJIj4dwm1MJcv
      UHGVDJZ2HVu7hCY2Mf27hIMnrzT+o0MIwb17996YewCQy+Xe2GNsbm7WIkv3Ng1olmw2S6lU
      Yn5+vuljJPUcWw8gUKhq19FEgbD/oKVZHQHY2hVAQws2iPidWw84LPfv3+fDDz/k888/R9M0
      ZmdnGRkZoVqtoqoqruuSyWRYW1tjbW2NYrFIOp0mk8mwsrKC53mEQqHaGsT29jaXL19mbm4O
      0zQZHh6mr6+Pe/fuoWkaqVSKarVai2gtFotcunSJhw8fks/nuXHjxgl9E93NMQ6BxG6DbX0M
      rQBh/1FbNjqFrusEQcDKygqxWIzR0VEURcG2bVzXxTAMbNvm6dOnqKpKOp1G0zRGR0f56quv
      8DyPmZkZqtUqg4ODtW0PNzc3GRsb49KlSywvLzM2NkYQBGSzWXRdp1qtMj09XVuFfueddyiV
      Sif8bXQvp3pXCN9aIH/v37fsW+LqP2Ak/qrl4w8iRH3OQiO++eYb3n///Y59bru8Gock2U9T
      34oQglxuEyF85ufnqVbKLK2un4L78OnkNDV+yZtpbggUeOSLJRSnwEbBxvezhFSB5QlCHF1G
      WNDmnHsQBB3LAtujG6dBu3Uzr+OguZzgICC7uoQxOoJilyjgIfyA4UkFlSPMCGsjeX3Pp9Me
      t7O3+u04TtPxSJLO0XRG2Ec3/zkAk+fO7/ubvLG0x97mu8lkZxfsJM1xum+PZ5ggCCgUCkSj
      0bdu5CU5OqQATgDXdSmXyyQSibb2KJK0jxTAMbOXcdZO3JOkc8jJ4WNCCEGhUACQD7unCNkD
      HAN7e9HHYjFZyuiUIQVwxDiOQ6VSkUOeU4oUwBGyV3tANv7TixTAESCEqBUCDIfDsvGfYqQA
      OszeeF9OcXYHPSuAlZUVCoUClUoFIQQ3btzgD3/4A5OTk7x48YJ4PE4kEmF4eJixsbG32tsL
      abBtWw55uoienQYdHR2tD74LAl68eMHw8DCmabK4uMidO3dwHOeNtl4twCEbf3fRswKYn5/n
      +fPntf04i8UikUiETCbDwsICExMTXL9+nfBbtlcPgoB8Pk8oFGq4VaLkdNOzQ6CpqSmmpqb2
      vba3n+deemE6nWZ6evq1NmRIQ/fTcwIoPf9PeKXvWjo2lPqQ6NSvapttyZCG7qc5AQiBu7tl
      t+e6qJqK6/qEw90XxRg4WYLqYovHvlOb4jQMQ4YwnwGaS4jxPR4/m+WvLp3nzpdfkB4do1qx
      uHT1Kjo7D4GdyJQ6aOMobLaDHwRsb28Tj8fRdb0rs8Mk+2lKAIqmETfDrK8sYTsOpapLXyRE
      EIBQREdSIoG6tL1O2KtLBWzRpqcM4CoXSO8GsskUw7NBUwIQvoeCwOzPcPNvdmqE5UsWEV0h
      CBQURelIHdq6B8k2dzJQVbXe5iF93CnDdAFQSChzpz7FUnI4miyTGmLq3PS+1wYHOlt98TQi
      0Khq19CDVQyxDkyctEuSDiNvZ68hIEpVu0LE/x6VFreplpx6pAAa4CmDuOoopv/1qdiFTnJ0
      SAE0QBOb6P7GSbshOQYaPmWWigWePnmC5/fm3U+R26r3DA0FsDT7hHt3H1C03eP2RyI5VhoK
      wHdsMlPniYblCElytmkogGgiwvZqjqrbffWwJJLD0FAAkWgMq1ohpPVstLSkR6hr4Tt74EMs
      HpUTgJIzT50A7HKe7x4+I9GXQJVRvpIzTp0AIvEUVy9O4Xhy/C85+zQc5FesIs8ePKbqyflw
      ydmmTgC+a6OGU4yOD2DIMZDkjFMnACuf45u793F2w5wlkrNM/RBoN7ZfCFGbBQo8l6ezL3Cs
      It9/95DV1WW+f/y81dwSieTUULfUG0n089FHHwEqYW2nB1B1g1gkhBGOkkzEKFkuwwmDiicI
      K91VJK8tH5sskyrpHuoEoIciRNSA+4+foptxRtJJfNdmfW0V17bIl23S/QnWClWujCgguqtI
      Xls+KvU+SrqbhlfTcWziqSG8ahlIohlh3nv/B/ves7dZYCCHQZIupuE06ObGMl/87s9E+9PH
      7U9XI4SgUqnUkvGLxSK+71OpVKhWq7Je7ymkrgeolrZYz7vEB0xCuowFOgyWZfHrX/+ad999
      F03TWF1dJRwOY5omjx8/ZnBwkJs3b8otFE8RDVaC+xnpTzI0NIh76IQYZddkMz9nD9/3CYfD
      eJ5HPB5ndXWV9fV1Hj16xI0bNyiXy/z5z38+aTclr9DgGcBFUUOoeoiI0XxDFUJgpP4a1Whu
      tzR74/8R2GtN2+8G4vE4ly5d4ty5cwBcv36dd955h8XFRSYmJjh37lytUJ7kdFAnAKtYJJvP
      E3nLrsgH+eyzz5iZqKJ7PmXLxXV9dF3FcX1URQEFNFWlbDmMZRIdO4GTJnDz+NZs7fer0wA7
      v185B3iPOT+y8y/AYAzcwkvh6/HrKKqcWTop6r55MzHAxPAAT16s7uQEN3FtKpUKlUqFhcUV
      yvl1XC8gahoYukoopLG8VmJkKIbt+KxtlAkZGv1nZJHZK31P6cl/bPn41A/+J4ra10GPJIeh
      rnn7novrOVRdH63JWCBd1/nxj39MOftnrO0qqqaSL1QZGohSqbrETIPZhTzpfpMLUylSyQgU
      O34uEsmhqROA51gszS7Rl5lsWgDLy8t4nkd17Uvc7S9qrxdWXr4nCbhb4ALP1yFwc4jgZeUV
      zdwmEXq8z65fXaE4Xz7cGb1C3JhDj+0/xdLcJl6pNZtGYYNYsN9HtzBPuQ0fk/GnqPrZGRJ2
      G3UCCHwPEQ7jV8oETYYNTE9Po6oq5VAEO9zsQ56x+7ODFk3RNzOz7x2+ZZKvtj5lmLg4jZHY
      b7MQDOAVWrMZGhgkfnG/PWdrk1LQuo+pSxdRDTkEOikaPgO89+41ip5GROYES844jbdF8R0e
      PbjLNw+eHLc/Esmx0lAAgS9I9g1w5co7x+2PRHKs1AmgWtriyzvfEoiddV2J5CzTMBTixtVL
      OFULX8ZtSc44DYdAnmuzvPiCZ3NLOy8IQaViIURAPl/A91wKxdan/iSS00LDdV5F06gULCYm
      RmqvbWxskIholKoB8yvL9IcN9MgFQj2eEdZueLPv+wSKzDI7KRoKIJ4c5F//u39DLLIzT+97
      Dmury6gjGTY2C/QlY2yWbEZ0BbXHM8KCNuuYaZqGKrPMTozGGWHlLf7p86+59bc/YSBuohlh
      fvjhRwBM7C+uLjPCJF1N44ywrQJRAz778pvj9kciOVYaCmBycoxc2eVHH7533P5IJB1HCEE+
      n8f3fVzXpVQqYVkW+Xy+8RBodXWdTCqBrxqN/iyRdBVra2t89dVX3Lp1i9u3b5PNZjFNk4mJ
      iUY9gE++WCVqRuTu0JIzgeM4FItFZmdnmZmZoVwuk06nefLkSaMeQCFmGrzYsomF5OyEpPuZ
      nJzkgw8+IJPJ4DgOn3zyCYZhMDk52UgAKqqqEBYuBdtjwJTDIEn34dtr+NZ87fdzQ0CwTURn
      39xnw1t8/8AA60Wf6CGS4iWS04S79TmV+f/21vc1DIb79rvHhCORI3FMIjlN1AtgewsMjf6h
      CSJ6eyuxEslpp04AWjhCNGKy+OwhliyTJDnj1D0DqLrJzJUbjI4MndH92ySSl9S18VBE485n
      f+Q3v/md7AEkZ546ARhmkvMTowROlaorM2IkZ5uG06DnLpynopgkw3IhTHK2aTjMX3oxh6aH
      8A8kj4jAI5vdwHNtNrflJq+SoyGXy/H8+XOEECwuLlIqlXj27BmlUolsNotlWR37rIa3+PTw
      IJvzefxAwCszoYXNdV68WGM9F8PUFaKJBAZip6De7k87+AcywNrNthIiqLPZTmU/gaizJ0R7
      PgZBgGgz8+2kmZ2dZWhoCNM0WVpaYnR0lGq1imVZpFKpholJb+LOnTtMT0/jeR5ffvkl8Xic
      XC6H7/vE43EymQw//OEP32ij2evSsAfY3sry4OsHOAey4gM/QNltBI7roSg7WVIvf5o8w9ew
      31b7ZVoVGthry2Yj/9r0scE5d9vPZ599hqqqPH36lC+++IKVlRVmZ2f505/+xO9+9zu2trYO
      ZW98fJy7d+9SqVRqVXdUVWVmZoaJiQnu3r1LsVh8o41mr3NDWep6lLHpDPqBdL/U0Bgz0RTR
      aATb8QirCkEgUHZLq7bbGNQDnyfaV1SdzbbMUe9j2yLtsI/Hjed5jIyMcP/+fSK70QNCCNbX
      17l58yb37t3jm2++4ac//WnTNqenp5mcnCQUCvHpp58SiUQolUqkUimEEFy8eJFkMvnG715p
      si02LJH09MUy4VCkbkijqCqJRByAqCkfkCU7Oc03btwglUoBMDY2hmmahMNhhoaGuHXrFrZt
      v9WOs/lHhL+z04i2+0MVTAAXEoC/tfPeCOBsvOJD9Dx6bP+erc1SXyc43s+50SGWtqpomkwI
      kNQTODnc/Ne131MqUHjl/zaEQyDy3wMQAuzqy+NDAz9C0fbHmlUW/geBvdSSP5HRf9U5AQDY
      to1pRuXOcJKGeJU5yrP/0PLxRt/7dQI4KRoOPhPJBLnsBoeukSeRdBkNBZBMDaD5Vapud0/P
      SSRvo04AdjnP/Qffka/6RAwZDi0529SHQ+sGqqYxODyELrPiJWec+oSYch5X6EQMvekSSRJJ
      t1I3CxQfGOWTfzF6Er5IJMdO9y5BSiQdQApA0tNIAUh6GikASU8jBSDpaWRI5ymnUChw+/Zt
      Pv30Ux4+fIjjOGSzWVRVJRaLkclkOHfu3Em72bUcSgB2pcCz+TUGU1GyW2WuXmktAk/SPL/9
      7W+pVCrYts1f/vIXJicnCYfDKIpCNptlcXGR4eFhTNM8aVe7kkMJoLidw3Ud1gsqoykTyxOE
      ZZG8lu3B24vk3bp1i8XFRYrFIr/4xS9YW1tjdXWVy5cvA/Do0SOAOr+OkiBo77r4vk9Q52/r
      1yUIGlyXJlMiDyWAvnSGXH6eVF+UjWKVmREFIYvktWwP3l4kL5FIcPXq1drvg4ODXLt2rfb7
      xMREW5/fCoHa3nVpfM6tXxdVrb8untLcdTmUAIxwlMtXrwCQyey8JqMlOk/+3n8geDXl6RBE
      Rv8l5tjfd9ijs4t8CD6FCL+M8IutHRu8Pf1Q8hI5DSrpaaQAJD2NFICkp5ECkPQ0UgCSnkYK
      QNLTSAFIehopAElPIxfCeoxiscjvf/97bt68SaVS4f79+8RiMTzPo1gscvHiRa5evYrWZhhK
      tyB7gB4jGo1iGAZBEBCNRjl//vzOdveOQ19fH8+ePeP+/fsn7eaxIXuAHqNQKGAYBr7vs76+
      Tj6fZ3BwkCAImJiYqO273ytIAfQAO9VSdqIWU6kkn3zyYwBGRobr3ptO9+8e8zLkWVHO7nBI
      CqAHqK7+b6yF/97SsYoWp/+D/9Vhj04Ph34GKOS3cWyL1fXWwnUlktPEoXoA37F4/PARfcMZ
      IkqA5aUx6K6MsLaK5B1TRphoIzuqkY+iTR/rz7ndjLCgoxlh4rgywgrbm9h2lWrVpuq5jKig
      7nYi7Ra1U1Dqp946kBFWZ7PNjLCD9jqREaYcsKmgtNwcGvmodMDHV2n3nFVNRa27tm1cF7X+
      nNV2iuS9jv7hcf5maGffUD8Q6LtF8qD9YnGNbHRiLqLTMxpHMUNy2n2st9du9c7T4+OhH4KV
      3VxL/exODEh6CLkQJulppAAkPY0UgKSnkQKQ9DRSAJKeRgpA0tNIAUh6GikASU8jBSDpaaQA
      JD2NFICkp5ECkPQ0UgCSnuZQAthLthAiwGszWUUiOQ0cKhzarZZ5/PgZajiM53hcvX6Nvajo
      drLB9jhooxPFZzrh11HaOwqbR2+vPfuioc32aNXHQwlACEFqaITAtVAiAV4Aym5KpKIobadE
      +gd6lU6kRB602W5KZJ2PHUiJVJT9NttNiTzoY7spkZ0+58APEOrBa9teSmSdj01e50MmxAgq
      pQKjY6OUKzamrhAE3VUkr92UyOMoktduSuRBH902faw/53aL5KkdLZKnHFeRvHA0ycxMEoBE
      PH6YQyWSU4mcBZL0NFIAkp5GCkDS00gBSHoaKQBJTyMFIOlppAAkPY0UgKSnkQKQ9DRSAJKe
      RgpA0tNIAUh6mpYEsL6ywN373+N3PjReIjlWWhKA7cFIfxRbJoVJupyWBDCYSlDyNExZY1LS
      5bTUhM1EiguJVK04HuxkIml9Nwkb9bVnm0E1+mtZPbUMMzVBePzftmQPAGMQ3/dr9gCM9N+i
      JX7QkjktMlnnoxKeaMvHgBDigI+hkb9H+JXWfIxfrfNRjV1r3Uc1VH/OodE2zzlSf86Zv0P4
      pZbsabHLDc75SlM+KqLN5EwhBEII1Dazjl4lCIJTbe8obPaij6fhnNv+dEVRGn5goVho2eZB
      eysLcyytZgGoFAocLLB5WHt7lAs5sptF5uee4x1Ic/WqVSqOc2ibAIWtdbaL1X2vVSoVtra2
      WrKH7/JiYYnt7CqbheZ7hjfZtKwyjnO4h7i3NaxCsbj7P5+trbdf/9fZW12cxwnedF/2sO3G
      rWDPZjm/yaMnz/BetRN42O7+445sFF8qFXn47W2SA6NYTpXowAjJkIK1tcamG8akSt/QCCFN
      ZXj4zcOmUqlEJK7xf//pHxkdmyYwFKJGCA1IpuIUSlXmlrKcG4pDOEE8GibzFpsAluNTLKyz
      sb6G69isFVwGTAUjYqIJlc3CJtOXrjGQMA9x5oKtQgWwWF8sYsQSlDZLDGQGcG2H/v7+Q9ja
      JfDIbmzixDQ0pcBnf1rgvX92HUNR3vrdvQ7bttje3CRqGhQqBfxAYW3+OeMzP+CdydZslkol
      yuUyinDJ5wpY1gDJ9BDxcPPNTAifUqWEs7RMOBSmXNigVCgTzYwR1yG7NE9yeID1LPz1Dy69
      NsXb81wCIXj24GvWLZWh2E7Wcd43UYrL6IkRlKB8NOsA27k1XBfifWk0Fd65MIXw3J27uB4m
      EQ0zMj5JJLBwlNBb7Q0MjzI6nGZs6jz9qQQaKrFkP8MDCRYWl3F9GOxPkhrMMDkUY2PbaspP
      wzAICcHQ+CRC1UklogyNjBEN6yi6wYUL51GVw40QhQCrVKBkuTi2g6ppjE1OoCsKkUjkULZq
      KCrjmT4ULYofCMaGBwkpDkW3xeR032VlNYuuBSytZkmk0gymEgyOjNOfjLZkspzfpGJ7FLdy
      FCsOqcEM2fU1oqHD3WM928KyBY5TZX1lEdsNcKpVPNdmeT1Hf3qAgDBx883nrmo6ge9hmAmm
      xkZwbIdYX5qkadCXHiaT7mdi8hz/H3WGj5WGr6UwAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 15' width='192'>
      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
    </thumbnail>
    <thumbnail height='79' name='Sheet 16' width='192'>
      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
      y4rQjZX/AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 20' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Stat' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='X-SIA Type of visit' width='192'>
      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
      /H/jk4Ze1/zQpwAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
